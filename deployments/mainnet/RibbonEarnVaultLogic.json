{
  "address": "0x749B33Ab87AD5fF20213cFF25A8Ba6eE7616dD5c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrower",
          "type": "address"
        }
      ],
      "name": "BorrowerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearlyInterest",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "CloseLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLoanAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOptionAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoanAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOptionAllocation",
          "type": "uint256"
        }
      ],
      "name": "NewLoanOptionAllocationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLoanTermLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoanTermLength",
          "type": "uint256"
        }
      ],
      "name": "NewLoanTermLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOptionPurchaseFrequency",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOptionPurchaseFrequency",
          "type": "uint256"
        }
      ],
      "name": "NewOptionPurchaseFrequency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "OpenLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOptionSeller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOptionSeller",
          "type": "address"
        }
      ],
      "name": "OptionSellerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netYield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pctPayoff",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "PayOptionYield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "PurchaseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_PCT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationState",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "nextLoanTermLength",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionPurchaseFreq",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentLoanTermLength",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentOptionPurchaseFreq",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "loanAllocationPCT",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "optionAllocationPCT",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "loanAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionAllocation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitOptionSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentQueuedWithdrawShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_keeper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_optionSeller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_tokenSymbol",
              "type": "string"
            }
          ],
          "internalType": "struct RibbonEarnVault.InitParams",
          "name": "_initParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "nextLoanTermLength",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextOptionPurchaseFreq",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentLoanTermLength",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentOptionPurchaseFreq",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "loanAllocationPCT",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "optionAllocationPCT",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "loanAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optionAllocation",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.AllocationState",
          "name": "_allocationState",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBorrowerChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastOptionSellerChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionSeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOptionYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "payOptionYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingBorrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOptionSeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "returnLentFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "returnLentFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollToNextRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrower",
          "type": "address"
        }
      ],
      "name": "setBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidityGauge",
          "type": "address"
        }
      ],
      "name": "setLiquidityGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_loanAllocationPCT",
          "type": "uint16"
        }
      ],
      "name": "setLoanAllocationPCT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanTermLength",
          "type": "uint32"
        }
      ],
      "name": "setLoanTermLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_optionPurchaseFreq",
          "type": "uint32"
        }
      ],
      "name": "setOptionPurchaseFrequency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOptionSeller",
          "type": "address"
        }
      ],
      "name": "setOptionSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVaultPauser",
          "type": "address"
        }
      ],
      "name": "setVaultPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "lastEpochTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastOptionPurchaseTime",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "optionsBoughtInRound",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "amtFundsReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ced0318afe230295ee4215f3a36e60a74d5ffb7ff3980bc6296d5d6999e1a61",
  "receipt": {
    "to": null,
    "from": "0xD340C943ae137Ea0BAB682a286d1Af65e4E39A6b",
    "contractAddress": "0x749B33Ab87AD5fF20213cFF25A8Ba6eE7616dD5c",
    "transactionIndex": 133,
    "gasUsed": "5209115",
    "logsBloom": "0x
    "blockHash": "0x46ffad8944900776d25c03b8423a40732a6de7f53bcb2aa7305721fd4f7e7e8a",
    "transactionHash": "0x2ced0318afe230295ee4215f3a36e60a74d5ffb7ff3980bc6296d5d6999e1a61",
    "logs": [],
    "blockNumber": 15120356,
    "cumulativeGasUsed": "18126781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
  ],
  "solcInputHash": "abd5dfa1d06c0f39f441701e0a7f77a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrower\",\"type\":\"address\"}],\"name\":\"BorrowerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearlyInterest\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"CloseLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOptionAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptionAllocation\",\"type\":\"uint256\"}],\"name\":\"NewLoanOptionAllocationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanTermLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanTermLength\",\"type\":\"uint256\"}],\"name\":\"NewLoanTermLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOptionPurchaseFrequency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptionPurchaseFrequency\",\"type\":\"uint256\"}],\"name\":\"NewOptionPurchaseFrequency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"OpenLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOptionSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOptionSeller\",\"type\":\"address\"}],\"name\":\"OptionSellerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netYield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pctPayoff\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"PayOptionYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"PurchaseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_PCT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationState\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"nextLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanAllocationPCT\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionAllocationPCT\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"loanAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitOptionSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentQueuedWithdrawShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct RibbonEarnVault.InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nextLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanAllocationPCT\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionAllocationPCT\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"loanAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAllocation\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.AllocationState\",\"name\":\"_allocationState\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBorrowerChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOptionSellerChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOptionYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"payOptionYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBorrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOptionSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnLentFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"returnLentFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollToNextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrower\",\"type\":\"address\"}],\"name\":\"setBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_loanAllocationPCT\",\"type\":\"uint16\"}],\"name\":\"setLoanAllocationPCT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanTermLength\",\"type\":\"uint32\"}],\"name\":\"setLoanTermLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_optionPurchaseFreq\",\"type\":\"uint32\"}],\"name\":\"setOptionPurchaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOptionSeller\",\"type\":\"address\"}],\"name\":\"setOptionSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVaultPauser\",\"type\":\"address\"}],\"name\":\"setVaultPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastEpochTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastOptionPurchaseTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"optionsBoughtInRound\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amtFundsReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_usdc\":\"is the USDC contract\",\"_weth\":\"is the Wrapped Ether contract\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"depositFor(uint256,address)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"deadline\":\"must be a timestamp in the future\",\"r\":\"is a valid signature\",\"s\":\"is a valid signature\",\"v\":\"is a valid signature\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize((address,address,address,address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256))\":{\"params\":{\"_allocationState\":\"is the struct with vault loan/option allocation data\",\"_initParams\":\"is the struct with vault initialization parameters\",\"_vaultParams\":\"is the struct with vault general data\"}},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payOptionYield(uint256)\":{\"params\":{\"amount\":\"is the amount of yield to pay\"}},\"payOptionYield(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"is the amount of yield to pay\",\"deadline\":\"must be a timestamp in the future\",\"r\":\"is a valid signature\",\"s\":\"is a valid signature\",\"v\":\"is a valid signature\"}},\"recoverTokens(address,address)\":{\"params\":{\"recipient\":\"is the recipient of the recovered tokens\",\"token\":\"is the ERC20 token to recover from the vault\"}},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"returnLentFunds(uint256)\":{\"params\":{\"amount\":\"is the amount to return (principal + interest)\"}},\"returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"is the amount to return (principal + interest)\",\"deadline\":\"must be a timestamp in the future\",\"r\":\"is a valid signature\",\"s\":\"is a valid signature\",\"v\":\"is a valid signature\"}},\"setBorrower(address)\":{\"params\":{\"newBorrower\":\"is the address of the new borrower\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setLiquidityGauge(address)\":{\"params\":{\"newLiquidityGauge\":\"is the address of the new liquidityGauge contract\"}},\"setLoanAllocationPCT(uint16)\":{\"details\":\"Can be called by admin\",\"params\":{\"_loanAllocationPCT\":\"new allocation for loan\"}},\"setLoanTermLength(uint32)\":{\"details\":\"Can be called by admin\",\"params\":{\"_loanTermLength\":\"new loan term length\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setOptionPurchaseFrequency(uint32)\":{\"details\":\"Can be called by admin\",\"params\":{\"_optionPurchaseFreq\":\"new option purchase frequency\"}},\"setOptionSeller(address)\":{\"params\":{\"newOptionSeller\":\"is the address of the new option seller\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setVaultPauser(address)\":{\"params\":{\"newVaultPauser\":\"is the address of the new vaultPauser contract\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"stake(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to stake\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawInstantly(uint256)\":{\"params\":{\"amount\":\"is the amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"allocationState()\":{\"notice\":\"Vault's state of the allocation between lending and buying options\"},\"borrower()\":{\"notice\":\"borrower is the address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)\"},\"buyOption()\":{\"notice\":\"Buys the option by transferring premiums to option seller\"},\"commitBorrower()\":{\"notice\":\"Commits the pending borrower\"},\"commitOptionSeller()\":{\"notice\":\"Commits the option seller\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"currentQueuedWithdrawShares()\":{\"notice\":\"Queued withdraw shares for the current round\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositETH()\":{\"notice\":\"Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposits the `asset` from msg.sender without an approve `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initialize((address,address,address,address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextRound and burnRemainingOTokens\"},\"lastBorrowerChange()\":{\"notice\":\"lastBorrowerChange is the last time borrower was set\"},\"lastOptionSellerChange()\":{\"notice\":\"lastOptionSellerChange is the last time option seller was set\"},\"lastQueuedWithdrawAmount()\":{\"notice\":\"Amount locked for scheduled withdrawals last week;\"},\"liquidityGauge()\":{\"notice\":\"LiquidityGauge contract for the vault\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextRound. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"optionSeller()\":{\"notice\":\"optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\"},\"pausePosition()\":{\"notice\":\"pause a user's vault position\"},\"payOptionYield(uint256)\":{\"notice\":\"Pays option yield if option is ITM\"},\"payOptionYield(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Pays option yield if option is ITM `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments\"},\"pendingBorrower()\":{\"notice\":\"pendingBorrower is the pending address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)\"},\"pendingOptionSeller()\":{\"notice\":\"pendingOptionSeller is the pending address of the entity that we will be buying options from (EX: Orbit)\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextRound. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"recoverTokens(address,address)\":{\"notice\":\"Recovery function that returns an ERC20 token to the recipient\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"returnLentFunds(uint256)\":{\"notice\":\"Return lend funds\"},\"returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Return lend funds `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments\"},\"rollToNextRound()\":{\"notice\":\"Rolls the vault's funds into a new short position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setBorrower(address)\":{\"notice\":\"Sets the new borrower\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setLiquidityGauge(address)\":{\"notice\":\"Sets the new liquidityGauge contract for this vault\"},\"setLoanAllocationPCT(uint16)\":{\"notice\":\"Sets new loan allocation percentage\"},\"setLoanTermLength(uint32)\":{\"notice\":\"Sets loan term length\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setOptionPurchaseFrequency(uint32)\":{\"notice\":\"Sets option purchase frequency\"},\"setOptionSeller(address)\":{\"notice\":\"Sets the new option seller\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"setVaultPauser(address)\":{\"notice\":\"Sets the new Vault Pauser contract for this vault\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"stake(uint256)\":{\"notice\":\"Stakes a users vault shares\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts lent out\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultPauser()\":{\"notice\":\"Vault Pauser Contract for the vault\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonEarnVaultStorage. RibbonEarnVault should not inherit from any other contract aside from RibbonVault, RibbonEarnVaultStorage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/EarnVault/RibbonEarnVault.sol\":\"RibbonEarnVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ILiquidityGauge {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\",\"keccak256\":\"0x0865aecb52ae4467761aa81e48957cde1c5486e270b4a671f8ff07861b801105\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IVaultPauser {\\n    /// @notice pause vault position of an account with max amount\\n    /// @param _account the address of user\\n    /// @param _amount amount of shares\\n    function pausePosition(address _account, uint256 _amount) external;\\n\\n    /// @notice resume vault position of an account with max amount\\n    /// @param _vaultAddress the address of vault\\n    function resumePosition(address _vaultAddress) external;\\n}\\n\",\"keccak256\":\"0x8327eccf3e134700dcf180baa109d55e2225fd3fa5bdfe0dcfc232973c7aa185\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return (assetAmount * (10**decimals)) / assetPerShare;\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return (shares * assetPerShare) / (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return uint256(depositReceipt.unredeemedShares) + sharesFromRound;\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? (singleShare * (totalBalance - pendingAmount)) / totalSupply\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4f965ae34cc89615f40341a5b1cc0e494a3d9190ddfe72eb9ef9920c529ce22c\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Yield is scaled by 100 (10 ** 2) for PCT.\\n    uint256 internal constant YIELD_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in vault\\n        address asset;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct AllocationState {\\n        // Next Loan Term Length\\n        uint32 nextLoanTermLength;\\n        // Next Option Purchase Frequency\\n        uint32 nextOptionPurchaseFreq;\\n        // Current Loan Term Length\\n        uint32 currentLoanTermLength;\\n        // Current Option Purchase Frequency\\n        uint32 currentOptionPurchaseFreq;\\n        // Current Loan Allocation Percent\\n        uint16 loanAllocationPCT;\\n        // Current Option Purchase Allocation Percent\\n        uint16 optionAllocationPCT;\\n        // Loan Allocation in USD\\n        uint256 loanAllocation;\\n        // Option Purchase Allocation across all purchases\\n        uint256 optionAllocation;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for the strategy\\n        uint104 lockedAmount;\\n        // Amount that was locked for the strategy in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n        // Last Loan Allocation Date\\n        uint64 lastEpochTime;\\n        // Last Option Purchase Date\\n        uint64 lastOptionPurchaseTime;\\n        // Amount of options bought in current round\\n        uint128 optionsBoughtInRound;\\n        // Amount of funds returned this round\\n        uint256 amtFundsReturned;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n}\\n\",\"keccak256\":\"0x04cb20295cf4f43dd4181751d7c8d207d0638c3b665984bbd0a89d198053e536\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleEarn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\n\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\n\\nlibrary VaultLifecycleEarn {\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    uint256 internal constant totalPCT = 10000; // Equals 100%\\n\\n    /**\\n     * @param decimals is the decimals of the asset\\n     * @param totalBalance is the vaults total balance of the asset\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        // Deduct older queued withdraws so we don't charge fees on them\\n        uint256 balanceForVaultFees =\\n            currentBalance - params.lastQueuedWithdrawAmount;\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycleEarn\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance - totalVaultFee;\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply - lastQueuedWithdrawShares,\\n                currentBalance - params.lastQueuedWithdrawAmount,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            queuedWithdrawAmount =\\n                params.lastQueuedWithdrawAmount +\\n                ShareMath.sharesToAsset(\\n                    params.currentQueuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n        }\\n\\n        return (\\n            currentBalance - queuedWithdrawAmount, // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount ? currentBalance - pendingAmount : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? ((lockedBalanceSansPending - lastLockedAmount) *\\n                    performanceFeePercent) / (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? (lockedBalanceSansPending * managementFeePercent) /\\n                    (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset + _managementFeeInAsset;\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param borrower is the address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)\\n     * @param optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     * @param _allocationState is the struct with vault loan/option allocation data\\n     */\\n    function verifyInitializerParams(\\n        address keeper,\\n        address feeRecipient,\\n        address borrower,\\n        address optionSeller,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams,\\n        Vault.AllocationState calldata _allocationState\\n    ) external pure {\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(borrower != address(0), \\\"!borrower\\\");\\n        require(optionSeller != address(0), \\\"!optionSeller\\\");\\n\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n\\n        require(\\n            _allocationState.nextLoanTermLength == 0,\\n            \\\"!nextLoanTermLength\\\"\\n        );\\n        require(\\n            _allocationState.nextOptionPurchaseFreq == 0,\\n            \\\"!nextOptionPurchaseFreq\\\"\\n        );\\n        require(\\n            _allocationState.currentLoanTermLength >= 1 days,\\n            \\\"!currentLoanTermLength\\\"\\n        );\\n        require(\\n            _allocationState.currentOptionPurchaseFreq > 0 &&\\n                _allocationState.currentOptionPurchaseFreq <=\\n                _allocationState.currentLoanTermLength,\\n            \\\"!currentOptionPurchaseFreq\\\"\\n        );\\n        require(\\n            uint256(_allocationState.loanAllocationPCT) +\\n                _allocationState.optionAllocationPCT ==\\n                totalPCT,\\n            \\\"!totalPCT\\\"\\n        );\\n        require(_allocationState.loanAllocation == 0, \\\"!loanAllocation\\\");\\n        require(_allocationState.optionAllocation == 0, \\\"!optionAllocation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1039c71f22d163e36ffdace8def2ce52853269ca0812df48e3a7f4b6addf8443\",\"license\":\"MIT\"},\"contracts/storage/RibbonEarnVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\nabstract contract RibbonEarnVaultStorageV1 {\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the allocation between lending and buying options\\n    Vault.AllocationState public allocationState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextRound and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice borrower is the address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)\\n    address public borrower;\\n\\n    /// @notice pendingBorrower is the pending address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)\\n    address public pendingBorrower;\\n\\n    /// @notice lastBorrowerChange is the last time borrower was set\\n    uint256 public lastBorrowerChange;\\n\\n    /// @notice optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n    address public optionSeller;\\n\\n    /// @notice pendingOptionSeller is the pending address of the entity that we will be buying options from (EX: Orbit)\\n    address public pendingOptionSeller;\\n\\n    /// @notice lastOptionSellerChange is the last time option seller was set\\n    uint256 public lastOptionSellerChange;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextRound. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextRound. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    /// @notice Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n\\n    /// @notice Queued withdraw shares for the current round\\n    uint256 public currentQueuedWithdrawShares;\\n\\n    /// @notice Vault Pauser Contract for the vault\\n    address public vaultPauser;\\n\\n    /// @notice LiquidityGauge contract for the vault\\n    address public liquidityGauge;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonEarnVaultStorage\\n// e.g. RibbonEarnVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonEarnVaultStorage is RibbonEarnVaultStorageV1, RibbonEarnVaultStorageV2\\nabstract contract RibbonEarnVaultStorage is RibbonEarnVaultStorageV1 {\\n\\n}\\n\",\"keccak256\":\"0x9c9bc5fc38f6c0ede1807f7809f0fb7b1590dd54805f85f6f55ad45b8e031eed\",\"license\":\"MIT\"},\"contracts/vaults/EarnVault/RibbonEarnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Detailed} from \\\"../../interfaces/IERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\n\\nimport {RibbonEarnVaultStorage} from \\\"../../storage/RibbonEarnVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycleEarn} from \\\"../../libraries/VaultLifecycleEarn.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {ILiquidityGauge} from \\\"../../interfaces/ILiquidityGauge.sol\\\";\\nimport {IVaultPauser} from \\\"../../interfaces/IVaultPauser.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonEarnVaultStorage.\\n * RibbonEarnVault should not inherit from any other contract aside from RibbonVault, RibbonEarnVaultStorage\\n */\\ncontract RibbonEarnVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable,\\n    RibbonEarnVaultStorage\\n{\\n    using SafeERC20 for IERC20;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonEarnVaultStorage.\\n    // Read this documentation to learn more:\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    uint16 public constant TOTAL_PCT = 10000; // Equals 100%\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event BorrowerSet(address oldBorrower, address newBorrower);\\n\\n    event OptionSellerSet(address oldOptionSeller, address newOptionSeller);\\n\\n    event NewLoanOptionAllocationSet(\\n        uint256 oldLoanAllocation,\\n        uint256 oldOptionAllocation,\\n        uint256 newLoanAllocation,\\n        uint256 newOptionAllocation\\n    );\\n\\n    event NewLoanTermLength(\\n        uint256 oldLoanTermLength,\\n        uint256 newLoanTermLength\\n    );\\n\\n    event NewOptionPurchaseFrequency(\\n        uint256 oldOptionPurchaseFrequency,\\n        uint256 newOptionPurchaseFrequency\\n    );\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    event OpenLoan(uint256 amount, address indexed borrower);\\n\\n    event CloseLoan(\\n        uint256 amount,\\n        uint256 yield,\\n        uint256 yearlyInterest,\\n        address indexed borrower\\n    );\\n\\n    event PurchaseOption(uint256 premium, address indexed seller);\\n\\n    event PayOptionYield(\\n        uint256 yield,\\n        uint256 netYield,\\n        uint256 pctPayoff,\\n        address indexed seller\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    /************************************************\\n     *  STRUCTS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initialization parameters for the vault.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _borrower is the address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)\\n     * @param _optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     */\\n    struct InitParams {\\n        address _owner;\\n        address _keeper;\\n        address _borrower;\\n        address _optionSeller;\\n        address _feeRecipient;\\n        uint256 _managementFee;\\n        uint256 _performanceFee;\\n        string _tokenName;\\n        string _tokenSymbol;\\n    }\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     */\\n    constructor(address _weth, address _usdc) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     * @param _vaultParams is the struct with vault general data\\n     * @param _allocationState is the struct with vault loan/option allocation data\\n     */\\n    function initialize(\\n        InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams,\\n        Vault.AllocationState calldata _allocationState\\n    ) external initializer {\\n        require(_initParams._owner != address(0), \\\"!owner\\\");\\n\\n        VaultLifecycleEarn.verifyInitializerParams(\\n            _initParams._keeper,\\n            _initParams._feeRecipient,\\n            _initParams._borrower,\\n            _initParams._optionSeller,\\n            _initParams._managementFee,\\n            _initParams._performanceFee,\\n            _initParams._tokenName,\\n            _initParams._tokenSymbol,\\n            _vaultParams,\\n            _allocationState\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_initParams._tokenName, _initParams._tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_initParams._owner);\\n\\n        keeper = _initParams._keeper;\\n\\n        feeRecipient = _initParams._feeRecipient;\\n        borrower = _initParams._borrower;\\n        optionSeller = _initParams._optionSeller;\\n        performanceFee = _initParams._performanceFee;\\n        managementFee =\\n            (_initParams._managementFee * Vault.FEE_MULTIPLIER) /\\n            WEEKS_PER_YEAR;\\n        vaultParams = _vaultParams;\\n        allocationState = _allocationState;\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the borrower.\\n     */\\n    modifier onlyBorrower() {\\n        require(msg.sender == borrower, \\\"!borrower\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the option seller.\\n     */\\n    modifier onlyOptionSeller() {\\n        require(msg.sender == optionSeller, \\\"!optionSeller\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the new borrower\\n     * @param newBorrower is the address of the new borrower\\n     */\\n    function setBorrower(address newBorrower) external onlyOwner {\\n        require(newBorrower != address(0), \\\"!newBorrower\\\");\\n        require(newBorrower != borrower, \\\"Must be new borrower\\\");\\n        emit BorrowerSet(borrower, newBorrower);\\n        pendingBorrower = newBorrower;\\n        lastBorrowerChange = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Sets the new option seller\\n     * @param newOptionSeller is the address of the new option seller\\n     */\\n    function setOptionSeller(address newOptionSeller) external onlyOwner {\\n        require(newOptionSeller != address(0), \\\"!newOptionSeller\\\");\\n        require(newOptionSeller != optionSeller, \\\"Must be new option seller\\\");\\n        emit OptionSellerSet(optionSeller, newOptionSeller);\\n        pendingOptionSeller = newOptionSeller;\\n        lastOptionSellerChange = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Commits the pending borrower\\n     */\\n    function commitBorrower() external onlyOwner {\\n        require(block.timestamp >= (lastBorrowerChange + 3 days), \\\"!timelock\\\");\\n        borrower = pendingBorrower;\\n        pendingBorrower = address(0);\\n    }\\n\\n    /**\\n     * @notice Commits the option seller\\n     */\\n    function commitOptionSeller() external onlyOwner {\\n        require(\\n            block.timestamp >= (lastOptionSellerChange + 3 days),\\n            \\\"!timelock\\\"\\n        );\\n        optionSeller = pendingOptionSeller;\\n        pendingOptionSeller = address(0);\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            (newManagementFee * Vault.FEE_MULTIPLIER) / WEEKS_PER_YEAR;\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /**\\n     * @notice Sets new loan allocation percentage\\n     * @dev Can be called by admin\\n     * @param _loanAllocationPCT new allocation for loan\\n     */\\n    function setLoanAllocationPCT(uint16 _loanAllocationPCT)\\n        external\\n        onlyOwner\\n    {\\n        require(_loanAllocationPCT <= TOTAL_PCT, \\\"!_loanAllocationPCT\\\");\\n        uint16 nextOptionAllocationPCT =\\n            uint16(uint256(TOTAL_PCT) - _loanAllocationPCT);\\n\\n        emit NewLoanOptionAllocationSet(\\n            uint256(allocationState.loanAllocationPCT),\\n            uint256(allocationState.optionAllocationPCT),\\n            uint256(_loanAllocationPCT),\\n            uint256(nextOptionAllocationPCT)\\n        );\\n\\n        allocationState.loanAllocationPCT = _loanAllocationPCT;\\n        allocationState.optionAllocationPCT = nextOptionAllocationPCT;\\n    }\\n\\n    /**\\n     * @notice Sets loan term length\\n     * @dev Can be called by admin\\n     * @param _loanTermLength new loan term length\\n     */\\n    function setLoanTermLength(uint32 _loanTermLength) external onlyOwner {\\n        require(_loanTermLength >= 1 days, \\\"!_loanTermLength\\\");\\n\\n        allocationState.nextLoanTermLength = _loanTermLength;\\n        emit NewLoanTermLength(\\n            allocationState.currentLoanTermLength,\\n            _loanTermLength\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets option purchase frequency\\n     * @dev Can be called by admin\\n     * @param _optionPurchaseFreq new option purchase frequency\\n     */\\n    function setOptionPurchaseFrequency(uint32 _optionPurchaseFreq)\\n        external\\n        onlyOwner\\n    {\\n        require(_optionPurchaseFreq > 0, \\\"!_optionPurchaseFreq\\\");\\n\\n        require(\\n            (allocationState.nextLoanTermLength == 0 &&\\n                _optionPurchaseFreq <= allocationState.currentLoanTermLength) ||\\n                _optionPurchaseFreq <= allocationState.nextLoanTermLength,\\n            \\\"! _optionPurchaseFreq < loanTermLength\\\"\\n        );\\n        allocationState.nextOptionPurchaseFreq = _optionPurchaseFreq;\\n        emit NewOptionPurchaseFrequency(\\n            allocationState.currentOptionPurchaseFreq,\\n            _optionPurchaseFreq\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the new liquidityGauge contract for this vault\\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\\n     */\\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\\n        liquidityGauge = newLiquidityGauge;\\n    }\\n\\n    /**\\n     * @notice Sets the new Vault Pauser contract for this vault\\n     * @param newVaultPauser is the address of the new vaultPauser contract\\n     */\\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\\n        vaultPauser = newVaultPauser;\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(vaultParams.asset == WETH, \\\"!WETH\\\");\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender);\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender without an approve\\n     * `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments\\n     * @param amount is the amount of `asset` to deposit\\n     * @param deadline must be a timestamp in the future\\n     * @param v is a valid signature\\n     * @param r is a valid signature\\n     * @param s is a valid signature\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant {\\n        require(vaultParams.asset == USDC, \\\"!USDC\\\");\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        // Sign for transfer approval\\n        IERC20Permit(vaultParams.asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"!amount\\\");\\n        require(creditor != address(0));\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance() + amount;\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount) + amount;\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending) + amount;\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function _initiateWithdraw(uint256 numShares) internal {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares + numShares;\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares) - withdrawalShares\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n        transferAsset(msg.sender, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares - numShares\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount - amount);\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending) - amount\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        transferAsset(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        _initiateWithdraw(numShares);\\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares + numShares;\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount) - withdrawAmount\\n        );\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Stakes a users vault shares\\n     * @param numShares is the number of shares to stake\\n     */\\n    function stake(uint256 numShares) external nonReentrant {\\n        address _liquidityGauge = liquidityGauge;\\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\\n        require(numShares > 0);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        if (heldByAccount < numShares) {\\n            _redeem(numShares - heldByAccount, false);\\n        }\\n        _transfer(msg.sender, address(this), numShares);\\n        _approve(address(this), _liquidityGauge, numShares);\\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextRound() external onlyKeeper nonReentrant {\\n        vaultState.lastLockedAmount = uint104(vaultState.lockedAmount);\\n\\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\\n\\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\\n            _rollToNextRound(\\n                lastQueuedWithdrawAmount,\\n                currQueuedWithdrawShares\\n            );\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares) + currQueuedWithdrawShares;\\n\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        currentQueuedWithdrawShares = 0;\\n\\n        ShareMath.assertUint104(lockedBalance);\\n\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n        vaultState.optionsBoughtInRound = 0;\\n        vaultState.amtFundsReturned = 0;\\n\\n        uint256 loanAllocation = allocationState.loanAllocation;\\n\\n        // Lend funds to borrower\\n        IERC20(vaultParams.asset).safeTransfer(borrower, loanAllocation);\\n\\n        emit OpenLoan(loanAllocation, borrower);\\n    }\\n\\n    /**\\n     * @notice Buys the option by transferring premiums to option seller\\n     */\\n    function buyOption() external onlyKeeper {\\n        require(\\n            vaultState.optionsBoughtInRound == 0 ||\\n                block.timestamp >=\\n                uint256(vaultState.lastOptionPurchaseTime) +\\n                    allocationState.currentOptionPurchaseFreq,\\n            \\\"Purchase does not fulfill frequency\\\"\\n        );\\n\\n        uint8 optionPurchasesPerLoanTerm =\\n            SafeCast.toUint8(\\n                uint256(allocationState.currentLoanTermLength) /\\n                    allocationState.currentOptionPurchaseFreq\\n            );\\n\\n        uint256 optionAllocation =\\n            allocationState.optionAllocation / optionPurchasesPerLoanTerm;\\n\\n        vaultState.optionsBoughtInRound += uint128(optionAllocation);\\n        vaultState.lastOptionPurchaseTime = uint64(block.timestamp);\\n\\n        IERC20(vaultParams.asset).safeTransfer(optionSeller, optionAllocation);\\n\\n        emit PurchaseOption(optionAllocation, optionSeller);\\n    }\\n\\n    /**\\n     * @notice Pays option yield if option is ITM\\n     * `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments\\n     * @param amount is the amount of yield to pay\\n     * @param deadline must be a timestamp in the future\\n     * @param v is a valid signature\\n     * @param r is a valid signature\\n     * @param s is a valid signature\\n     */\\n    function payOptionYield(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external onlyOptionSeller {\\n        // Sign for transfer approval\\n        IERC20Permit(vaultParams.asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Pay option yields to contract\\n        _payOptionYield(amount);\\n    }\\n\\n    /**\\n     * @notice Pays option yield if option is ITM\\n     * @param amount is the amount of yield to pay\\n     */\\n    function payOptionYield(uint256 amount) external onlyOptionSeller {\\n        // Pay option yields to contract\\n        _payOptionYield(amount);\\n    }\\n\\n    /**\\n     * @notice Return lend funds\\n     * `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments\\n     * @param amount is the amount to return (principal + interest)\\n     * @param deadline must be a timestamp in the future\\n     * @param v is a valid signature\\n     * @param r is a valid signature\\n     * @param s is a valid signature\\n     */\\n    function returnLentFunds(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external onlyBorrower {\\n        // Sign for transfer approval\\n        IERC20Permit(vaultParams.asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Return lent funds\\n        _returnLentFunds(amount);\\n    }\\n\\n    /**\\n     * @notice Return lend funds\\n     * @param amount is the amount to return (principal + interest)\\n     */\\n    function returnLentFunds(uint256 amount) external onlyBorrower {\\n        // Return lent funds\\n        _returnLentFunds(amount);\\n    }\\n\\n    /**\\n     * @notice Recovery function that returns an ERC20 token to the recipient\\n     * @param token is the ERC20 token to recover from the vault\\n     * @param recipient is the recipient of the recovered tokens\\n     */\\n    function recoverTokens(address token, address recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(token != vaultParams.asset, \\\"Vault asset not recoverable\\\");\\n        require(token != address(this), \\\"Vault share not recoverable\\\");\\n        require(recipient != address(this), \\\"Recipient cannot be vault\\\");\\n\\n        IERC20(token).safeTransfer(\\n            recipient,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice pause a user's vault position\\n     */\\n    function pausePosition() external {\\n        address _vaultPauserAddress = vaultPauser;\\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\\n        _redeem(0, true);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\\n        IVaultPauser(_vaultPauserAddress).pausePosition(\\n            msg.sender,\\n            heldByAccount\\n        );\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n        if (asset == WETH) {\\n            IWETH(WETH).withdraw(amount);\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            return;\\n        }\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Helper function that performs most administrative tasks\\n     * such as minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextRound(\\n        uint256 lastQueuedWithdrawAmount,\\n        uint256 currentQueuedWithdrawShares\\n    ) internal returns (uint256 lockedBalance, uint256 queuedWithdrawAmount) {\\n        require(\\n            block.timestamp >=\\n                uint256(vaultState.lastEpochTime) +\\n                    allocationState.currentLoanTermLength,\\n            \\\"!ready\\\"\\n        );\\n\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 performanceFeeInAsset;\\n        uint256 totalVaultFee;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                performanceFeeInAsset,\\n                totalVaultFee\\n            ) = VaultLifecycleEarn.rollover(\\n                vaultState,\\n                VaultLifecycleEarn.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee,\\n                    currentQueuedWithdrawShares\\n                )\\n            );\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n            vaultState.lastEpochTime = uint64(\\n                block.timestamp - (block.timestamp % (24 hours)) + (8 hours)\\n            );\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (totalVaultFee > 0) {\\n            transferAsset(payable(recipient), totalVaultFee);\\n        }\\n\\n        _updateAllocationState(lockedBalance);\\n\\n        return (lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function that transfers funds from option\\n     * seller\\n     * @param amount is the amount of yield to pay\\n     */\\n    function _payOptionYield(uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 optionAllocation = allocationState.optionAllocation;\\n\\n        uint256 yieldInUSD =\\n            amount > optionAllocation ? amount - optionAllocation : 0;\\n        uint256 yieldInPCT =\\n            amount > optionAllocation\\n                ? (amount * Vault.YIELD_MULTIPLIER) / optionAllocation\\n                : 0;\\n\\n        emit PayOptionYield(amount, yieldInUSD, yieldInPCT, msg.sender);\\n    }\\n\\n    function _returnLentFunds(uint256 amount) internal {\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        uint256 loanAllocation = allocationState.loanAllocation;\\n\\n        uint256 yield = amount > loanAllocation ? amount - loanAllocation : 0;\\n\\n        vaultState.amtFundsReturned += amount;\\n\\n        emit CloseLoan(\\n            amount,\\n            yield,\\n            loanAllocation > 0 ? ((yield * 12) * 10**2) / loanAllocation : 0,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice Helper function that updates allocation state\\n     * such as loan term length, option purchase frequency, loan / option\\n     * allocation split, etc.\\n     * @param lockedBalance is the locked balance for newest epoch\\n     */\\n    function _updateAllocationState(uint256 lockedBalance) internal {\\n        Vault.AllocationState memory _allocationState = allocationState;\\n\\n        // Set next loan term length\\n        if (_allocationState.nextLoanTermLength != 0) {\\n            allocationState.currentLoanTermLength = _allocationState\\n                .nextLoanTermLength;\\n            allocationState.nextLoanTermLength = 0;\\n        }\\n\\n        // Set next option purchase frequency\\n        if (_allocationState.nextOptionPurchaseFreq != 0) {\\n            allocationState.currentOptionPurchaseFreq = _allocationState\\n                .nextOptionPurchaseFreq;\\n            allocationState.nextOptionPurchaseFreq = 0;\\n        }\\n\\n        // Set next loan allocation from vault in USD\\n        allocationState.loanAllocation =\\n            (uint256(_allocationState.loanAllocationPCT) * lockedBalance) /\\n            TOTAL_PCT;\\n\\n        // Set next option allocation from vault per purchase in USD\\n        allocationState.optionAllocation =\\n            lockedBalance -\\n            allocationState.loanAllocation;\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount + heldByVault;\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts lent out\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        uint256 lockedForOptionPurchases = allocationState.optionAllocation;\\n\\n        uint256 amtPrincipalReturned =\\n            vaultState.amtFundsReturned > allocationState.loanAllocation\\n                ? allocationState.loanAllocation\\n                : vaultState.amtFundsReturned;\\n\\n        // We subtract the funds allocated towards option purchases as these are \\\"lost funds\\\"\\n        // We subtract the amount of principal returned to avoid double counting in locked amount / USDC balance\\n        return\\n            uint256(vaultState.lockedAmount) +\\n            IERC20(vaultParams.asset).balanceOf(address(this)) -\\n            lockedForOptionPurchases -\\n            amtPrincipalReturned;\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n}\\n\",\"keccak256\":\"0x8088329b3044936944503770d8582122367d4f264d7b5da0dd4c9743591e0e46\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005ead38038062005ead8339810160408190526200003491620000f6565b6001600160a01b038216620000795760405162461bcd60e51b8152602060048201526006602482015265042beeecae8d60d31b60448201526064015b60405180910390fd5b6001600160a01b038116620000ba5760405162461bcd60e51b8152602060048201526006602482015265215f7573646360d01b604482015260640162000070565b6001600160601b0319606092831b8116608052911b1660a0526200012d565b80516001600160a01b0381168114620000f157600080fd5b919050565b6000806040838503121562000109578182fd5b6200011483620000d9565b91506200012460208401620000d9565b90509250929050565b60805160601c60a05160601c615d316200017c60003960008181610b9a0152611786015260008181610d97015281816130620152818161310d015281816138f301526139300152615d316000f3fe6080604052600436106104525760003560e01c80637e108d521161023f578063b341e4c011610139578063e35befb2116100b6578063f65a8fc41161007a578063f65a8fc414610fba578063f756fa2114610fda578063f9a0be6814610fef578063fa8fecc71461100f578063fe56e2321461102f57600080fd5b8063e35befb214610f28578063e74b981b14610f3d578063f2fde38b14610f5d578063f6326fb314610f7d578063f656ba5114610f8557600080fd5b8063cb541138116100fd578063cb54113814610e62578063ce7c2ac214610e82578063d164cc1514610ea2578063db006a7514610ec2578063dd62ed3e14610ee257600080fd5b8063b341e4c014610dce578063b6b55f2514610de4578063c41d287414610e04578063c762d5f714610e2d578063ca59409414610e4d57600080fd5b806399530b06116101c7578063a9059cbb1161018b578063a9059cbb14610d25578063a940450214610d45578063aced166114610d65578063ad5c464814610d85578063ad7a672f14610db957600080fd5b806399530b0614610c2f5780639fcc2d7514610c44578063a457c2d714610ccf578063a694fc3a14610cef578063a6f7f5d614610d0f57600080fd5b806389a302711161020e57806389a3027114610b885780638da5cb5b14610bbc578063947061b514610bda578063953c06f214610bfa57806395d89b4114610c1a57600080fd5b80637e108d5214610b055780638476d52014610b2557806387153eb114610b455780638778878214610b7257600080fd5b80634a970be71161035057806367d6cbc2116102d857806370a082311161029c57806370a0823114610a16578063715018a614610a4c5780637907cafd14610a615780637a9262a214610a815780637df1f1b914610ae557600080fd5b806367d6cbc21461099757806367fbd6ac146109ac5780636f31ab34146109c1578063700f5006146109d657806370897b23146109f657600080fd5b8063557886ab1161031f578063557886ab14610893578063573f0d6e146108b357806361cfa871146108d3578063669c8b42146108f35780636719b2ee1461091357600080fd5b80634a970be7146108325780634b2431d914610852578063503c70aa146108685780635069fb571461087e57600080fd5b80632775d01c116103de5780633bf6b62c116103a25780633bf6b62c1461077c5780633f23bb73146107b45780633f90916a146107d457806346904840146107f257806347786d371461081257600080fd5b80632775d01c146106dc578063313ce567146106fc578063355274ea1461071e57806336efd16f1461073c578063395093511461075c57600080fd5b80631725bc10116104255780631725bc10146104f457806318160ddd146105a45780631bc87270146105c357806323b872dd146105d95780632728f333146105f957600080fd5b8063048bf08514610457578063056097ac1461047957806306fdde0314610499578063095ea7b3146104c4575b600080fd5b34801561046357600080fd5b506104776104723660046152a1565b61104f565b005b34801561048557600080fd5b506104776104943660046152bd565b6110a4565b3480156104a557600080fd5b506104ae611275565b6040516104bb9190615712565b60405180910390f35b3480156104d057600080fd5b506104e46104df366004615335565b611307565b60405190151581526020016104bb565b34801561050057600080fd5b5060d25460d35460d4546105519263ffffffff808216936401000000008304821693600160401b8404831693600160601b81049093169261ffff600160801b8204811693600160901b909204169188565b6040805163ffffffff998a16815297891660208901529588169587019590955295909216606085015261ffff90811660808501521660a083015260c082019290925260e0810191909152610100016104bb565b3480156105b057600080fd5b506099545b6040519081526020016104bb565b3480156105cf57600080fd5b506105b560dc5481565b3480156105e557600080fd5b506104e46105f43660046152f5565b61131e565b34801561060557600080fd5b5060ce5460cf5460d05460d1546106709361ffff8116936001600160681b03620100008304811694600160781b90930416926001600160801b0380831693600160801b9384900482169367ffffffffffffffff80831694600160401b84049091169391909204169089565b6040805161ffff9a909a168a526001600160681b0398891660208b015296909716958801959095526001600160801b039384166060880152918316608087015267ffffffffffffffff90811660a08701521660c08501521660e0830152610100820152610120016104bb565b3480156106e857600080fd5b506104776106f7366004615413565b6113ca565b34801561070857600080fd5b5060cc5460405160ff90911681526020016104bb565b34801561072a57600080fd5b5060cd546001600160681b03166105b5565b34801561074857600080fd5b50610477610757366004615443565b61156e565b34801561076857600080fd5b506104e4610777366004615335565b6115f5565b34801561078857600080fd5b5060da5461079c906001600160a01b031681565b6040516001600160a01b0390911681526020016104bb565b3480156107c057600080fd5b506105b56107cf3660046152a1565b611631565b3480156107e057600080fd5b5060cf546001600160801b03166105b5565b3480156107fe57600080fd5b5060d55461079c906001600160a01b031681565b34801561081e57600080fd5b5061047761082d366004615413565b61167e565b34801561083e57600080fd5b5061047761084d3660046154b0565b611759565b34801561085e57600080fd5b506105b560e05481565b34801561087457600080fd5b506105b560df5481565b34801561088a57600080fd5b506104776118b0565b34801561089f57600080fd5b506104776108ae3660046154f8565b611a68565b3480156108bf57600080fd5b506104776108ce3660046152a1565b611be7565b3480156108df57600080fd5b506104776108ee366004615413565b611c33565b3480156108ff57600080fd5b5061047761090e366004615413565b611c85565b34801561091f57600080fd5b5061096661092e3660046152a1565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b0316908201526060016104bb565b3480156109a357600080fd5b50610477611cd8565b3480156109b857600080fd5b50610477611edf565b3480156109cd57600080fd5b50610477611f7b565b3480156109e257600080fd5b5060d85461079c906001600160a01b031681565b348015610a0257600080fd5b50610477610a11366004615413565b611fb8565b348015610a2257600080fd5b506105b5610a313660046152a1565b6001600160a01b031660009081526097602052604090205490565b348015610a5857600080fd5b5061047761207f565b348015610a6d57600080fd5b50610477610a7c3660046154b0565b6120b5565b348015610a8d57600080fd5b50610ac3610a9c3660046152a1565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b039091166020830152016104bb565b348015610af157600080fd5b5060d75461079c906001600160a01b031681565b348015610b1157600080fd5b50610477610b20366004615413565b612181565b348015610b3157600080fd5b50610477610b403660046152a1565b6121ca565b348015610b5157600080fd5b506105b5610b60366004615413565b60ca6020526000908152604090205481565b348015610b7e57600080fd5b506105b560dd5481565b348015610b9457600080fd5b5061079c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610bc857600080fd5b506065546001600160a01b031661079c565b348015610be657600080fd5b5060e15461079c906001600160a01b031681565b348015610c0657600080fd5b5060db5461079c906001600160a01b031681565b348015610c2657600080fd5b506104ae612308565b348015610c3b57600080fd5b506105b5612317565b348015610c5057600080fd5b5060cc5460cd54610c8c9160ff81169161010082046001600160a01b031691600160a81b900466ffffffffffffff16906001600160681b031684565b6040805160ff90951685526001600160a01b03909316602085015266ffffffffffffff909116918301919091526001600160681b031660608201526080016104bb565b348015610cdb57600080fd5b506104e4610cea366004615335565b61234c565b348015610cfb57600080fd5b50610477610d0a366004615413565b6123e5565b348015610d1b57600080fd5b506105b560de5481565b348015610d3157600080fd5b506104e4610d40366004615335565b6124e2565b348015610d5157600080fd5b50610477610d603660046154b0565b6124ef565b348015610d7157600080fd5b5060d65461079c906001600160a01b031681565b348015610d9157600080fd5b5061079c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610dc557600080fd5b506105b56125b0565b348015610dda57600080fd5b506105b560d95481565b348015610df057600080fd5b50610477610dff366004615413565b61268c565b348015610e1057600080fd5b50610e1a61271081565b60405161ffff90911681526020016104bb565b348015610e3957600080fd5b50610477610e483660046152a1565b6126ff565b348015610e5957600080fd5b50610477612830565b348015610e6e57600080fd5b50610477610e7d366004615380565b6128d2565b348015610e8e57600080fd5b506105b5610e9d3660046152a1565b612cf5565b348015610eae57600080fd5b50610477610ebd3660046152a1565b612d12565b348015610ece57600080fd5b50610477610edd366004615413565b612da1565b348015610eee57600080fd5b506105b5610efd3660046152bd565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610f3457600080fd5b50610477612e0e565b348015610f4957600080fd5b50610477610f583660046152a1565b612eaa565b348015610f6957600080fd5b50610477610f783660046152a1565b612f9d565b610477613035565b348015610f9157600080fd5b50610fa5610fa03660046152a1565b61317a565b604080519283526020830191909152016104bb565b348015610fc657600080fd5b50610477610fd53660046154f8565b613258565b348015610fe657600080fd5b50610477613329565b348015610ffb57600080fd5b5060e25461079c906001600160a01b031681565b34801561101b57600080fd5b5061047761102a3660046153f7565b61337e565b34801561103b57600080fd5b5061047761104a366004615413565b6134a1565b6065546001600160a01b031633146110825760405162461bcd60e51b815260040161107990615793565b60405180910390fd5b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146110ce5760405162461bcd60e51b815260040161107990615793565b60cc546001600160a01b038381166101009092041614156111315760405162461bcd60e51b815260206004820152601b60248201527f5661756c74206173736574206e6f74207265636f76657261626c6500000000006044820152606401611079565b6001600160a01b03821630141561118a5760405162461bcd60e51b815260206004820152601b60248201527f5661756c74207368617265206e6f74207265636f76657261626c6500000000006044820152606401611079565b6001600160a01b0381163014156111e35760405162461bcd60e51b815260206004820152601960248201527f526563697069656e742063616e6e6f74206265207661756c74000000000000006044820152606401611079565b6040516370a0823160e01b81523060048201526112719082906001600160a01b038516906370a082319060240160206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611260919061542b565b6001600160a01b0385169190613583565b5050565b6060609a805461128490615a09565b80601f01602080910402602001604051908101604052809291908181526020018280546112b090615a09565b80156112fd5780601f106112d2576101008083540402835291602001916112fd565b820191906000526020600020905b8154815290600101906020018083116112e057829003601f168201915b5050505050905090565b60006113143384846135eb565b5060015b92915050565b600061132b84848461370f565b6001600160a01b0384166000908152609860209081526040808320338452909152902054828110156113b05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401611079565b6113bd85338584036135eb565b60019150505b9392505050565b600260015414156113ed5760405162461bcd60e51b8152600401611079906157e9565b600260015533600090815260c96020526040902060ce5461ffff16826114255760405162461bcd60e51b8152600401611079906157c8565b815461ffff1681146114695760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b6044820152606401611079565b81546201000090046001600160681b0316838110156114ba5760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b6044820152606401611079565b6114c484826159c6565b83546001600160681b0391909116620100000262010000600160781b031990911617835560cf546114ff9085906001600160801b03166159c6565b60cf80546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a261156433856138dd565b5050600180555050565b600260015414156115915760405162461bcd60e51b8152600401611079906157e9565b6002600155816115b35760405162461bcd60e51b8152600401611079906157c8565b6001600160a01b0381166115c657600080fd5b6115d08282613a3d565b60cc546115ed9061010090046001600160a01b0316333085613ccc565b505060018055565b3360008181526098602090815260408083206001600160a01b0387168452909152812054909161131491859061162c908690615890565b6135eb565b60cc5460009060ff168161166161164760995490565b61164f6125b0565b60cf546001600160801b031685613d04565b905061167661166f85612cf5565b8284613d4b565b949350505050565b6065546001600160a01b031633146116a85760405162461bcd60e51b815260040161107990615793565b600081116116e25760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b6044820152606401611079565b6116eb81613db4565b60cd54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160cd80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6002600154141561177c5760405162461bcd60e51b8152600401611079906157e9565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811661010090920416146117ec5760405162461bcd60e51b8152602060048201526005602482015264215553444360d81b6044820152606401611079565b6000851161180c5760405162461bcd60e51b8152600401611079906157c8565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061184c90339030908a908a908a908a908a906004016156d1565b600060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050506118888533613a3d565b60cc546118a59061010090046001600160a01b0316333088613ccc565b505060018055505050565b60d6546001600160a01b031633146118f45760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401611079565b600260015414156119175760405162461bcd60e51b8152600401611079906157e9565b600260015560ce8054600160781b6001600160681b0362010000830416026cffffffffffffffffffffffffff60781b1990911617905560e05460df5460009081906119629084613dfe565b60df81905560cf54919350915060009061198d908590600160801b90046001600160801b0316615890565b90506119988161412d565b60cf80546001600160801b03808416600160801b029116179055600060e0556119c083613db4565b60ce805462010000600160781b031916620100006001600160681b0386160217905560d080546001600160801b03169055600060d15560d35460d75460cc54611a1b916001600160a01b036101009092048216911683613583565b60d7546040518281526001600160a01b03909116907f88af4e011812ac0591fac38c5d6532fd401d8fa1fdf20e82b019e78405f42b719060200160405180910390a2505060018055505050565b6065546001600160a01b03163314611a925760405162461bcd60e51b815260040161107990615793565b60008163ffffffff1611611adf5760405162461bcd60e51b8152602060048201526014602482015273215f6f7074696f6e50757263686173654672657160601b6044820152606401611079565b60d25463ffffffff16158015611b08575060d25463ffffffff600160401b909104811690821611155b80611b1f575060d25463ffffffff90811690821611155b611b7a5760405162461bcd60e51b815260206004820152602660248201527f21205f6f7074696f6e507572636861736546726571203c206c6f616e5465726d604482015265098cadccee8d60d31b6064820152608401611079565b60d2805467ffffffff00000000191664010000000063ffffffff848116918202929092179283905560408051600160601b909404909216835260208301527ff0d4e95ace3c30a9f74264435d024aee7c24e0a24d5f2dc0b2f097778d19944391015b60405180910390a150565b6065546001600160a01b03163314611c115760405162461bcd60e51b815260040161107990615793565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b60d7546001600160a01b03163314611c795760405162461bcd60e51b815260206004820152600960248201526810b137b93937bbb2b960b91b6044820152606401611079565b611c8281614177565b50565b60da546001600160a01b03163314611ccf5760405162461bcd60e51b815260206004820152600d60248201526c10b7b83a34b7b729b2b63632b960991b6044820152606401611079565b611c8281614242565b60d6546001600160a01b03163314611d1c5760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401611079565b60d054600160801b90046001600160801b03161580611d68575060d25460d054611d6491600160601b900463ffffffff1690600160401b900467ffffffffffffffff16615890565b4210155b611dc05760405162461bcd60e51b815260206004820152602360248201527f507572636861736520646f6573206e6f742066756c66696c6c206672657175656044820152626e637960e81b6064820152608401611079565b60d254600090611def90611dea9063ffffffff600160601b8204811691600160401b9004166158a8565b6142f1565b905060008160ff1660d260020154611e0791906158a8565b60d080549192508291601090611e2e908490600160801b90046001600160801b0316615865565b825461010092830a6001600160801b038181021990921692909116021790915560d080546fffffffffffffffff00000000000000001916600160401b4267ffffffffffffffff160217905560da5460cc54611e9993506001600160a01b039290048216911683613583565b60da546040518281526001600160a01b03909116907f4c40d030ff61ad9fddd7e91383af2b30e967a5d96e128382a8b24130d6dee72e9060200160405180910390a25050565b6065546001600160a01b03163314611f095760405162461bcd60e51b815260040161107990615793565b60dc54611f19906203f480615890565b421015611f545760405162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b6044820152606401611079565b60db805460da80546001600160a01b03199081166001600160a01b03841617909155169055565b60026001541415611f9e5760405162461bcd60e51b8152600401611079906157e9565b6002600181905550611fb260006001614356565b60018055565b6065546001600160a01b03163314611fe25760405162461bcd60e51b815260040161107990615793565b611ff0620f424060646159a7565b811061203e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e6365206665650000000000000000006044820152606401611079565b60dd5460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160dd55565b6065546001600160a01b031633146120a95760405162461bcd60e51b815260040161107990615793565b6120b360006144f9565b565b60da546001600160a01b031633146120ff5760405162461bcd60e51b815260206004820152600d60248201526c10b7b83a34b7b729b2b63632b960991b6044820152606401611079565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061213f90339030908a908a908a908a908a906004016156d1565b600060405180830381600087803b15801561215957600080fd5b505af115801561216d573d6000803e3d6000fd5b5050505061217a85614242565b5050505050565b600260015414156121a45760405162461bcd60e51b8152600401611079906157e9565b60026001556121b28161454b565b8060e0546121c09190615890565b60e0555060018055565b6065546001600160a01b031633146121f45760405162461bcd60e51b815260040161107990615793565b6001600160a01b03811661223d5760405162461bcd60e51b815260206004820152601060248201526f10b732bba7b83a34b7b729b2b63632b960811b6044820152606401611079565b60da546001600160a01b038281169116141561229b5760405162461bcd60e51b815260206004820152601960248201527f4d757374206265206e6577206f7074696f6e2073656c6c6572000000000000006044820152606401611079565b60da54604080516001600160a01b03928316815291831660208301527f99e10f8286c53ce42e5bb9937b70f356c0733bf7f652059231239a1b9f12ef96910160405180910390a160db80546001600160a01b0319166001600160a01b03929092169190911790554260dc55565b6060609b805461128490615a09565b600061234761232560995490565b61232d6125b0565b60cf5460cc546001600160801b039091169060ff16613d04565b905090565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156123ce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611079565b6123db33858584036135eb565b5060019392505050565b600260015414156124085760405162461bcd60e51b8152600401611079906157e9565b600260015560e2546001600160a01b03168061242357600080fd5b6000821161243057600080fd5b336000908152609760205260409020548281101561245c5761245c61245582856159c6565b6000614356565b61246733308561370f565b6124723083856135eb565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b5050600180555050505050565b600061131433848461370f565b60d7546001600160a01b031633146125355760405162461bcd60e51b815260206004820152600960248201526810b137b93937bbb2b960b91b6044820152606401611079565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061257590339030908a908a908a908a908a906004016156d1565b600060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b5050505061217a85614177565b60d45460d35460d154600092918391116125cc5760d1546125d0565b60d3545b60cc546040516370a0823160e01b81523060048201529192508291849161010090046001600160a01b0316906370a082319060240160206040518083038186803b15801561261d57600080fd5b505afa158015612631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612655919061542b565b60ce5461267191906201000090046001600160681b0316615890565b61267b91906159c6565b61268591906159c6565b9250505090565b600260015414156126af5760405162461bcd60e51b8152600401611079906157e9565b6002600155806126d15760405162461bcd60e51b8152600401611079906157c8565b6126db8133613a3d565b60cc546126f89061010090046001600160a01b0316333084613ccc565b5060018055565b6065546001600160a01b031633146127295760405162461bcd60e51b815260040161107990615793565b6001600160a01b03811661276e5760405162461bcd60e51b815260206004820152600c60248201526b10b732bba137b93937bbb2b960a11b6044820152606401611079565b60d7546001600160a01b03828116911614156127c35760405162461bcd60e51b815260206004820152601460248201527326bab9ba103132903732bb903137b93937bbb2b960611b6044820152606401611079565b60d754604080516001600160a01b03928316815291831660208301527fa8ff19f79b98ff5728928ff9d44353bf0fc03185db41da6e5c0c1f5ff3888855910160405180910390a160d880546001600160a01b0319166001600160a01b03929092169190911790554260d955565b60e1546001600160a01b03168061284657600080fd5b61285260006001614356565b336000818152609760205260409020549061286e9083836135eb565b60405163c9c2d4f560e01b8152336004820152602481018290526001600160a01b0383169063c9c2d4f590604401600060405180830381600087803b1580156128b657600080fd5b505af11580156128ca573d6000803e3d6000fd5b505050505050565b600054610100900460ff16806128eb575060005460ff16155b6129075760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015612929576000805461ffff19166101011790555b600061293860208601866152a1565b6001600160a01b031614156129785760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401611079565b73E01e815D26e852eEFCDcae6d72C5bB2Df83A96f66387885a076129a260408701602088016152a1565b6129b260a08801608089016152a1565b6129c26060890160408a016152a1565b6129d260808a0160608b016152a1565b60a08a013560c08b01356129e960e08d018d615820565b6129f76101008f018f615820565b8e8e6040518d63ffffffff1660e01b8152600401612a209c9b9a999897969594939291906155f0565b60006040518083038186803b158015612a3857600080fd5b505af4158015612a4c573d6000803e3d6000fd5b50505050612a58614712565b612ae5612a6860e0860186615820565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aab92505050610100870187615820565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061478592505050565b612aed614804565b612afd610f7860208601866152a1565b612b0d60408501602086016152a1565b60d680546001600160a01b0319166001600160a01b0392909216919091179055612b3d60a08501608086016152a1565b60d580546001600160a01b0319166001600160a01b0392909216919091179055612b6d60608501604086016152a1565b60d780546001600160a01b0319166001600160a01b0392909216919091179055612b9d60808501606086016152a1565b60da80546001600160a01b0319166001600160a01b039290921691909117905560c084013560dd5563031ba309612bdb620f424060a08701356159a7565b612be591906158a8565b60de558260cc612bf58282615bd2565b5082905060d2612c058282615a9e565b505060cc546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a082319060240160206040518083038186803b158015612c5057600080fd5b505afa158015612c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c88919061542b565b9050612c9381613db4565b60ce805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015612cef576000805461ff00191690555b50505050565b6000806000612d038461317a565b90925090506116768183615890565b6065546001600160a01b03163314612d3c5760405162461bcd60e51b815260040161107990615793565b6001600160a01b038116612d7f5760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401611079565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612dc45760405162461bcd60e51b8152600401611079906157e9565b600260015580612e035760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611079565b6126f8816000614356565b6065546001600160a01b03163314612e385760405162461bcd60e51b815260040161107990615793565b60d954612e48906203f480615890565b421015612e835760405162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b6044820152606401611079565b60d8805460d780546001600160a01b03199081166001600160a01b03841617909155169055565b6065546001600160a01b03163314612ed45760405162461bcd60e51b815260040161107990615793565b6001600160a01b038116612f1d5760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b6044820152606401611079565b60d5546001600160a01b0382811691161415612f7b5760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e7400000000000000006044820152606401611079565b60d580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314612fc75760405162461bcd60e51b815260040161107990615793565b6001600160a01b03811661302c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611079565b611c82816144f9565b600260015414156130585760405162461bcd60e51b8152600401611079906157e9565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811661010090920416146130c85760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b6044820152606401611079565b600034116131015760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401611079565b61310b3433613a3d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561316657600080fd5b505af11580156118a5573d6000803e3d6000fd5b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291600111156131fc575050506001600160a01b031660009081526097602052604081205491565b60ce54815161ffff908116600090815260ca602052604081205460cc54919361322d9386939116919060ff1661486b565b905061324e856001600160a01b031660009081526097602052604090205490565b9590945092505050565b6065546001600160a01b031633146132825760405162461bcd60e51b815260040161107990615793565b620151808163ffffffff1610156132ce5760405162461bcd60e51b815260206004820152601060248201526f042bed8dec2dca8cae4da98cadccee8d60831b6044820152606401611079565b60d2805463ffffffff191663ffffffff8381169182179283905560408051600160401b909404909116835260208301919091527fd323e49efbd1e497c4f485723f1434c9b8294a325ad121e48fdb4c1cfacea7359101611bdc565b6002600154141561334c5760405162461bcd60e51b8152600401611079906157e9565b6002600155600061335b6148dc565b90508060df5461336b91906159c6565b6001600160801b031660df555060018055565b6065546001600160a01b031633146133a85760405162461bcd60e51b815260040161107990615793565b61271061ffff821611156133f45760405162461bcd60e51b81526020600482015260136024820152720857db1bd85b905b1b1bd8d85d1a5bdb9410d5606a1b6044820152606401611079565b600061340661ffff83166127106159c6565b60d25460408051600160801b830461ffff9081168252600160901b90930483166020820152858316818301529183166060830152519192507f18b482963ff6c4f5c5ba3108cb641c89fabceb5de48c28205412cfb69a318dca919081900360800190a160d2805463ffffffff60801b1916600160801b61ffff9485160261ffff60901b191617600160901b9290931691909102919091179055565b6065546001600160a01b031633146134cb5760405162461bcd60e51b815260040161107990615793565b6134d9620f424060646159a7565b81106135205760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401611079565b600063031ba309613534620f4240846159a7565b61353e91906158a8565b60de5460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160de5550565b6040516001600160a01b0383166024820152604481018290526135e690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a94565b505050565b6001600160a01b03831661364d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611079565b6001600160a01b0382166136ae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611079565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166137735760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611079565b6001600160a01b0382166137d55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611079565b6001600160a01b0383166000908152609760205260409020548181101561384d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611079565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613884908490615890565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516138d091815260200190565b60405180910390a3612cef565b60cc546001600160a01b036101009091048116907f000000000000000000000000000000000000000000000000000000000000000016811415613a2957604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561397c57600080fd5b505af1158015613990573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146139e1576040519150601f19603f3d011682016040523d82523d6000602084013e6139e6565b606091505b5050905080612cef5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401611079565b6135e66001600160a01b0382168484613583565b60ce5461ffff16600083613a4f6125b0565b613a599190615890565b60cd549091506001600160681b0316811115613aa45760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401611079565b60cc54600160a81b900466ffffffffffffff16811015613afd5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401611079565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc54919291613bb791849187919060ff1661486b565b8251909150869061ffff16851415613be85760008784602001516001600160681b0316613be49190615890565b9150505b613bf181613db4565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560cf54613c98918a9116615890565b9050613ca38161412d565b60cf80546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612cef9085906323b872dd60e01b906084016135af565b600080613d1283600a6158ff565b905060008611613d225780613d41565b85613d2d85876159c6565b613d3790836159a7565b613d4191906158a8565b9695505050505050565b600060018311613d955760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611079565b613da082600a6158ff565b613daa84866159a7565b61167691906158a8565b6001600160681b03811115611c825760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401611079565b60d25460d0546000918291613e2a91600160401b900463ffffffff169067ffffffffffffffff16615890565b421015613e625760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401611079565b60d5546040805160e08101825260cc5460ff8116825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373E01e815D26e852eEFCDcae6d72C5bB2Df83A96f693632b8b58cf9360ce9390926020840192610100900416906370a082319060240160206040518083038186803b158015613eed57600080fd5b505afa158015613f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f25919061542b565b8152602001613f3360995490565b81526020018d815260200160dd54815260200160de5481526020018c8152506040518363ffffffff1660e01b8152600401613fc092919060006101008201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b60c06040518083038186803b158015613fd857600080fd5b505af4158015613fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140109190615467565b60ce5461ffff16600081815260ca60209081526040918290208790558151858152908101849052908101829052969d50949b50919850965094509250906001600160a01b038716907f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c0069060600160405180910390a260cf80546001600160801b03191690556140a0816001615890565b60ce805461ffff191661ffff929092169190911790556140c36201518042615a44565b6140cd90426159c6565b6140d990617080615890565b60d0805467ffffffffffffffff191667ffffffffffffffff929092169190911790555061410890503084614b66565b80156141185761411884826138dd565b61412186614c45565b505050505b9250929050565b6001600160801b03811115611c825760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401611079565b60cc546141949061010090046001600160a01b0316333084613ccc565b60d35460008183116141a75760006141b1565b6141b182846159c6565b90508260ce60030160008282546141c89190615890565b909155503390507f29140ea6a2cacc49ac04ac38fbc98f54871b1754490efa4911d68b90c9007aa78483856141fe57600061421f565b8561420a86600c6159a7565b6142159060646159a7565b61421f91906158a8565b6040805193845260208401929092529082015260600160405180910390a2505050565b60cc5461010090046001600160a01b031661425f81333085613ccc565b60d454600081841161427257600061427c565b61427c82856159c6565b9050600082851161428e5760006142a4565b8261429a6064876159a7565b6142a491906158a8565b604080518781526020810185905290810182905290915033907fa5f450d256a08c3d1bd5fa024f1b3a241ef831e8533c9c96134a2fbb4e76a5ee9060600160405180910390a25050505050565b600060ff8211156143525760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401611079565b5090565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260ce5491865260ca9094529184205460cc54919492909316926143cc918591859160ff1661486b565b9050836143d957846143db565b805b9450846143e9575050505050565b8085111561442d5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401611079565b825161ffff1682111561445a5733600090815260c960205260409020805462010000600160781b03191690555b6144638561412d565b61446d85826159c6565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916144e69189825261ffff16602082015260400190565b60405180910390a261217a30338761370f565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081116145885760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611079565b33600090815260c960205260409020546201000090046001600160681b03161515806145d2575033600090815260c96020526040902054600160781b90046001600160801b031615155b156145e3576145e360006001614356565b60ce5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b03166000821561466c576146658683615890565b90506146cf565b81156146ae5760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b6044820152606401611079565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b6146d88161412d565b33600081815260cb60205260409020805462010000600160901b031916620100006001600160801b038516021790556128ca90308861370f565b600054610100900460ff168061472b575060005460ff16155b6147475760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614769576000805461ffff19166101011790555b614771614d7a565b8015611c82576000805461ff001916905550565b600054610100900460ff168061479e575060005460ff16155b6147ba5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff161580156147dc576000805461ffff19166101011790555b6147e4614de9565b6147ee8383614e53565b80156135e6576000805461ff0019169055505050565b600054610100900460ff168061481d575060005460ff16155b6148395760405162461bcd60e51b815260040161107990615745565b600054610100900460ff1615801561485b576000805461ffff19166101011790555b614863614de9565b614771614ee8565b835160009061ffff16158015906148865750845161ffff1684115b156148c85760006148a586602001516001600160681b03168585614f48565b90508086604001516001600160801b03166148c09190615890565b915050611676565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff168161493e5760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401611079565b60ce5461ffff1681106149865760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401611079565b33600090815260cb60205260409020805462010000600160901b031916905560cf546149c3908390600160801b90046001600160801b03166159c6565b60cf80546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc54614a0091859160ff16613d4b565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2614a483084614fa8565b60008111614a8a5760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401611079565b61167633826138dd565b6000614ae9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150f69092919063ffffffff16565b8051909150156135e65780806020019051810190614b079190615360565b6135e65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611079565b6001600160a01b038216614bbc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611079565b8060996000828254614bce9190615890565b90915550506001600160a01b03821660009081526097602052604081208054839290614bfb908490615890565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b604080516101008101825260d25463ffffffff808216808452640100000000830482166020850152600160401b8304821694840194909452600160601b820416606083015261ffff600160801b820481166080840152600160901b9091041660a082015260d35460c082015260d45460e08201529015614cf357805160d280546bffffffff00000000ffffffff1916600160401b63ffffffff9093169290920263ffffffff19169190911790555b602081015163ffffffff1615614d4257602081015160d280546fffffffff00000000ffffffff000000001916600160601b63ffffffff9093169290920267ffffffff0000000019169190911790555b608081015161271090614d5a90849061ffff166159a7565b614d6491906158a8565b60d3819055614d7390836159c6565b60d4555050565b600054610100900460ff1680614d93575060005460ff16155b614daf5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614dd1576000805461ffff19166101011790555b600180558015611c82576000805461ff001916905550565b600054610100900460ff1680614e02575060005460ff16155b614e1e5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614771576000805461ffff19166101011790558015611c82576000805461ff001916905550565b600054610100900460ff1680614e6c575060005460ff16155b614e885760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614eaa576000805461ffff19166101011790555b8251614ebd90609a906020860190615201565b508151614ed190609b906020850190615201565b5080156135e6576000805461ff0019169055505050565b600054610100900460ff1680614f01575060005460ff16155b614f1d5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614f3f576000805461ffff19166101011790555b614771336144f9565b600060018311614f925760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611079565b82614f9e83600a6158ff565b613daa90866159a7565b6001600160a01b0382166150085760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611079565b6001600160a01b0382166000908152609760205260409020548181101561507c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611079565b6001600160a01b03831660009081526097602052604081208383039055609980548492906150ab9084906159c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6060611676848460008585843b61514f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611079565b600080866001600160a01b0316858760405161516b91906155d4565b60006040518083038185875af1925050503d80600081146151a8576040519150601f19603f3d011682016040523d82523d6000602084013e6151ad565b606091505b50915091506151bd8282866151c8565b979650505050505050565b606083156151d75750816113c3565b8251156151e75782518084602001fd5b8160405162461bcd60e51b81526004016110799190615712565b82805461520d90615a09565b90600052602060002090601f01602090048101928261522f5760008555615275565b82601f1061524857805160ff1916838001178555615275565b82800160010185558215615275579182015b8281111561527557825182559160200191906001019061525a565b506143529291505b80821115614352576000815560010161527d565b803561529c81615cb5565b919050565b6000602082840312156152b2578081fd5b81356113c381615c8b565b600080604083850312156152cf578081fd5b82356152da81615c8b565b915060208301356152ea81615c8b565b809150509250929050565b600080600060608486031215615309578081fd5b833561531481615c8b565b9250602084013561532481615c8b565b929592945050506040919091013590565b60008060408385031215615347578182fd5b823561535281615c8b565b946020939093013593505050565b600060208284031215615371578081fd5b815180151581146113c3578182fd5b60008060008385036101a0811215615396578384fd5b843567ffffffffffffffff8111156153ac578485fd5b850161012081880312156153be578485fd5b93506080601f19820112156153d1578283fd5b602085019250610100609f19820112156153e9578182fd5b5060a0840190509250925092565b600060208284031215615408578081fd5b81356113c381615cb5565b600060208284031215615424578081fd5b5035919050565b60006020828403121561543c578081fd5b5051919050565b60008060408385031215615455578182fd5b8235915060208301356152ea81615c8b565b60008060008060008060c0878903121561547f578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600080600060a086880312156154c7578283fd5b853594506020860135935060408601356154e081615cec565b94979396509394606081013594506080013592915050565b600060208284031215615509578081fd5b81356113c381615cc5565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b803561554881615cc5565b63ffffffff908116835260208201359061556182615cc5565b908116602084015260408201359061557882615cc5565b908116604084015260608201359061558f82615cc5565b1660608301526155a160808201615291565b61ffff1660808301526155b660a08201615291565b61ffff1660a083015260c0818101359083015260e090810135910152565b600082516155e68184602087016159dd565b9190910192915050565b600060018060a01b03808f168352808e166020840152808d166040840152808c1660608401528a60808401528960a084015261028060c08401526156396102808401898b615514565b83810360e085015261564c81888a615514565b925050843561565a81615cec565b60ff16610100840152602085013561567181615c8b565b16610120830152604084013561568681615cd7565b66ffffffffffffff1661014083015260608401356156a381615ca0565b6001600160681b03166101608301526156c061018083018461553d565b9d9c50505050505050505050505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208152600082518060208401526157318160408501602087016159dd565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112615836578283fd5b83018035915067ffffffffffffffff821115615850578283fd5b60200191503681900382131561412657600080fd5b60006001600160801b0380831681851680830382111561588757615887615a58565b01949350505050565b600082198211156158a3576158a3615a58565b500190565b6000826158b7576158b7615a6e565b500490565b600181815b808511156158f75781600019048211156158dd576158dd615a58565b808516156158ea57918102915b93841c93908002906158c1565b509250929050565b60006113c3838360008261591557506001611318565b8161592257506000611318565b816001811461593857600281146159425761595e565b6001915050611318565b60ff84111561595357615953615a58565b50506001821b611318565b5060208310610133831016604e8410600b8410161715615981575081810a611318565b61598b83836158bc565b806000190482111561599f5761599f615a58565b029392505050565b60008160001904831182151516156159c1576159c1615a58565b500290565b6000828210156159d8576159d8615a58565b500390565b60005b838110156159f85781810151838201526020016159e0565b83811115612cef5750506000910152565b600181811c90821680615a1d57607f821691505b60208210811415615a3e57634e487b7160e01b600052602260045260246000fd5b50919050565b600082615a5357615a53615a6e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000813561131881615cb5565b6000813561131881615cc5565b8135615aa981615cc5565b63ffffffff8116905081548163ffffffff1982161783556020840135615ace81615cc5565b67ffffffff000000008160201b168367ffffffffffffffff19841617178455505050615b29615aff60408401615a91565b82546bffffffff0000000000000000191660409190911b6bffffffff000000000000000016178255565b615b5c615b3860608401615a91565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b615b8b615b6b60808401615a84565b82805461ffff60801b191660809290921b61ffff60801b16919091179055565b615bba615b9a60a08401615a84565b82805461ffff60901b191660909290921b61ffff60901b16919091179055565b60c0820135600182015560e082013560028201555050565b8135615bdd81615cec565b60ff8116905081548160ff1982161783556020840135615bfc81615c8b565b610100600160a81b0360089190911b166001600160a81b031982168317811784556040850135615c2b81615cd7565b6001600160e01b0319929092169092179190911760a89190911b66ffffffffffffff60a81b16178155600181016060830135615c6681615ca0565b81546cffffffffffffffffffffffffff19166001600160681b03919091161790555050565b6001600160a01b0381168114611c8257600080fd5b6001600160681b0381168114611c8257600080fd5b61ffff81168114611c8257600080fd5b63ffffffff81168114611c8257600080fd5b66ffffffffffffff81168114611c8257600080fd5b60ff81168114611c8257600080fdfea2646970667358221220679956765d9de2a2c312f902c1fe1e3ec2852dff2c3112549cc47fc82d124b3164736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106104525760003560e01c80637e108d521161023f578063b341e4c011610139578063e35befb2116100b6578063f65a8fc41161007a578063f65a8fc414610fba578063f756fa2114610fda578063f9a0be6814610fef578063fa8fecc71461100f578063fe56e2321461102f57600080fd5b8063e35befb214610f28578063e74b981b14610f3d578063f2fde38b14610f5d578063f6326fb314610f7d578063f656ba5114610f8557600080fd5b8063cb541138116100fd578063cb54113814610e62578063ce7c2ac214610e82578063d164cc1514610ea2578063db006a7514610ec2578063dd62ed3e14610ee257600080fd5b8063b341e4c014610dce578063b6b55f2514610de4578063c41d287414610e04578063c762d5f714610e2d578063ca59409414610e4d57600080fd5b806399530b06116101c7578063a9059cbb1161018b578063a9059cbb14610d25578063a940450214610d45578063aced166114610d65578063ad5c464814610d85578063ad7a672f14610db957600080fd5b806399530b0614610c2f5780639fcc2d7514610c44578063a457c2d714610ccf578063a694fc3a14610cef578063a6f7f5d614610d0f57600080fd5b806389a302711161020e57806389a3027114610b885780638da5cb5b14610bbc578063947061b514610bda578063953c06f214610bfa57806395d89b4114610c1a57600080fd5b80637e108d5214610b055780638476d52014610b2557806387153eb114610b455780638778878214610b7257600080fd5b80634a970be71161035057806367d6cbc2116102d857806370a082311161029c57806370a0823114610a16578063715018a614610a4c5780637907cafd14610a615780637a9262a214610a815780637df1f1b914610ae557600080fd5b806367d6cbc21461099757806367fbd6ac146109ac5780636f31ab34146109c1578063700f5006146109d657806370897b23146109f657600080fd5b8063557886ab1161031f578063557886ab14610893578063573f0d6e146108b357806361cfa871146108d3578063669c8b42146108f35780636719b2ee1461091357600080fd5b80634a970be7146108325780634b2431d914610852578063503c70aa146108685780635069fb571461087e57600080fd5b80632775d01c116103de5780633bf6b62c116103a25780633bf6b62c1461077c5780633f23bb73146107b45780633f90916a146107d457806346904840146107f257806347786d371461081257600080fd5b80632775d01c146106dc578063313ce567146106fc578063355274ea1461071e57806336efd16f1461073c578063395093511461075c57600080fd5b80631725bc10116104255780631725bc10146104f457806318160ddd146105a45780631bc87270146105c357806323b872dd146105d95780632728f333146105f957600080fd5b8063048bf08514610457578063056097ac1461047957806306fdde0314610499578063095ea7b3146104c4575b600080fd5b34801561046357600080fd5b506104776104723660046152a1565b61104f565b005b34801561048557600080fd5b506104776104943660046152bd565b6110a4565b3480156104a557600080fd5b506104ae611275565b6040516104bb9190615712565b60405180910390f35b3480156104d057600080fd5b506104e46104df366004615335565b611307565b60405190151581526020016104bb565b34801561050057600080fd5b5060d25460d35460d4546105519263ffffffff808216936401000000008304821693600160401b8404831693600160601b81049093169261ffff600160801b8204811693600160901b909204169188565b6040805163ffffffff998a16815297891660208901529588169587019590955295909216606085015261ffff90811660808501521660a083015260c082019290925260e0810191909152610100016104bb565b3480156105b057600080fd5b506099545b6040519081526020016104bb565b3480156105cf57600080fd5b506105b560dc5481565b3480156105e557600080fd5b506104e46105f43660046152f5565b61131e565b34801561060557600080fd5b5060ce5460cf5460d05460d1546106709361ffff8116936001600160681b03620100008304811694600160781b90930416926001600160801b0380831693600160801b9384900482169367ffffffffffffffff80831694600160401b84049091169391909204169089565b6040805161ffff9a909a168a526001600160681b0398891660208b015296909716958801959095526001600160801b039384166060880152918316608087015267ffffffffffffffff90811660a08701521660c08501521660e0830152610100820152610120016104bb565b3480156106e857600080fd5b506104776106f7366004615413565b6113ca565b34801561070857600080fd5b5060cc5460405160ff90911681526020016104bb565b34801561072a57600080fd5b5060cd546001600160681b03166105b5565b34801561074857600080fd5b50610477610757366004615443565b61156e565b34801561076857600080fd5b506104e4610777366004615335565b6115f5565b34801561078857600080fd5b5060da5461079c906001600160a01b031681565b6040516001600160a01b0390911681526020016104bb565b3480156107c057600080fd5b506105b56107cf3660046152a1565b611631565b3480156107e057600080fd5b5060cf546001600160801b03166105b5565b3480156107fe57600080fd5b5060d55461079c906001600160a01b031681565b34801561081e57600080fd5b5061047761082d366004615413565b61167e565b34801561083e57600080fd5b5061047761084d3660046154b0565b611759565b34801561085e57600080fd5b506105b560e05481565b34801561087457600080fd5b506105b560df5481565b34801561088a57600080fd5b506104776118b0565b34801561089f57600080fd5b506104776108ae3660046154f8565b611a68565b3480156108bf57600080fd5b506104776108ce3660046152a1565b611be7565b3480156108df57600080fd5b506104776108ee366004615413565b611c33565b3480156108ff57600080fd5b5061047761090e366004615413565b611c85565b34801561091f57600080fd5b5061096661092e3660046152a1565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b0316908201526060016104bb565b3480156109a357600080fd5b50610477611cd8565b3480156109b857600080fd5b50610477611edf565b3480156109cd57600080fd5b50610477611f7b565b3480156109e257600080fd5b5060d85461079c906001600160a01b031681565b348015610a0257600080fd5b50610477610a11366004615413565b611fb8565b348015610a2257600080fd5b506105b5610a313660046152a1565b6001600160a01b031660009081526097602052604090205490565b348015610a5857600080fd5b5061047761207f565b348015610a6d57600080fd5b50610477610a7c3660046154b0565b6120b5565b348015610a8d57600080fd5b50610ac3610a9c3660046152a1565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b039091166020830152016104bb565b348015610af157600080fd5b5060d75461079c906001600160a01b031681565b348015610b1157600080fd5b50610477610b20366004615413565b612181565b348015610b3157600080fd5b50610477610b403660046152a1565b6121ca565b348015610b5157600080fd5b506105b5610b60366004615413565b60ca6020526000908152604090205481565b348015610b7e57600080fd5b506105b560dd5481565b348015610b9457600080fd5b5061079c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610bc857600080fd5b506065546001600160a01b031661079c565b348015610be657600080fd5b5060e15461079c906001600160a01b031681565b348015610c0657600080fd5b5060db5461079c906001600160a01b031681565b348015610c2657600080fd5b506104ae612308565b348015610c3b57600080fd5b506105b5612317565b348015610c5057600080fd5b5060cc5460cd54610c8c9160ff81169161010082046001600160a01b031691600160a81b900466ffffffffffffff16906001600160681b031684565b6040805160ff90951685526001600160a01b03909316602085015266ffffffffffffff909116918301919091526001600160681b031660608201526080016104bb565b348015610cdb57600080fd5b506104e4610cea366004615335565b61234c565b348015610cfb57600080fd5b50610477610d0a366004615413565b6123e5565b348015610d1b57600080fd5b506105b560de5481565b348015610d3157600080fd5b506104e4610d40366004615335565b6124e2565b348015610d5157600080fd5b50610477610d603660046154b0565b6124ef565b348015610d7157600080fd5b5060d65461079c906001600160a01b031681565b348015610d9157600080fd5b5061079c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610dc557600080fd5b506105b56125b0565b348015610dda57600080fd5b506105b560d95481565b348015610df057600080fd5b50610477610dff366004615413565b61268c565b348015610e1057600080fd5b50610e1a61271081565b60405161ffff90911681526020016104bb565b348015610e3957600080fd5b50610477610e483660046152a1565b6126ff565b348015610e5957600080fd5b50610477612830565b348015610e6e57600080fd5b50610477610e7d366004615380565b6128d2565b348015610e8e57600080fd5b506105b5610e9d3660046152a1565b612cf5565b348015610eae57600080fd5b50610477610ebd3660046152a1565b612d12565b348015610ece57600080fd5b50610477610edd366004615413565b612da1565b348015610eee57600080fd5b506105b5610efd3660046152bd565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610f3457600080fd5b50610477612e0e565b348015610f4957600080fd5b50610477610f583660046152a1565b612eaa565b348015610f6957600080fd5b50610477610f783660046152a1565b612f9d565b610477613035565b348015610f9157600080fd5b50610fa5610fa03660046152a1565b61317a565b604080519283526020830191909152016104bb565b348015610fc657600080fd5b50610477610fd53660046154f8565b613258565b348015610fe657600080fd5b50610477613329565b348015610ffb57600080fd5b5060e25461079c906001600160a01b031681565b34801561101b57600080fd5b5061047761102a3660046153f7565b61337e565b34801561103b57600080fd5b5061047761104a366004615413565b6134a1565b6065546001600160a01b031633146110825760405162461bcd60e51b815260040161107990615793565b60405180910390fd5b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146110ce5760405162461bcd60e51b815260040161107990615793565b60cc546001600160a01b038381166101009092041614156111315760405162461bcd60e51b815260206004820152601b60248201527f5661756c74206173736574206e6f74207265636f76657261626c6500000000006044820152606401611079565b6001600160a01b03821630141561118a5760405162461bcd60e51b815260206004820152601b60248201527f5661756c74207368617265206e6f74207265636f76657261626c6500000000006044820152606401611079565b6001600160a01b0381163014156111e35760405162461bcd60e51b815260206004820152601960248201527f526563697069656e742063616e6e6f74206265207661756c74000000000000006044820152606401611079565b6040516370a0823160e01b81523060048201526112719082906001600160a01b038516906370a082319060240160206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611260919061542b565b6001600160a01b0385169190613583565b5050565b6060609a805461128490615a09565b80601f01602080910402602001604051908101604052809291908181526020018280546112b090615a09565b80156112fd5780601f106112d2576101008083540402835291602001916112fd565b820191906000526020600020905b8154815290600101906020018083116112e057829003601f168201915b5050505050905090565b60006113143384846135eb565b5060015b92915050565b600061132b84848461370f565b6001600160a01b0384166000908152609860209081526040808320338452909152902054828110156113b05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401611079565b6113bd85338584036135eb565b60019150505b9392505050565b600260015414156113ed5760405162461bcd60e51b8152600401611079906157e9565b600260015533600090815260c96020526040902060ce5461ffff16826114255760405162461bcd60e51b8152600401611079906157c8565b815461ffff1681146114695760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b6044820152606401611079565b81546201000090046001600160681b0316838110156114ba5760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b6044820152606401611079565b6114c484826159c6565b83546001600160681b0391909116620100000262010000600160781b031990911617835560cf546114ff9085906001600160801b03166159c6565b60cf80546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a261156433856138dd565b5050600180555050565b600260015414156115915760405162461bcd60e51b8152600401611079906157e9565b6002600155816115b35760405162461bcd60e51b8152600401611079906157c8565b6001600160a01b0381166115c657600080fd5b6115d08282613a3d565b60cc546115ed9061010090046001600160a01b0316333085613ccc565b505060018055565b3360008181526098602090815260408083206001600160a01b0387168452909152812054909161131491859061162c908690615890565b6135eb565b60cc5460009060ff168161166161164760995490565b61164f6125b0565b60cf546001600160801b031685613d04565b905061167661166f85612cf5565b8284613d4b565b949350505050565b6065546001600160a01b031633146116a85760405162461bcd60e51b815260040161107990615793565b600081116116e25760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b6044820152606401611079565b6116eb81613db4565b60cd54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160cd80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6002600154141561177c5760405162461bcd60e51b8152600401611079906157e9565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811661010090920416146117ec5760405162461bcd60e51b8152602060048201526005602482015264215553444360d81b6044820152606401611079565b6000851161180c5760405162461bcd60e51b8152600401611079906157c8565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061184c90339030908a908a908a908a908a906004016156d1565b600060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050506118888533613a3d565b60cc546118a59061010090046001600160a01b0316333088613ccc565b505060018055505050565b60d6546001600160a01b031633146118f45760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401611079565b600260015414156119175760405162461bcd60e51b8152600401611079906157e9565b600260015560ce8054600160781b6001600160681b0362010000830416026cffffffffffffffffffffffffff60781b1990911617905560e05460df5460009081906119629084613dfe565b60df81905560cf54919350915060009061198d908590600160801b90046001600160801b0316615890565b90506119988161412d565b60cf80546001600160801b03808416600160801b029116179055600060e0556119c083613db4565b60ce805462010000600160781b031916620100006001600160681b0386160217905560d080546001600160801b03169055600060d15560d35460d75460cc54611a1b916001600160a01b036101009092048216911683613583565b60d7546040518281526001600160a01b03909116907f88af4e011812ac0591fac38c5d6532fd401d8fa1fdf20e82b019e78405f42b719060200160405180910390a2505060018055505050565b6065546001600160a01b03163314611a925760405162461bcd60e51b815260040161107990615793565b60008163ffffffff1611611adf5760405162461bcd60e51b8152602060048201526014602482015273215f6f7074696f6e50757263686173654672657160601b6044820152606401611079565b60d25463ffffffff16158015611b08575060d25463ffffffff600160401b909104811690821611155b80611b1f575060d25463ffffffff90811690821611155b611b7a5760405162461bcd60e51b815260206004820152602660248201527f21205f6f7074696f6e507572636861736546726571203c206c6f616e5465726d604482015265098cadccee8d60d31b6064820152608401611079565b60d2805467ffffffff00000000191664010000000063ffffffff848116918202929092179283905560408051600160601b909404909216835260208301527ff0d4e95ace3c30a9f74264435d024aee7c24e0a24d5f2dc0b2f097778d19944391015b60405180910390a150565b6065546001600160a01b03163314611c115760405162461bcd60e51b815260040161107990615793565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b60d7546001600160a01b03163314611c795760405162461bcd60e51b815260206004820152600960248201526810b137b93937bbb2b960b91b6044820152606401611079565b611c8281614177565b50565b60da546001600160a01b03163314611ccf5760405162461bcd60e51b815260206004820152600d60248201526c10b7b83a34b7b729b2b63632b960991b6044820152606401611079565b611c8281614242565b60d6546001600160a01b03163314611d1c5760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401611079565b60d054600160801b90046001600160801b03161580611d68575060d25460d054611d6491600160601b900463ffffffff1690600160401b900467ffffffffffffffff16615890565b4210155b611dc05760405162461bcd60e51b815260206004820152602360248201527f507572636861736520646f6573206e6f742066756c66696c6c206672657175656044820152626e637960e81b6064820152608401611079565b60d254600090611def90611dea9063ffffffff600160601b8204811691600160401b9004166158a8565b6142f1565b905060008160ff1660d260020154611e0791906158a8565b60d080549192508291601090611e2e908490600160801b90046001600160801b0316615865565b825461010092830a6001600160801b038181021990921692909116021790915560d080546fffffffffffffffff00000000000000001916600160401b4267ffffffffffffffff160217905560da5460cc54611e9993506001600160a01b039290048216911683613583565b60da546040518281526001600160a01b03909116907f4c40d030ff61ad9fddd7e91383af2b30e967a5d96e128382a8b24130d6dee72e9060200160405180910390a25050565b6065546001600160a01b03163314611f095760405162461bcd60e51b815260040161107990615793565b60dc54611f19906203f480615890565b421015611f545760405162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b6044820152606401611079565b60db805460da80546001600160a01b03199081166001600160a01b03841617909155169055565b60026001541415611f9e5760405162461bcd60e51b8152600401611079906157e9565b6002600181905550611fb260006001614356565b60018055565b6065546001600160a01b03163314611fe25760405162461bcd60e51b815260040161107990615793565b611ff0620f424060646159a7565b811061203e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e6365206665650000000000000000006044820152606401611079565b60dd5460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160dd55565b6065546001600160a01b031633146120a95760405162461bcd60e51b815260040161107990615793565b6120b360006144f9565b565b60da546001600160a01b031633146120ff5760405162461bcd60e51b815260206004820152600d60248201526c10b7b83a34b7b729b2b63632b960991b6044820152606401611079565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061213f90339030908a908a908a908a908a906004016156d1565b600060405180830381600087803b15801561215957600080fd5b505af115801561216d573d6000803e3d6000fd5b5050505061217a85614242565b5050505050565b600260015414156121a45760405162461bcd60e51b8152600401611079906157e9565b60026001556121b28161454b565b8060e0546121c09190615890565b60e0555060018055565b6065546001600160a01b031633146121f45760405162461bcd60e51b815260040161107990615793565b6001600160a01b03811661223d5760405162461bcd60e51b815260206004820152601060248201526f10b732bba7b83a34b7b729b2b63632b960811b6044820152606401611079565b60da546001600160a01b038281169116141561229b5760405162461bcd60e51b815260206004820152601960248201527f4d757374206265206e6577206f7074696f6e2073656c6c6572000000000000006044820152606401611079565b60da54604080516001600160a01b03928316815291831660208301527f99e10f8286c53ce42e5bb9937b70f356c0733bf7f652059231239a1b9f12ef96910160405180910390a160db80546001600160a01b0319166001600160a01b03929092169190911790554260dc55565b6060609b805461128490615a09565b600061234761232560995490565b61232d6125b0565b60cf5460cc546001600160801b039091169060ff16613d04565b905090565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156123ce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611079565b6123db33858584036135eb565b5060019392505050565b600260015414156124085760405162461bcd60e51b8152600401611079906157e9565b600260015560e2546001600160a01b03168061242357600080fd5b6000821161243057600080fd5b336000908152609760205260409020548281101561245c5761245c61245582856159c6565b6000614356565b61246733308561370f565b6124723083856135eb565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b5050600180555050505050565b600061131433848461370f565b60d7546001600160a01b031633146125355760405162461bcd60e51b815260206004820152600960248201526810b137b93937bbb2b960b91b6044820152606401611079565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061257590339030908a908a908a908a908a906004016156d1565b600060405180830381600087803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b5050505061217a85614177565b60d45460d35460d154600092918391116125cc5760d1546125d0565b60d3545b60cc546040516370a0823160e01b81523060048201529192508291849161010090046001600160a01b0316906370a082319060240160206040518083038186803b15801561261d57600080fd5b505afa158015612631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612655919061542b565b60ce5461267191906201000090046001600160681b0316615890565b61267b91906159c6565b61268591906159c6565b9250505090565b600260015414156126af5760405162461bcd60e51b8152600401611079906157e9565b6002600155806126d15760405162461bcd60e51b8152600401611079906157c8565b6126db8133613a3d565b60cc546126f89061010090046001600160a01b0316333084613ccc565b5060018055565b6065546001600160a01b031633146127295760405162461bcd60e51b815260040161107990615793565b6001600160a01b03811661276e5760405162461bcd60e51b815260206004820152600c60248201526b10b732bba137b93937bbb2b960a11b6044820152606401611079565b60d7546001600160a01b03828116911614156127c35760405162461bcd60e51b815260206004820152601460248201527326bab9ba103132903732bb903137b93937bbb2b960611b6044820152606401611079565b60d754604080516001600160a01b03928316815291831660208301527fa8ff19f79b98ff5728928ff9d44353bf0fc03185db41da6e5c0c1f5ff3888855910160405180910390a160d880546001600160a01b0319166001600160a01b03929092169190911790554260d955565b60e1546001600160a01b03168061284657600080fd5b61285260006001614356565b336000818152609760205260409020549061286e9083836135eb565b60405163c9c2d4f560e01b8152336004820152602481018290526001600160a01b0383169063c9c2d4f590604401600060405180830381600087803b1580156128b657600080fd5b505af11580156128ca573d6000803e3d6000fd5b505050505050565b600054610100900460ff16806128eb575060005460ff16155b6129075760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015612929576000805461ffff19166101011790555b600061293860208601866152a1565b6001600160a01b031614156129785760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401611079565b73__$2abc2342da0ef81c8a62da4073b4b8c831$__6387885a076129a260408701602088016152a1565b6129b260a08801608089016152a1565b6129c26060890160408a016152a1565b6129d260808a0160608b016152a1565b60a08a013560c08b01356129e960e08d018d615820565b6129f76101008f018f615820565b8e8e6040518d63ffffffff1660e01b8152600401612a209c9b9a999897969594939291906155f0565b60006040518083038186803b158015612a3857600080fd5b505af4158015612a4c573d6000803e3d6000fd5b50505050612a58614712565b612ae5612a6860e0860186615820565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aab92505050610100870187615820565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061478592505050565b612aed614804565b612afd610f7860208601866152a1565b612b0d60408501602086016152a1565b60d680546001600160a01b0319166001600160a01b0392909216919091179055612b3d60a08501608086016152a1565b60d580546001600160a01b0319166001600160a01b0392909216919091179055612b6d60608501604086016152a1565b60d780546001600160a01b0319166001600160a01b0392909216919091179055612b9d60808501606086016152a1565b60da80546001600160a01b0319166001600160a01b039290921691909117905560c084013560dd5563031ba309612bdb620f424060a08701356159a7565b612be591906158a8565b60de558260cc612bf58282615bd2565b5082905060d2612c058282615a9e565b505060cc546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a082319060240160206040518083038186803b158015612c5057600080fd5b505afa158015612c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c88919061542b565b9050612c9381613db4565b60ce805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015612cef576000805461ff00191690555b50505050565b6000806000612d038461317a565b90925090506116768183615890565b6065546001600160a01b03163314612d3c5760405162461bcd60e51b815260040161107990615793565b6001600160a01b038116612d7f5760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401611079565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612dc45760405162461bcd60e51b8152600401611079906157e9565b600260015580612e035760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611079565b6126f8816000614356565b6065546001600160a01b03163314612e385760405162461bcd60e51b815260040161107990615793565b60d954612e48906203f480615890565b421015612e835760405162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b6044820152606401611079565b60d8805460d780546001600160a01b03199081166001600160a01b03841617909155169055565b6065546001600160a01b03163314612ed45760405162461bcd60e51b815260040161107990615793565b6001600160a01b038116612f1d5760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b6044820152606401611079565b60d5546001600160a01b0382811691161415612f7b5760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e7400000000000000006044820152606401611079565b60d580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314612fc75760405162461bcd60e51b815260040161107990615793565b6001600160a01b03811661302c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611079565b611c82816144f9565b600260015414156130585760405162461bcd60e51b8152600401611079906157e9565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811661010090920416146130c85760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b6044820152606401611079565b600034116131015760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401611079565b61310b3433613a3d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561316657600080fd5b505af11580156118a5573d6000803e3d6000fd5b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291600111156131fc575050506001600160a01b031660009081526097602052604081205491565b60ce54815161ffff908116600090815260ca602052604081205460cc54919361322d9386939116919060ff1661486b565b905061324e856001600160a01b031660009081526097602052604090205490565b9590945092505050565b6065546001600160a01b031633146132825760405162461bcd60e51b815260040161107990615793565b620151808163ffffffff1610156132ce5760405162461bcd60e51b815260206004820152601060248201526f042bed8dec2dca8cae4da98cadccee8d60831b6044820152606401611079565b60d2805463ffffffff191663ffffffff8381169182179283905560408051600160401b909404909116835260208301919091527fd323e49efbd1e497c4f485723f1434c9b8294a325ad121e48fdb4c1cfacea7359101611bdc565b6002600154141561334c5760405162461bcd60e51b8152600401611079906157e9565b6002600155600061335b6148dc565b90508060df5461336b91906159c6565b6001600160801b031660df555060018055565b6065546001600160a01b031633146133a85760405162461bcd60e51b815260040161107990615793565b61271061ffff821611156133f45760405162461bcd60e51b81526020600482015260136024820152720857db1bd85b905b1b1bd8d85d1a5bdb9410d5606a1b6044820152606401611079565b600061340661ffff83166127106159c6565b60d25460408051600160801b830461ffff9081168252600160901b90930483166020820152858316818301529183166060830152519192507f18b482963ff6c4f5c5ba3108cb641c89fabceb5de48c28205412cfb69a318dca919081900360800190a160d2805463ffffffff60801b1916600160801b61ffff9485160261ffff60901b191617600160901b9290931691909102919091179055565b6065546001600160a01b031633146134cb5760405162461bcd60e51b815260040161107990615793565b6134d9620f424060646159a7565b81106135205760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401611079565b600063031ba309613534620f4240846159a7565b61353e91906158a8565b60de5460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160de5550565b6040516001600160a01b0383166024820152604481018290526135e690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a94565b505050565b6001600160a01b03831661364d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611079565b6001600160a01b0382166136ae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611079565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166137735760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611079565b6001600160a01b0382166137d55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611079565b6001600160a01b0383166000908152609760205260409020548181101561384d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611079565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613884908490615890565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516138d091815260200190565b60405180910390a3612cef565b60cc546001600160a01b036101009091048116907f000000000000000000000000000000000000000000000000000000000000000016811415613a2957604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561397c57600080fd5b505af1158015613990573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146139e1576040519150601f19603f3d011682016040523d82523d6000602084013e6139e6565b606091505b5050905080612cef5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401611079565b6135e66001600160a01b0382168484613583565b60ce5461ffff16600083613a4f6125b0565b613a599190615890565b60cd549091506001600160681b0316811115613aa45760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401611079565b60cc54600160a81b900466ffffffffffffff16811015613afd5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401611079565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc54919291613bb791849187919060ff1661486b565b8251909150869061ffff16851415613be85760008784602001516001600160681b0316613be49190615890565b9150505b613bf181613db4565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560cf54613c98918a9116615890565b9050613ca38161412d565b60cf80546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612cef9085906323b872dd60e01b906084016135af565b600080613d1283600a6158ff565b905060008611613d225780613d41565b85613d2d85876159c6565b613d3790836159a7565b613d4191906158a8565b9695505050505050565b600060018311613d955760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611079565b613da082600a6158ff565b613daa84866159a7565b61167691906158a8565b6001600160681b03811115611c825760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401611079565b60d25460d0546000918291613e2a91600160401b900463ffffffff169067ffffffffffffffff16615890565b421015613e625760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401611079565b60d5546040805160e08101825260cc5460ff8116825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373__$2abc2342da0ef81c8a62da4073b4b8c831$__93632b8b58cf9360ce9390926020840192610100900416906370a082319060240160206040518083038186803b158015613eed57600080fd5b505afa158015613f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f25919061542b565b8152602001613f3360995490565b81526020018d815260200160dd54815260200160de5481526020018c8152506040518363ffffffff1660e01b8152600401613fc092919060006101008201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b60c06040518083038186803b158015613fd857600080fd5b505af4158015613fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140109190615467565b60ce5461ffff16600081815260ca60209081526040918290208790558151858152908101849052908101829052969d50949b50919850965094509250906001600160a01b038716907f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c0069060600160405180910390a260cf80546001600160801b03191690556140a0816001615890565b60ce805461ffff191661ffff929092169190911790556140c36201518042615a44565b6140cd90426159c6565b6140d990617080615890565b60d0805467ffffffffffffffff191667ffffffffffffffff929092169190911790555061410890503084614b66565b80156141185761411884826138dd565b61412186614c45565b505050505b9250929050565b6001600160801b03811115611c825760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401611079565b60cc546141949061010090046001600160a01b0316333084613ccc565b60d35460008183116141a75760006141b1565b6141b182846159c6565b90508260ce60030160008282546141c89190615890565b909155503390507f29140ea6a2cacc49ac04ac38fbc98f54871b1754490efa4911d68b90c9007aa78483856141fe57600061421f565b8561420a86600c6159a7565b6142159060646159a7565b61421f91906158a8565b6040805193845260208401929092529082015260600160405180910390a2505050565b60cc5461010090046001600160a01b031661425f81333085613ccc565b60d454600081841161427257600061427c565b61427c82856159c6565b9050600082851161428e5760006142a4565b8261429a6064876159a7565b6142a491906158a8565b604080518781526020810185905290810182905290915033907fa5f450d256a08c3d1bd5fa024f1b3a241ef831e8533c9c96134a2fbb4e76a5ee9060600160405180910390a25050505050565b600060ff8211156143525760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401611079565b5090565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260ce5491865260ca9094529184205460cc54919492909316926143cc918591859160ff1661486b565b9050836143d957846143db565b805b9450846143e9575050505050565b8085111561442d5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401611079565b825161ffff1682111561445a5733600090815260c960205260409020805462010000600160781b03191690555b6144638561412d565b61446d85826159c6565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916144e69189825261ffff16602082015260400190565b60405180910390a261217a30338761370f565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081116145885760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611079565b33600090815260c960205260409020546201000090046001600160681b03161515806145d2575033600090815260c96020526040902054600160781b90046001600160801b031615155b156145e3576145e360006001614356565b60ce5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b03166000821561466c576146658683615890565b90506146cf565b81156146ae5760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b6044820152606401611079565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b6146d88161412d565b33600081815260cb60205260409020805462010000600160901b031916620100006001600160801b038516021790556128ca90308861370f565b600054610100900460ff168061472b575060005460ff16155b6147475760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614769576000805461ffff19166101011790555b614771614d7a565b8015611c82576000805461ff001916905550565b600054610100900460ff168061479e575060005460ff16155b6147ba5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff161580156147dc576000805461ffff19166101011790555b6147e4614de9565b6147ee8383614e53565b80156135e6576000805461ff0019169055505050565b600054610100900460ff168061481d575060005460ff16155b6148395760405162461bcd60e51b815260040161107990615745565b600054610100900460ff1615801561485b576000805461ffff19166101011790555b614863614de9565b614771614ee8565b835160009061ffff16158015906148865750845161ffff1684115b156148c85760006148a586602001516001600160681b03168585614f48565b90508086604001516001600160801b03166148c09190615890565b915050611676565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff168161493e5760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401611079565b60ce5461ffff1681106149865760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401611079565b33600090815260cb60205260409020805462010000600160901b031916905560cf546149c3908390600160801b90046001600160801b03166159c6565b60cf80546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc54614a0091859160ff16613d4b565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2614a483084614fa8565b60008111614a8a5760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401611079565b61167633826138dd565b6000614ae9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150f69092919063ffffffff16565b8051909150156135e65780806020019051810190614b079190615360565b6135e65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611079565b6001600160a01b038216614bbc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611079565b8060996000828254614bce9190615890565b90915550506001600160a01b03821660009081526097602052604081208054839290614bfb908490615890565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b604080516101008101825260d25463ffffffff808216808452640100000000830482166020850152600160401b8304821694840194909452600160601b820416606083015261ffff600160801b820481166080840152600160901b9091041660a082015260d35460c082015260d45460e08201529015614cf357805160d280546bffffffff00000000ffffffff1916600160401b63ffffffff9093169290920263ffffffff19169190911790555b602081015163ffffffff1615614d4257602081015160d280546fffffffff00000000ffffffff000000001916600160601b63ffffffff9093169290920267ffffffff0000000019169190911790555b608081015161271090614d5a90849061ffff166159a7565b614d6491906158a8565b60d3819055614d7390836159c6565b60d4555050565b600054610100900460ff1680614d93575060005460ff16155b614daf5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614dd1576000805461ffff19166101011790555b600180558015611c82576000805461ff001916905550565b600054610100900460ff1680614e02575060005460ff16155b614e1e5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614771576000805461ffff19166101011790558015611c82576000805461ff001916905550565b600054610100900460ff1680614e6c575060005460ff16155b614e885760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614eaa576000805461ffff19166101011790555b8251614ebd90609a906020860190615201565b508151614ed190609b906020850190615201565b5080156135e6576000805461ff0019169055505050565b600054610100900460ff1680614f01575060005460ff16155b614f1d5760405162461bcd60e51b815260040161107990615745565b600054610100900460ff16158015614f3f576000805461ffff19166101011790555b614771336144f9565b600060018311614f925760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611079565b82614f9e83600a6158ff565b613daa90866159a7565b6001600160a01b0382166150085760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611079565b6001600160a01b0382166000908152609760205260409020548181101561507c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611079565b6001600160a01b03831660009081526097602052604081208383039055609980548492906150ab9084906159c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6060611676848460008585843b61514f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611079565b600080866001600160a01b0316858760405161516b91906155d4565b60006040518083038185875af1925050503d80600081146151a8576040519150601f19603f3d011682016040523d82523d6000602084013e6151ad565b606091505b50915091506151bd8282866151c8565b979650505050505050565b606083156151d75750816113c3565b8251156151e75782518084602001fd5b8160405162461bcd60e51b81526004016110799190615712565b82805461520d90615a09565b90600052602060002090601f01602090048101928261522f5760008555615275565b82601f1061524857805160ff1916838001178555615275565b82800160010185558215615275579182015b8281111561527557825182559160200191906001019061525a565b506143529291505b80821115614352576000815560010161527d565b803561529c81615cb5565b919050565b6000602082840312156152b2578081fd5b81356113c381615c8b565b600080604083850312156152cf578081fd5b82356152da81615c8b565b915060208301356152ea81615c8b565b809150509250929050565b600080600060608486031215615309578081fd5b833561531481615c8b565b9250602084013561532481615c8b565b929592945050506040919091013590565b60008060408385031215615347578182fd5b823561535281615c8b565b946020939093013593505050565b600060208284031215615371578081fd5b815180151581146113c3578182fd5b60008060008385036101a0811215615396578384fd5b843567ffffffffffffffff8111156153ac578485fd5b850161012081880312156153be578485fd5b93506080601f19820112156153d1578283fd5b602085019250610100609f19820112156153e9578182fd5b5060a0840190509250925092565b600060208284031215615408578081fd5b81356113c381615cb5565b600060208284031215615424578081fd5b5035919050565b60006020828403121561543c578081fd5b5051919050565b60008060408385031215615455578182fd5b8235915060208301356152ea81615c8b565b60008060008060008060c0878903121561547f578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600080600060a086880312156154c7578283fd5b853594506020860135935060408601356154e081615cec565b94979396509394606081013594506080013592915050565b600060208284031215615509578081fd5b81356113c381615cc5565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b803561554881615cc5565b63ffffffff908116835260208201359061556182615cc5565b908116602084015260408201359061557882615cc5565b908116604084015260608201359061558f82615cc5565b1660608301526155a160808201615291565b61ffff1660808301526155b660a08201615291565b61ffff1660a083015260c0818101359083015260e090810135910152565b600082516155e68184602087016159dd565b9190910192915050565b600060018060a01b03808f168352808e166020840152808d166040840152808c1660608401528a60808401528960a084015261028060c08401526156396102808401898b615514565b83810360e085015261564c81888a615514565b925050843561565a81615cec565b60ff16610100840152602085013561567181615c8b565b16610120830152604084013561568681615cd7565b66ffffffffffffff1661014083015260608401356156a381615ca0565b6001600160681b03166101608301526156c061018083018461553d565b9d9c50505050505050505050505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208152600082518060208401526157318160408501602087016159dd565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112615836578283fd5b83018035915067ffffffffffffffff821115615850578283fd5b60200191503681900382131561412657600080fd5b60006001600160801b0380831681851680830382111561588757615887615a58565b01949350505050565b600082198211156158a3576158a3615a58565b500190565b6000826158b7576158b7615a6e565b500490565b600181815b808511156158f75781600019048211156158dd576158dd615a58565b808516156158ea57918102915b93841c93908002906158c1565b509250929050565b60006113c3838360008261591557506001611318565b8161592257506000611318565b816001811461593857600281146159425761595e565b6001915050611318565b60ff84111561595357615953615a58565b50506001821b611318565b5060208310610133831016604e8410600b8410161715615981575081810a611318565b61598b83836158bc565b806000190482111561599f5761599f615a58565b029392505050565b60008160001904831182151516156159c1576159c1615a58565b500290565b6000828210156159d8576159d8615a58565b500390565b60005b838110156159f85781810151838201526020016159e0565b83811115612cef5750506000910152565b600181811c90821680615a1d57607f821691505b60208210811415615a3e57634e487b7160e01b600052602260045260246000fd5b50919050565b600082615a5357615a53615a6e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000813561131881615cb5565b6000813561131881615cc5565b8135615aa981615cc5565b63ffffffff8116905081548163ffffffff1982161783556020840135615ace81615cc5565b67ffffffff000000008160201b168367ffffffffffffffff19841617178455505050615b29615aff60408401615a91565b82546bffffffff0000000000000000191660409190911b6bffffffff000000000000000016178255565b615b5c615b3860608401615a91565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b615b8b615b6b60808401615a84565b82805461ffff60801b191660809290921b61ffff60801b16919091179055565b615bba615b9a60a08401615a84565b82805461ffff60901b191660909290921b61ffff60901b16919091179055565b60c0820135600182015560e082013560028201555050565b8135615bdd81615cec565b60ff8116905081548160ff1982161783556020840135615bfc81615c8b565b610100600160a81b0360089190911b166001600160a81b031982168317811784556040850135615c2b81615cd7565b6001600160e01b0319929092169092179190911760a89190911b66ffffffffffffff60a81b16178155600181016060830135615c6681615ca0565b81546cffffffffffffffffffffffffff19166001600160681b03919091161790555050565b6001600160a01b0381168114611c8257600080fd5b6001600160681b0381168114611c8257600080fd5b61ffff81168114611c8257600080fd5b63ffffffff81168114611c8257600080fd5b66ffffffffffffff81168114611c8257600080fd5b60ff81168114611c8257600080fdfea2646970667358221220679956765d9de2a2c312f902c1fe1e3ec2852dff2c3112549cc47fc82d124b3164736f6c63430008040033",
  "libraries": {
    "VaultLifecycleEarn": "0xE01e815D26e852eEFCDcae6d72C5bB2Df83A96f6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_usdc": "is the USDC contract",
          "_weth": "is the Wrapped Ether contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "deadline": "must be a timestamp in the future",
          "r": "is a valid signature",
          "s": "is a valid signature",
          "v": "is a valid signature"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize((address,address,address,address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256))": {
        "params": {
          "_allocationState": "is the struct with vault loan/option allocation data",
          "_initParams": "is the struct with vault initialization parameters",
          "_vaultParams": "is the struct with vault general data"
        }
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payOptionYield(uint256)": {
        "params": {
          "amount": "is the amount of yield to pay"
        }
      },
      "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "is the amount of yield to pay",
          "deadline": "must be a timestamp in the future",
          "r": "is a valid signature",
          "s": "is a valid signature",
          "v": "is a valid signature"
        }
      },
      "recoverTokens(address,address)": {
        "params": {
          "recipient": "is the recipient of the recovered tokens",
          "token": "is the ERC20 token to recover from the vault"
        }
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "returnLentFunds(uint256)": {
        "params": {
          "amount": "is the amount to return (principal + interest)"
        }
      },
      "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "is the amount to return (principal + interest)",
          "deadline": "must be a timestamp in the future",
          "r": "is a valid signature",
          "s": "is a valid signature",
          "v": "is a valid signature"
        }
      },
      "setBorrower(address)": {
        "params": {
          "newBorrower": "is the address of the new borrower"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setLiquidityGauge(address)": {
        "params": {
          "newLiquidityGauge": "is the address of the new liquidityGauge contract"
        }
      },
      "setLoanAllocationPCT(uint16)": {
        "details": "Can be called by admin",
        "params": {
          "_loanAllocationPCT": "new allocation for loan"
        }
      },
      "setLoanTermLength(uint32)": {
        "details": "Can be called by admin",
        "params": {
          "_loanTermLength": "new loan term length"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setOptionPurchaseFrequency(uint32)": {
        "details": "Can be called by admin",
        "params": {
          "_optionPurchaseFreq": "new option purchase frequency"
        }
      },
      "setOptionSeller(address)": {
        "params": {
          "newOptionSeller": "is the address of the new option seller"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setVaultPauser(address)": {
        "params": {
          "newVaultPauser": "is the address of the new vaultPauser contract"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "stake(uint256)": {
        "params": {
          "numShares": "is the number of shares to stake"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawInstantly(uint256)": {
        "params": {
          "amount": "is the amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "allocationState()": {
        "notice": "Vault's state of the allocation between lending and buying options"
      },
      "borrower()": {
        "notice": "borrower is the address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)"
      },
      "buyOption()": {
        "notice": "Buys the option by transferring premiums to option seller"
      },
      "commitBorrower()": {
        "notice": "Commits the pending borrower"
      },
      "commitOptionSeller()": {
        "notice": "Commits the option seller"
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "currentQueuedWithdrawShares()": {
        "notice": "Queued withdraw shares for the current round"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositETH()": {
        "notice": "Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH."
      },
      "depositFor(uint256,address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposits the `asset` from msg.sender without an approve `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initialize((address,address,address,address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextRound and burnRemainingOTokens"
      },
      "lastBorrowerChange()": {
        "notice": "lastBorrowerChange is the last time borrower was set"
      },
      "lastOptionSellerChange()": {
        "notice": "lastOptionSellerChange is the last time option seller was set"
      },
      "lastQueuedWithdrawAmount()": {
        "notice": "Amount locked for scheduled withdrawals last week;"
      },
      "liquidityGauge()": {
        "notice": "LiquidityGauge contract for the vault"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextRound. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "optionSeller()": {
        "notice": "optionSeller is the address of the entity that we will be buying options from (EX: Orbit)"
      },
      "pausePosition()": {
        "notice": "pause a user's vault position"
      },
      "payOptionYield(uint256)": {
        "notice": "Pays option yield if option is ITM"
      },
      "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Pays option yield if option is ITM `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments"
      },
      "pendingBorrower()": {
        "notice": "pendingBorrower is the pending address of the borrowing entity (EX: Wintermute, GSR, Alameda, Genesis)"
      },
      "pendingOptionSeller()": {
        "notice": "pendingOptionSeller is the pending address of the entity that we will be buying options from (EX: Orbit)"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextRound. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "recoverTokens(address,address)": {
        "notice": "Recovery function that returns an ERC20 token to the recipient"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "returnLentFunds(uint256)": {
        "notice": "Return lend funds"
      },
      "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Return lend funds `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments"
      },
      "rollToNextRound()": {
        "notice": "Rolls the vault's funds into a new short position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setBorrower(address)": {
        "notice": "Sets the new borrower"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setLiquidityGauge(address)": {
        "notice": "Sets the new liquidityGauge contract for this vault"
      },
      "setLoanAllocationPCT(uint16)": {
        "notice": "Sets new loan allocation percentage"
      },
      "setLoanTermLength(uint32)": {
        "notice": "Sets loan term length"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setOptionPurchaseFrequency(uint32)": {
        "notice": "Sets option purchase frequency"
      },
      "setOptionSeller(address)": {
        "notice": "Sets the new option seller"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "setVaultPauser(address)": {
        "notice": "Sets the new Vault Pauser contract for this vault"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "stake(uint256)": {
        "notice": "Stakes a users vault shares"
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts lent out"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultPauser()": {
        "notice": "Vault Pauser Contract for the vault"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonEarnVaultStorage. RibbonEarnVault should not inherit from any other contract aside from RibbonVault, RibbonEarnVaultStorage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 184,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 257,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 3663,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)3182_storage)"
      },
      {
        "astId": 3668,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3674,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)3187_storage)"
      },
      {
        "astId": 3678,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultParams)3139_storage"
      },
      {
        "astId": 3682,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(VaultState)3175_storage"
      },
      {
        "astId": 3686,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "allocationState",
        "offset": 0,
        "slot": "210",
        "type": "t_struct(AllocationState)3156_storage"
      },
      {
        "astId": 3689,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "213",
        "type": "t_address"
      },
      {
        "astId": 3692,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "keeper",
        "offset": 0,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 3695,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "borrower",
        "offset": 0,
        "slot": "215",
        "type": "t_address"
      },
      {
        "astId": 3698,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "pendingBorrower",
        "offset": 0,
        "slot": "216",
        "type": "t_address"
      },
      {
        "astId": 3701,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "lastBorrowerChange",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 3704,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "optionSeller",
        "offset": 0,
        "slot": "218",
        "type": "t_address"
      },
      {
        "astId": 3707,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "pendingOptionSeller",
        "offset": 0,
        "slot": "219",
        "type": "t_address"
      },
      {
        "astId": 3710,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "lastOptionSellerChange",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 3713,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 3716,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 3719,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 3722,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "currentQueuedWithdrawShares",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 3725,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "vaultPauser",
        "offset": 0,
        "slot": "225",
        "type": "t_address"
      },
      {
        "astId": 3728,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
        "label": "liquidityGauge",
        "offset": 0,
        "slot": "226",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)3182_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)3182_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)3187_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)3187_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AllocationState)3156_storage": {
        "encoding": "inplace",
        "label": "struct Vault.AllocationState",
        "members": [
          {
            "astId": 3141,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "nextLoanTermLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3143,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "nextOptionPurchaseFreq",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3145,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "currentLoanTermLength",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3147,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "currentOptionPurchaseFreq",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3149,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "loanAllocationPCT",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3151,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "optionAllocationPCT",
            "offset": 18,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3153,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "loanAllocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3155,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "optionAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DepositReceipt)3182_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 3177,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3179,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3181,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VaultParams)3139_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 3132,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3134,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "asset",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3136,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "minimumSupply",
            "offset": 21,
            "slot": "0",
            "type": "t_uint56"
          },
          {
            "astId": 3138,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "cap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultState)3175_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 3158,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3160,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3162,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3164,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3166,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3168,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "lastEpochTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3170,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "lastOptionPurchaseTime",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3172,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "optionsBoughtInRound",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 3174,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "amtFundsReturned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Withdrawal)3187_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 3184,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3186,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVault.sol:RibbonEarnVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}