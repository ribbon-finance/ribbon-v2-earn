{
  "address": "0xedAe76E579A3aCf71Dc11250D70b1A4f80748Be1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curveETHSTETHPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stETHEarnVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "curveETHSTETHPool",
      "outputs": [
        {
          "internalType": "contract ICurveETHSTETHPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSTETHAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stETHEarnVault",
      "outputs": [
        {
          "internalType": "contract IRibbonEarnVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b4cef0cc3705ed459a42772d9a5393a80f4f0a554dc0f7665c73eceb9c42c8b",
  "receipt": {
    "to": null,
    "from": "0xF8368119Bb1073Cf01B841848725d81b542A4c19",
    "contractAddress": "0xedAe76E579A3aCf71Dc11250D70b1A4f80748Be1",
    "transactionIndex": 57,
    "gasUsed": "492896",
    "logsBloom": "0x
    "blockHash": "0x2926a2562b4e69542d527c3536e3feeace6775f3a1a4f11f4ffb2f073a9002f1",
    "transactionHash": "0x4b4cef0cc3705ed459a42772d9a5393a80f4f0a554dc0f7665c73eceb9c42c8b",
    "logs": [],
    "blockNumber": 16043056,
    "cumulativeGasUsed": "7385691",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDC24316b9AE028F1497c275EB9192a3Ea0f67022",
    "0xCE5513474E077F5336cf1B33c1347FDD8D48aE8c",
    "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84"
  ],
  "solcInputHash": "26706e2a217b2e350989530907619f99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveETHSTETHPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stETHEarnVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"curveETHSTETHPool\",\"outputs\":[{\"internalType\":\"contract ICurveETHSTETHPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSTETHAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETHEarnVault\",\"outputs\":[{\"internalType\":\"contract IRibbonEarnVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"Swaps ETH -> stETH on Curve ETH-stETH pool, and deposits into stETH vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/STETHDepositHelper.sol\":\"STETHDepositHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveETHSTETHPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICurveETHSTETHPool {\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc4f2ca5971b813bc7894e9fb9543e2977a2dd31e7edc8d7ac844342fedde7a6\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonEarnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonEarnVault {\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function roundPricePerShare(uint256) external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function initiateWithdraw(uint256 numShares) external;\\n\\n    function completeWithdraw() external;\\n\\n    function maxRedeem() external;\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function depositYieldTokenFor(uint256 amount, address creditor) external;\\n}\\n\",\"keccak256\":\"0x65bc8b44e1d39a3abac3ecbbffc68d51052f4b4fc81a595e2c48596f09180dbe\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Yield is scaled by 100 (10 ** 2) for PCT.\\n    uint256 internal constant YIELD_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in vault\\n        address asset;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct AllocationState {\\n        // Next Loan Term Length\\n        uint32 nextLoanTermLength;\\n        // Next Option Purchase Frequency\\n        uint32 nextOptionPurchaseFreq;\\n        // Current Loan Term Length\\n        uint32 currentLoanTermLength;\\n        // Current Option Purchase Frequency\\n        uint32 currentOptionPurchaseFreq;\\n        // Current Loan Allocation Percent\\n        uint32 loanAllocationPCT;\\n        // Current Option Purchase Allocation Percent\\n        uint32 optionAllocationPCT;\\n        // Loan Allocation in USD\\n        uint256 loanAllocation;\\n        // Option Purchase Allocation across all purchases\\n        uint256 optionAllocation;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for the strategy\\n        uint104 lockedAmount;\\n        // Amount that was locked for the strategy in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n        // Last Loan Allocation Date\\n        uint64 lastEpochTime;\\n        // Last Option Purchase Date\\n        uint64 lastOptionPurchaseTime;\\n        // Amount of options bought in current round\\n        uint128 optionsBoughtInRound;\\n        // DEPRECATED FOR VARIABLE RATE\\n        // Amount of funds returned this round\\n        uint256 amtFundsReturned;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    /**\\n     * @param borrowerWeight is the borrow weight of the borrower\\n     * @param pendingBorrowerWeight is the pending borrow weight\\n     * @param exists is whether the borrower has already been added\\n     */\\n    struct BorrowerState {\\n        // Borrower exists\\n        bool exists;\\n        // Borrower weight\\n        uint128 borrowerWeight;\\n        // Borrower weight\\n        uint128 pendingBorrowerWeight;\\n    }\\n}\\n\",\"keccak256\":\"0x471ddcc34682652986eaf80e5bdcc8588438f969663d10be8b994e3980a04e9c\",\"license\":\"MIT\"},\"contracts/utils/STETHDepositHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {ICurveETHSTETHPool} from \\\"../interfaces/ICurveETHSTETHPool.sol\\\";\\nimport {IRibbonEarnVault} from \\\"../interfaces/IRibbonEarnVault.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract STETHDepositHelper {\\n    using SafeERC20 for IERC20;\\n\\n    ICurveETHSTETHPool public immutable curveETHSTETHPool;\\n    IRibbonEarnVault public immutable stETHEarnVault;\\n    IERC20 public immutable stETH;\\n\\n    constructor(\\n        address _curveETHSTETHPool,\\n        address _stETHEarnVault,\\n        address _stETH\\n    ) {\\n        require(_curveETHSTETHPool != address(0), \\\"!curveETHSTETH Pool\\\");\\n        require(_stETHEarnVault != address(0), \\\"!stETHEarnVault\\\");\\n        require(_stETH != address(0), \\\"!_stETH\\\");\\n\\n        curveETHSTETHPool = ICurveETHSTETHPool(_curveETHSTETHPool);\\n        stETHEarnVault = IRibbonEarnVault(_stETHEarnVault);\\n        stETH = IERC20(_stETH);\\n    }\\n\\n    /**\\n     * Swaps ETH -> stETH on Curve ETH-stETH pool, and deposits into stETH vault\\n     */\\n    function deposit(uint256 minSTETHAmount) external payable {\\n        curveETHSTETHPool.exchange{value: msg.value}(\\n            0,\\n            1,\\n            msg.value,\\n            minSTETHAmount\\n        );\\n        uint256 balance = stETH.balanceOf(address(this));\\n        stETH.safeApprove(address(stETHEarnVault), balance);\\n        stETHEarnVault.depositFor(balance, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe86cb78e0a9e40bdfe23979f1e305c5d11cfd3378dfec1855bc327d578608a2e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516109c73803806109c783398101604081905261002f91610155565b6001600160a01b03831661008a5760405162461bcd60e51b815260206004820152601360248201527f216375727665455448535445544820506f6f6c0000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166100d25760405162461bcd60e51b815260206004820152600f60248201526e085cdd11551211585c9b95985d5b1d608a1b6044820152606401610081565b6001600160a01b0381166101125760405162461bcd60e51b8152602060048201526007602482015266042bee6e88aa8960cb1b6044820152606401610081565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052610197565b80516001600160a01b038116811461015057600080fd5b919050565b600080600060608486031215610169578283fd5b61017284610139565b925061018060208501610139565b915061018e60408501610139565b90509250925092565b60805160601c60a05160601c60c05160601c6107d86101ef6000396000818160ef015281816101db015261026c01526000818160a60152818161028e01526102cf0152600081816056015261013d01526107d86000f3fe60806040526004361061003f5760003560e01c80637cec9e0414610044578063abea01d714610094578063b6b55f25146100c8578063c1fe3e48146100dd575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6100db6100d63660046106f3565b610111565b005b3480156100e957600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b604051630f7c084960e21b815260006004820152600160248201523460448201819052606482018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691633df0212491906084016020604051808303818588803b15801561018957600080fd5b505af115801561019d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906101c2919061070b565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561022557600080fd5b505afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d919061070b565b90506102b36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610337565b6040516336efd16f60e01b8152600481018290523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906336efd16f90604401600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b505050505050565b8015806103c05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561038657600080fd5b505afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be919061070b565b155b6104305760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610482908490610487565b505050565b60006104dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105599092919063ffffffff16565b80519091501561048257808060200190518101906104fa91906106d3565b6104825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610427565b60606105688484600085610572565b90505b9392505050565b6060824710156105d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610427565b843b6106215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610427565b600080866001600160a01b0316858760405161063d9190610723565b60006040518083038185875af1925050503d806000811461067a576040519150601f19603f3d011682016040523d82523d6000602084013e61067f565b606091505b509150915061068f82828661069a565b979650505050505050565b606083156106a957508161056b565b8251156106b95782518084602001fd5b8160405162461bcd60e51b8152600401610427919061073f565b6000602082840312156106e4578081fd5b8151801515811461056b578182fd5b600060208284031215610704578081fd5b5035919050565b60006020828403121561071c578081fd5b5051919050565b60008251610735818460208701610772565b9190910192915050565b602081526000825180602084015261075e816040850160208701610772565b601f01601f19169190910160400192915050565b60005b8381101561078d578181015183820152602001610775565b8381111561079c576000848401525b5050505056fea2646970667358221220191507724694a8fdfa34f03a1a87e3bfa2c2143fc539205b1ada14d8f4d9cbd664736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80637cec9e0414610044578063abea01d714610094578063b6b55f25146100c8578063c1fe3e48146100dd575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6100db6100d63660046106f3565b610111565b005b3480156100e957600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b604051630f7c084960e21b815260006004820152600160248201523460448201819052606482018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691633df0212491906084016020604051808303818588803b15801561018957600080fd5b505af115801561019d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906101c2919061070b565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561022557600080fd5b505afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d919061070b565b90506102b36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610337565b6040516336efd16f60e01b8152600481018290523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906336efd16f90604401600060405180830381600087803b15801561031b57600080fd5b505af115801561032f573d6000803e3d6000fd5b505050505050565b8015806103c05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561038657600080fd5b505afa15801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be919061070b565b155b6104305760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610482908490610487565b505050565b60006104dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105599092919063ffffffff16565b80519091501561048257808060200190518101906104fa91906106d3565b6104825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610427565b60606105688484600085610572565b90505b9392505050565b6060824710156105d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610427565b843b6106215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610427565b600080866001600160a01b0316858760405161063d9190610723565b60006040518083038185875af1925050503d806000811461067a576040519150601f19603f3d011682016040523d82523d6000602084013e61067f565b606091505b509150915061068f82828661069a565b979650505050505050565b606083156106a957508161056b565b8251156106b95782518084602001fd5b8160405162461bcd60e51b8152600401610427919061073f565b6000602082840312156106e4578081fd5b8151801515811461056b578182fd5b600060208284031215610704578081fd5b5035919050565b60006020828403121561071c578081fd5b5051919050565b60008251610735818460208701610772565b9190910192915050565b602081526000825180602084015261075e816040850160208701610772565b601f01601f19169190910160400192915050565b60005b8381101561078d578181015183820152602001610775565b8381111561079c576000848401525b5050505056fea2646970667358221220191507724694a8fdfa34f03a1a87e3bfa2c2143fc539205b1ada14d8f4d9cbd664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256)": {
        "notice": "Swaps ETH -> stETH on Curve ETH-stETH pool, and deposits into stETH vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}