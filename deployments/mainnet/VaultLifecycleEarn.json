{
  "address": "0xa85d600Ad1FbeAcCc5b418d0B8D6421D057Cb8e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "optionSeller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "nextLoanTermLength",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextOptionPurchaseFreq",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentLoanTermLength",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentOptionPurchaseFreq",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "loanAllocationPCT",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "optionAllocationPCT",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "loanAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optionAllocation",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.AllocationState",
          "name": "_allocationState",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "totalPCT",
          "type": "uint256"
        }
      ],
      "name": "verifyInitializerParams",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ab29a3ca295e8318926c116ff47848a3319fe6a43fbc1dbc7accac54bf9b5c9",
  "receipt": {
    "to": null,
    "from": "0xF8368119Bb1073Cf01B841848725d81b542A4c19",
    "contractAddress": "0xa85d600Ad1FbeAcCc5b418d0B8D6421D057Cb8e4",
    "transactionIndex": 122,
    "gasUsed": "752496",
    "logsBloom": "0x
    "blockHash": "0x26a1d091413bf9e80bff4566e22ff1437c26e80bb617cc8ec9a7b78dcf3448ab",
    "transactionHash": "0x7ab29a3ca295e8318926c116ff47848a3319fe6a43fbc1dbc7accac54bf9b5c9",
    "logs": [],
    "blockNumber": 15394078,
    "cumulativeGasUsed": "7062894",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "aea08653589e280d2c753cb6657f208b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionSeller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nextLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"optionAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loanAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAllocation\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.AllocationState\",\"name\":\"_allocationState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalPCT\",\"type\":\"uint256\"}],\"name\":\"verifyInitializerParams\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rollover(Vault.VaultState storage,VaultLifecycleEarn.RolloverParams)\":{\"params\":{\"params\":\"is the rollover parameters passed to compute the next state\",\"vaultState\":\"is the storage variable vaultState passed from RibbonVault\"},\"returns\":{\"mintShares\":\"is the amount of shares to mint from deposits\",\"newLockedAmount\":\"is the amount of funds to allocate for the new round\",\"newPricePerShare\":\"is the price per share of the new round\",\"performanceFeeInAsset\":\"is the performance fee charged by vault\",\"queuedWithdrawAmount\":\"is the amount of funds set aside for withdrawal\",\"totalVaultFee\":\"is the total amount of fee charged by vault\"}},\"verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams,Vault.AllocationState,uint256)\":{\"params\":{\"_allocationState\":\"is the struct with vault loan/option allocation data\",\"_vaultParams\":\"is the struct with vault general data\",\"feeRecipient\":\"is the address to recieve vault performance and management fees\",\"optionSeller\":\"is the address of the entity that we will be buying options from (EX: Orbit)\",\"performanceFee\":\"is the perfomance fee pct.\",\"tokenName\":\"is the name of the token\",\"tokenSymbol\":\"is the symbol of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rollover(Vault.VaultState storage,VaultLifecycleEarn.RolloverParams)\":{\"notice\":\"Calculate the shares to mint, new price per share, and amount of funds to re-allocate as collateral for the new round\"},\"verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams,Vault.AllocationState,uint256)\":{\"notice\":\"Verify the constructor params satisfy requirements\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VaultLifecycleEarn.sol\":\"VaultLifecycleEarn\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return (assetAmount * (10**decimals)) / assetPerShare;\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return (shares * assetPerShare) / (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return uint256(depositReceipt.unredeemedShares) + sharesFromRound;\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? (singleShare * (totalBalance - pendingAmount)) / totalSupply\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4f965ae34cc89615f40341a5b1cc0e494a3d9190ddfe72eb9ef9920c529ce22c\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Yield is scaled by 100 (10 ** 2) for PCT.\\n    uint256 internal constant YIELD_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in vault\\n        address asset;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct AllocationState {\\n        // Next Loan Term Length\\n        uint32 nextLoanTermLength;\\n        // Next Option Purchase Frequency\\n        uint32 nextOptionPurchaseFreq;\\n        // Current Loan Term Length\\n        uint32 currentLoanTermLength;\\n        // Current Option Purchase Frequency\\n        uint32 currentOptionPurchaseFreq;\\n        // Current Loan Allocation Percent\\n        uint32 loanAllocationPCT;\\n        // Current Option Purchase Allocation Percent\\n        uint32 optionAllocationPCT;\\n        // Loan Allocation in USD\\n        uint256 loanAllocation;\\n        // Option Purchase Allocation across all purchases\\n        uint256 optionAllocation;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for the strategy\\n        uint104 lockedAmount;\\n        // Amount that was locked for the strategy in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n        // Last Loan Allocation Date\\n        uint64 lastEpochTime;\\n        // Last Option Purchase Date\\n        uint64 lastOptionPurchaseTime;\\n        // Amount of options bought in current round\\n        uint128 optionsBoughtInRound;\\n        // Amount of funds returned this round\\n        uint256 amtFundsReturned;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    /**\\n     * @param borrowerWeight is the borrow weight of the borrower\\n     * @param pendingBorrowerWeight is the pending borrow weight\\n     * @param exists is whether the borrower has already been added\\n     */\\n    struct BorrowerState {\\n        // Borrower exists\\n        bool exists;\\n        // Borrower weight\\n        uint128 borrowerWeight;\\n        // Borrower weight\\n        uint128 pendingBorrowerWeight;\\n    }\\n}\\n\",\"keccak256\":\"0xcde677696827effe2a52e85bec40cd1c430f97883f0d5959517768a1d980ed9f\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleEarn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\n\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\n\\nlibrary VaultLifecycleEarn {\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    /**\\n     * @param decimals is the decimals of the asset\\n     * @param totalBalance is the vaults total balance of the asset\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        // Deduct older queued withdraws so we don't charge fees on them\\n        uint256 balanceForVaultFees =\\n            currentBalance - params.lastQueuedWithdrawAmount;\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycleEarn\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance - totalVaultFee;\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply - lastQueuedWithdrawShares,\\n                currentBalance - params.lastQueuedWithdrawAmount,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            queuedWithdrawAmount =\\n                params.lastQueuedWithdrawAmount +\\n                ShareMath.sharesToAsset(\\n                    params.currentQueuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n        }\\n\\n        return (\\n            currentBalance - queuedWithdrawAmount, // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount ? currentBalance - pendingAmount : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? ((lockedBalanceSansPending - lastLockedAmount) *\\n                    performanceFeePercent) / (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? (lockedBalanceSansPending * managementFeePercent) /\\n                    (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset + _managementFeeInAsset;\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     * @param _allocationState is the struct with vault loan/option allocation data\\n     */\\n    function verifyInitializerParams(\\n        address keeper,\\n        address feeRecipient,\\n        address optionSeller,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams,\\n        Vault.AllocationState calldata _allocationState,\\n        uint256 totalPCT\\n    ) external pure {\\n        require(keeper != address(0), \\\"R7\\\");\\n        require(feeRecipient != address(0), \\\"R8\\\");\\n        require(optionSeller != address(0), \\\"R9\\\");\\n\\n        require(performanceFee < 100 * Vault.FEE_MULTIPLIER, \\\"R12\\\");\\n        require(managementFee < 100 * Vault.FEE_MULTIPLIER, \\\"R11\\\");\\n        require(bytes(tokenName).length > 0, \\\"R41\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"R42\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"R43\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"R44\\\");\\n        require(_vaultParams.cap > 0, \\\"R13\\\");\\n        require(_vaultParams.cap > _vaultParams.minimumSupply, \\\"R45\\\");\\n\\n        require(_allocationState.nextLoanTermLength == 0, \\\"R46\\\");\\n        require(_allocationState.nextOptionPurchaseFreq == 0, \\\"R47\\\");\\n        require(_allocationState.currentLoanTermLength >= 1 days, \\\"R48\\\");\\n        require(\\n            _allocationState.currentOptionPurchaseFreq > 0 &&\\n                _allocationState.currentOptionPurchaseFreq <=\\n                _allocationState.currentLoanTermLength,\\n            \\\"R49\\\"\\n        );\\n        require(\\n            uint256(_allocationState.loanAllocationPCT) +\\n                _allocationState.optionAllocationPCT <=\\n                totalPCT,\\n            \\\"R50\\\"\\n        );\\n        require(_allocationState.loanAllocation == 0, \\\"R1\\\");\\n        require(_allocationState.optionAllocation == 0, \\\"R2\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3d014f7922edbcc996ffa17a57c7b419695d6efe1900a73b7025f79ab34600bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610ca461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80632b8b58cf1461004557806349bec63414610089575b600080fd5b610058610053366004610a54565b61009e565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00160405180910390f35b61009c61009736600461096c565b6101b5565b005b6001820154600090819081908190819081906020880135906001600160801b0380821691600160801b900416836100d960608c013585610c41565b9050610130818d600001600f9054906101000a90046001600160681b03166001600160681b03168e60010160009054906101000a90046001600160801b03166001600160801b03168e608001358f60a001356106ea565b91975090955061014290508585610c41565b935061016b6101558360408e0135610c41565b61016360608e013587610c41565b858e356107a7565b975061017d60c08c0135898d356107ee565b61018b9060608d0135610afd565b985061019983898d3561085f565b96506101a58985610c41565b9950505050509295509295509295565b6001600160a01b038c166101f55760405162461bcd60e51b8152602060048201526002602482015261523760f01b60448201526064015b60405180910390fd5b6001600160a01b038b166102305760405162461bcd60e51b81526020600482015260026024820152610a4760f31b60448201526064016101ec565b6001600160a01b038a1661026b5760405162461bcd60e51b8152602060048201526002602482015261523960f01b60448201526064016101ec565b610279620f42406064610c22565b89106102ad5760405162461bcd60e51b815260206004820152600360248201526229189960e91b60448201526064016101ec565b6102bb620f42406064610c22565b88106102ef5760405162461bcd60e51b815260206004820152600360248201526252313160e81b60448201526064016101ec565b856103225760405162461bcd60e51b815260206004820152600360248201526252343160e81b60448201526064016101ec565b836103555760405162461bcd60e51b8152602060048201526003602482015262291a1960e91b60448201526064016101ec565b6000610367604085016020860161094b565b6001600160a01b031614156103a45760405162461bcd60e51b815260206004820152600360248201526252343360e81b60448201526064016101ec565b60006103b66060850160408601610ad6565b66ffffffffffffff16116103f25760405162461bcd60e51b8152602060048201526003602482015262148d0d60ea1b60448201526064016101ec565b60006104046080850160608601610a8b565b6001600160681b0316116104405760405162461bcd60e51b815260206004820152600360248201526252313360e81b60448201526064016101ec565b6104506060840160408501610ad6565b66ffffffffffffff166104696080850160608601610a8b565b6001600160681b0316116104a55760405162461bcd60e51b815260206004820152600360248201526252343560e81b60448201526064016101ec565b6104b26020830183610ab2565b63ffffffff16156104eb5760405162461bcd60e51b8152602060048201526003602482015262291a1b60e91b60448201526064016101ec565b6104fb6040830160208401610ab2565b63ffffffff16156105345760405162461bcd60e51b815260206004820152600360248201526252343760e81b60448201526064016101ec565b620151806105486060840160408501610ab2565b63ffffffff1610156105825760405162461bcd60e51b81526020600482015260036024820152620a468760eb1b60448201526064016101ec565b60006105946080840160608501610ab2565b63ffffffff161180156105d157506105b26060830160408401610ab2565b63ffffffff166105c86080840160608501610ab2565b63ffffffff1611155b6106035760405162461bcd60e51b815260206004820152600360248201526252343960e81b60448201526064016101ec565b8061061460c0840160a08501610ab2565b63ffffffff1661062a60a0850160808601610ab2565b63ffffffff1661063a9190610afd565b111561066e5760405162461bcd60e51b815260206004820152600360248201526205235360ec1b60448201526064016101ec565b60c0820135156106a55760405162461bcd60e51b8152602060048201526002602482015261523160f01b60448201526064016101ec565b60e0820135156106dc5760405162461bcd60e51b8152602060048201526002602482015261291960f11b60448201526064016101ec565b505050505050505050505050565b6000806000808689116106fe576000610708565b610708878a610c41565b905060008060008a8411156107955760008911610726576000610753565b610734620f42406064610c22565b8961073f8d87610c41565b6107499190610c22565b6107539190610b15565b925060008811610764576000610786565b610772620f42406064610c22565b61077c8986610c22565b6107869190610b15565b91506107928284610afd565b90505b919b909a509098509650505050505050565b6000806107b583600a610b78565b9050600086116107c557806107e4565b856107d08587610c41565b6107da9083610c22565b6107e49190610b15565b9695505050505050565b6000600183116108385760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016101ec565b61084382600a610b78565b61084d8486610c22565b6108579190610b15565b949350505050565b6000600183116108a95760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016101ec565b826108b583600a610b78565b61084d9086610c22565b80356001600160a01b03811681146108d657600080fd5b919050565b60008083601f8401126108ec578182fd5b50813567ffffffffffffffff811115610903578182fd5b60208301915083602082850101111561091b57600080fd5b9250929050565b60006101008284031215610934578081fd5b50919050565b600060808284031215610934578081fd5b60006020828403121561095c578081fd5b610965826108bf565b9392505050565b6000806000806000806000806000806000806102808d8f03121561098e578788fd5b6109978d6108bf565b9b506109a560208e016108bf565b9a506109b360408e016108bf565b995060608d0135985060808d0135975067ffffffffffffffff60a08e013511156109db578687fd5b6109eb8e60a08f01358f016108db565b909750955067ffffffffffffffff60c08e01351115610a08578485fd5b610a188e60c08f01358f016108db565b9095509350610a2a8e60e08f0161093a565b9250610a3a8e6101608f01610922565b91506102608d013590509295989b509295989b509295989b565b600080828403610100811215610a68578283fd5b8335925060e0601f1982011215610a7d578182fd5b506020830190509250929050565b600060208284031215610a9c578081fd5b81356001600160681b0381168114610965578182fd5b600060208284031215610ac3578081fd5b813563ffffffff81168114610965578182fd5b600060208284031215610ae7578081fd5b813566ffffffffffffff81168114610965578182fd5b60008219821115610b1057610b10610c58565b500190565b600082610b3057634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610b70578160001904821115610b5657610b56610c58565b80851615610b6357918102915b93841c9390800290610b3a565b509250929050565b60006109658383600082610b8e57506001610c1c565b81610b9b57506000610c1c565b8160018114610bb15760028114610bbb57610bd7565b6001915050610c1c565b60ff841115610bcc57610bcc610c58565b50506001821b610c1c565b5060208310610133831016604e8410600b8410161715610bfa575081810a610c1c565b610c048383610b35565b8060001904821115610c1857610c18610c58565b0290505b92915050565b6000816000190483118215151615610c3c57610c3c610c58565b500290565b600082821015610c5357610c53610c58565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ed9236bf9ae4ee297e517acee49ae490d413a75b76072f663ae022f16204140c64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80632b8b58cf1461004557806349bec63414610089575b600080fd5b610058610053366004610a54565b61009e565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00160405180910390f35b61009c61009736600461096c565b6101b5565b005b6001820154600090819081908190819081906020880135906001600160801b0380821691600160801b900416836100d960608c013585610c41565b9050610130818d600001600f9054906101000a90046001600160681b03166001600160681b03168e60010160009054906101000a90046001600160801b03166001600160801b03168e608001358f60a001356106ea565b91975090955061014290508585610c41565b935061016b6101558360408e0135610c41565b61016360608e013587610c41565b858e356107a7565b975061017d60c08c0135898d356107ee565b61018b9060608d0135610afd565b985061019983898d3561085f565b96506101a58985610c41565b9950505050509295509295509295565b6001600160a01b038c166101f55760405162461bcd60e51b8152602060048201526002602482015261523760f01b60448201526064015b60405180910390fd5b6001600160a01b038b166102305760405162461bcd60e51b81526020600482015260026024820152610a4760f31b60448201526064016101ec565b6001600160a01b038a1661026b5760405162461bcd60e51b8152602060048201526002602482015261523960f01b60448201526064016101ec565b610279620f42406064610c22565b89106102ad5760405162461bcd60e51b815260206004820152600360248201526229189960e91b60448201526064016101ec565b6102bb620f42406064610c22565b88106102ef5760405162461bcd60e51b815260206004820152600360248201526252313160e81b60448201526064016101ec565b856103225760405162461bcd60e51b815260206004820152600360248201526252343160e81b60448201526064016101ec565b836103555760405162461bcd60e51b8152602060048201526003602482015262291a1960e91b60448201526064016101ec565b6000610367604085016020860161094b565b6001600160a01b031614156103a45760405162461bcd60e51b815260206004820152600360248201526252343360e81b60448201526064016101ec565b60006103b66060850160408601610ad6565b66ffffffffffffff16116103f25760405162461bcd60e51b8152602060048201526003602482015262148d0d60ea1b60448201526064016101ec565b60006104046080850160608601610a8b565b6001600160681b0316116104405760405162461bcd60e51b815260206004820152600360248201526252313360e81b60448201526064016101ec565b6104506060840160408501610ad6565b66ffffffffffffff166104696080850160608601610a8b565b6001600160681b0316116104a55760405162461bcd60e51b815260206004820152600360248201526252343560e81b60448201526064016101ec565b6104b26020830183610ab2565b63ffffffff16156104eb5760405162461bcd60e51b8152602060048201526003602482015262291a1b60e91b60448201526064016101ec565b6104fb6040830160208401610ab2565b63ffffffff16156105345760405162461bcd60e51b815260206004820152600360248201526252343760e81b60448201526064016101ec565b620151806105486060840160408501610ab2565b63ffffffff1610156105825760405162461bcd60e51b81526020600482015260036024820152620a468760eb1b60448201526064016101ec565b60006105946080840160608501610ab2565b63ffffffff161180156105d157506105b26060830160408401610ab2565b63ffffffff166105c86080840160608501610ab2565b63ffffffff1611155b6106035760405162461bcd60e51b815260206004820152600360248201526252343960e81b60448201526064016101ec565b8061061460c0840160a08501610ab2565b63ffffffff1661062a60a0850160808601610ab2565b63ffffffff1661063a9190610afd565b111561066e5760405162461bcd60e51b815260206004820152600360248201526205235360ec1b60448201526064016101ec565b60c0820135156106a55760405162461bcd60e51b8152602060048201526002602482015261523160f01b60448201526064016101ec565b60e0820135156106dc5760405162461bcd60e51b8152602060048201526002602482015261291960f11b60448201526064016101ec565b505050505050505050505050565b6000806000808689116106fe576000610708565b610708878a610c41565b905060008060008a8411156107955760008911610726576000610753565b610734620f42406064610c22565b8961073f8d87610c41565b6107499190610c22565b6107539190610b15565b925060008811610764576000610786565b610772620f42406064610c22565b61077c8986610c22565b6107869190610b15565b91506107928284610afd565b90505b919b909a509098509650505050505050565b6000806107b583600a610b78565b9050600086116107c557806107e4565b856107d08587610c41565b6107da9083610c22565b6107e49190610b15565b9695505050505050565b6000600183116108385760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016101ec565b61084382600a610b78565b61084d8486610c22565b6108579190610b15565b949350505050565b6000600183116108a95760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016101ec565b826108b583600a610b78565b61084d9086610c22565b80356001600160a01b03811681146108d657600080fd5b919050565b60008083601f8401126108ec578182fd5b50813567ffffffffffffffff811115610903578182fd5b60208301915083602082850101111561091b57600080fd5b9250929050565b60006101008284031215610934578081fd5b50919050565b600060808284031215610934578081fd5b60006020828403121561095c578081fd5b610965826108bf565b9392505050565b6000806000806000806000806000806000806102808d8f03121561098e578788fd5b6109978d6108bf565b9b506109a560208e016108bf565b9a506109b360408e016108bf565b995060608d0135985060808d0135975067ffffffffffffffff60a08e013511156109db578687fd5b6109eb8e60a08f01358f016108db565b909750955067ffffffffffffffff60c08e01351115610a08578485fd5b610a188e60c08f01358f016108db565b9095509350610a2a8e60e08f0161093a565b9250610a3a8e6101608f01610922565b91506102608d013590509295989b509295989b509295989b565b600080828403610100811215610a68578283fd5b8335925060e0601f1982011215610a7d578182fd5b506020830190509250929050565b600060208284031215610a9c578081fd5b81356001600160681b0381168114610965578182fd5b600060208284031215610ac3578081fd5b813563ffffffff81168114610965578182fd5b600060208284031215610ae7578081fd5b813566ffffffffffffff81168114610965578182fd5b60008219821115610b1057610b10610c58565b500190565b600082610b3057634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610b70578160001904821115610b5657610b56610c58565b80851615610b6357918102915b93841c9390800290610b3a565b509250929050565b60006109658383600082610b8e57506001610c1c565b81610b9b57506000610c1c565b8160018114610bb15760028114610bbb57610bd7565b6001915050610c1c565b60ff841115610bcc57610bcc610c58565b50506001821b610c1c565b5060208310610133831016604e8410600b8410161715610bfa575081810a610c1c565b610c048383610b35565b8060001904821115610c1857610c18610c58565b0290505b92915050565b6000816000190483118215151615610c3c57610c3c610c58565b500290565b600082821015610c5357610c53610c58565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ed9236bf9ae4ee297e517acee49ae490d413a75b76072f663ae022f16204140c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rollover(Vault.VaultState storage,VaultLifecycleEarn.RolloverParams)": {
        "params": {
          "params": "is the rollover parameters passed to compute the next state",
          "vaultState": "is the storage variable vaultState passed from RibbonVault"
        },
        "returns": {
          "mintShares": "is the amount of shares to mint from deposits",
          "newLockedAmount": "is the amount of funds to allocate for the new round",
          "newPricePerShare": "is the price per share of the new round",
          "performanceFeeInAsset": "is the performance fee charged by vault",
          "queuedWithdrawAmount": "is the amount of funds set aside for withdrawal",
          "totalVaultFee": "is the total amount of fee charged by vault"
        }
      },
      "verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams,Vault.AllocationState,uint256)": {
        "params": {
          "_allocationState": "is the struct with vault loan/option allocation data",
          "_vaultParams": "is the struct with vault general data",
          "feeRecipient": "is the address to recieve vault performance and management fees",
          "optionSeller": "is the address of the entity that we will be buying options from (EX: Orbit)",
          "performanceFee": "is the perfomance fee pct.",
          "tokenName": "is the name of the token",
          "tokenSymbol": "is the symbol of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rollover(Vault.VaultState storage,VaultLifecycleEarn.RolloverParams)": {
        "notice": "Calculate the shares to mint, new price per share, and amount of funds to re-allocate as collateral for the new round"
      },
      "verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams,Vault.AllocationState,uint256)": {
        "notice": "Verify the constructor params satisfy requirements"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}