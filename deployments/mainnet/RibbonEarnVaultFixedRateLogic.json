{
  "address": "0x7a8BfDc7b8FA02c7860b8AFb4503A10a57d0100F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint128[]",
          "name": "borrowerWeights",
          "type": "uint128[]"
        }
      ],
      "name": "BorrowerBasketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "CloseLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrowerWeight",
          "type": "uint256"
        }
      ],
      "name": "CommitBorrowerBasket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLoanAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOptionAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoanAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOptionAllocation",
          "type": "uint256"
        }
      ],
      "name": "NewAllocationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLoanTermLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLoanTermLength",
          "type": "uint256"
        }
      ],
      "name": "NewLoanTermLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOptionPurchaseFrequency",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOptionPurchaseFrequency",
          "type": "uint256"
        }
      ],
      "name": "NewOptionPurchaseFrequency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "OpenLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOptionSeller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOptionSeller",
          "type": "address"
        }
      ],
      "name": "OptionSellerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netYield",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "PayOptionYield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "PurchaseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_PCT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationState",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "nextLoanTermLength",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionPurchaseFreq",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentLoanTermLength",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentOptionPurchaseFreq",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "loanAllocationPCT",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "optionAllocationPCT",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "loanAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionAllocation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerWeights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "borrowerWeight",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "pendingBorrowerWeight",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitOptionSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentQueuedWithdrawShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_keeper",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "_borrowers",
              "type": "address[]"
            },
            {
              "internalType": "uint128[]",
              "name": "_borrowerWeights",
              "type": "uint128[]"
            },
            {
              "internalType": "address",
              "name": "_optionSeller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_tokenSymbol",
              "type": "string"
            }
          ],
          "internalType": "struct RibbonEarnVaultFixedRate.InitParams",
          "name": "_initParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "nextLoanTermLength",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextOptionPurchaseFreq",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentLoanTermLength",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentOptionPurchaseFreq",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "loanAllocationPCT",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "optionAllocationPCT",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "loanAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optionAllocation",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.AllocationState",
          "name": "_allocationState",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBorrowerBasketChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastOptionSellerChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionSeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOptionYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "payOptionYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOptionSeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "returnLentFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "returnLentFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollToNextRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanAllocationPCT",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_optionAllocationPCT",
          "type": "uint32"
        }
      ],
      "name": "setAllocationPCT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidityGauge",
          "type": "address"
        }
      ],
      "name": "setLiquidityGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanTermLength",
          "type": "uint32"
        }
      ],
      "name": "setLoanTermLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_optionPurchaseFreq",
          "type": "uint32"
        }
      ],
      "name": "setOptionPurchaseFrequency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOptionSeller",
          "type": "address"
        }
      ],
      "name": "setOptionSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVaultPauser",
          "type": "address"
        }
      ],
      "name": "setVaultPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowerWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "borrowerWeights",
          "type": "uint128[]"
        }
      ],
      "name": "updateBorrowerBasket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "lastEpochTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastOptionPurchaseTime",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "optionsBoughtInRound",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "amtFundsReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3bc95bbe63b2c0687c4f194cd601af0446baa959d052b3101db67657c1be1def",
  "receipt": {
    "to": null,
    "from": "0xF8368119Bb1073Cf01B841848725d81b542A4c19",
    "contractAddress": "0x7a8BfDc7b8FA02c7860b8AFb4503A10a57d0100F",
    "transactionIndex": 50,
    "gasUsed": "5076761",
    "logsBloom": "0x
    "blockHash": "0x0204a790f710759b7c48b2261ef7615053e7f9cd77e090c7dd7767dd182819e6",
    "transactionHash": "0x3bc95bbe63b2c0687c4f194cd601af0446baa959d052b3101db67657c1be1def",
    "logs": [],
    "blockNumber": 16042988,
    "cumulativeGasUsed": "8434092",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "26706e2a217b2e350989530907619f99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"borrowerWeights\",\"type\":\"uint128[]\"}],\"name\":\"BorrowerBasketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"CloseLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrowerWeight\",\"type\":\"uint256\"}],\"name\":\"CommitBorrowerBasket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOptionAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptionAllocation\",\"type\":\"uint256\"}],\"name\":\"NewAllocationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanTermLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanTermLength\",\"type\":\"uint256\"}],\"name\":\"NewLoanTermLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOptionPurchaseFrequency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptionPurchaseFrequency\",\"type\":\"uint256\"}],\"name\":\"NewOptionPurchaseFrequency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"OpenLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOptionSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOptionSeller\",\"type\":\"address\"}],\"name\":\"OptionSellerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netYield\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"PayOptionYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"PurchaseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_PCT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationState\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"nextLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"optionAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loanAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerWeights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"borrowerWeight\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingBorrowerWeight\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitOptionSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentQueuedWithdrawShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_borrowers\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_borrowerWeights\",\"type\":\"uint128[]\"},{\"internalType\":\"address\",\"name\":\"_optionSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct RibbonEarnVaultFixedRate.InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nextLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentLoanTermLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentOptionPurchaseFreq\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"optionAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loanAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionAllocation\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.AllocationState\",\"name\":\"_allocationState\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBorrowerBasketChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOptionSellerChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOptionYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"payOptionYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOptionSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnLentFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"returnLentFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollToNextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanAllocationPCT\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_optionAllocationPCT\",\"type\":\"uint32\"}],\"name\":\"setAllocationPCT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanTermLength\",\"type\":\"uint32\"}],\"name\":\"setLoanTermLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_optionPurchaseFreq\",\"type\":\"uint32\"}],\"name\":\"setOptionPurchaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOptionSeller\",\"type\":\"address\"}],\"name\":\"setOptionSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVaultPauser\",\"type\":\"address\"}],\"name\":\"setVaultPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"borrowerWeights\",\"type\":\"uint128[]\"}],\"name\":\"updateBorrowerBasket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastEpochTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastOptionPurchaseTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"optionsBoughtInRound\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amtFundsReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"depositFor(uint256,address)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"deadline\":\"must be a timestamp in the future\",\"r\":\"is a valid signature\",\"s\":\"is a valid signature\",\"v\":\"is a valid signature\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize((address,address,address[],uint128[],address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256))\":{\"params\":{\"_allocationState\":\"is the struct with vault loan/option allocation data\",\"_initParams\":\"is the struct with vault initialization parameters\",\"_vaultParams\":\"is the struct with vault general data\"}},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payOptionYield(uint256)\":{\"params\":{\"amount\":\"is the amount of yield to pay\"}},\"payOptionYield(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"is the amount of yield to pay\",\"deadline\":\"must be a timestamp in the future\",\"r\":\"is a valid signature\",\"s\":\"is a valid signature\",\"v\":\"is a valid signature\"}},\"recoverTokens(address,address)\":{\"params\":{\"recipient\":\"is the recipient of the recovered tokens\",\"token\":\"is the ERC20 token to recover from the vault\"}},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"returnLentFunds(uint256)\":{\"params\":{\"amount\":\"is the amount to return (principal + interest)\"}},\"returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"is the amount to return (principal + interest)\",\"deadline\":\"must be a timestamp in the future\",\"r\":\"is a valid signature\",\"s\":\"is a valid signature\",\"v\":\"is a valid signature\"}},\"setAllocationPCT(uint32,uint32)\":{\"details\":\"Can be called by admin\",\"params\":{\"_loanAllocationPCT\":\"new allocation for loan\",\"_optionAllocationPCT\":\"new allocation for option\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setLiquidityGauge(address)\":{\"params\":{\"newLiquidityGauge\":\"is the address of the new liquidityGauge contract\"}},\"setLoanTermLength(uint32)\":{\"details\":\"Can be called by admin\",\"params\":{\"_loanTermLength\":\"new loan term length\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setOptionPurchaseFrequency(uint32)\":{\"details\":\"Can be called by admin\",\"params\":{\"_optionPurchaseFreq\":\"new option purchase frequency\"}},\"setOptionSeller(address)\":{\"params\":{\"newOptionSeller\":\"is the address of the new option seller\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setVaultPauser(address)\":{\"params\":{\"newVaultPauser\":\"is the address of the new vaultPauser contract\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"stake(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to stake\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBorrowerBasket(address[],uint128[])\":{\"params\":{\"borrowerWeights\":\"is the array of corresponding borrow weights for the borrower\",\"borrowers\":\"is the array of borrowers to update\"}},\"withdrawInstantly(uint256)\":{\"params\":{\"amount\":\"is the amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"allocationState()\":{\"notice\":\"Vault's state of the allocation between lending and buying options\"},\"borrowerWeights(address)\":{\"notice\":\"borrowerMapping is the mapping from borrower to their borrow weight. EX: {Wintermute -> 0.4, GSR -> 0.2}\"},\"borrowers(uint256)\":{\"notice\":\"borrowers is the array of borrowing addresses (EX: Wintermute, GSR, Alameda, Genesis)\"},\"buyOption()\":{\"notice\":\"Buys the option by transferring premiums to option seller\"},\"commitOptionSeller()\":{\"notice\":\"Commits the option seller\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"currentQueuedWithdrawShares()\":{\"notice\":\"Queued withdraw shares for the current round\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposits the `asset` from msg.sender without an approve `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initialize((address,address,address[],uint128[],address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextRound and burnRemainingOTokens\"},\"lastBorrowerBasketChange()\":{\"notice\":\"lastBorrowerBasketChange is the last time the basket of borrowers was changed (add / remove / set)\"},\"lastOptionSellerChange()\":{\"notice\":\"lastOptionSellerChange is the last time option seller was set\"},\"lastQueuedWithdrawAmount()\":{\"notice\":\"Amount locked for scheduled withdrawals last week;\"},\"liquidityGauge()\":{\"notice\":\"LiquidityGauge contract for the vault\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextRound. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"optionSeller()\":{\"notice\":\"optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\"},\"pausePosition()\":{\"notice\":\"pause a user's vault position\"},\"payOptionYield(uint256)\":{\"notice\":\"Pays option yield if option is ITM\"},\"payOptionYield(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Pays option yield if option is ITM `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments\"},\"pendingOptionSeller()\":{\"notice\":\"pendingOptionSeller is the pending address of the entity that we will be buying options from (EX: Orbit)\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextRound. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"recoverTokens(address,address)\":{\"notice\":\"Recovery function that returns an ERC20 token to the recipient\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"returnLentFunds(uint256)\":{\"notice\":\"Return lend funds\"},\"returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Return lend funds `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments\"},\"rollToNextRound()\":{\"notice\":\"Rolls the vault's funds into a new short position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setAllocationPCT(uint32,uint32)\":{\"notice\":\"Sets new loan and option allocation percentage\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setLiquidityGauge(address)\":{\"notice\":\"Sets the new liquidityGauge contract for this vault\"},\"setLoanTermLength(uint32)\":{\"notice\":\"Sets loan term length\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setOptionPurchaseFrequency(uint32)\":{\"notice\":\"Sets option purchase frequency\"},\"setOptionSeller(address)\":{\"notice\":\"Sets the new option seller\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"setVaultPauser(address)\":{\"notice\":\"Sets the new Vault Pauser contract for this vault\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"stake(uint256)\":{\"notice\":\"Stakes a users vault shares\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts lent out\"},\"totalBorrowerWeight()\":{\"notice\":\"totalBorrowerWeight is the total borrowing weight\"},\"updateBorrowerBasket(address[],uint128[])\":{\"notice\":\"Updates the basket of borrowers (this overrides current pending update to basket)\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultPauser()\":{\"notice\":\"Vault Pauser Contract for the vault\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonEarnVaultStorage. RibbonEarnVault should not inherit from any other contract aside from RibbonVault, RibbonEarnVaultStorage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol\":\"RibbonEarnVaultFixedRate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ILiquidityGauge {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\",\"keccak256\":\"0x0865aecb52ae4467761aa81e48957cde1c5486e270b4a671f8ff07861b801105\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IVaultPauser {\\n    /// @notice pause vault position of an account with max amount\\n    /// @param _account the address of user\\n    /// @param _amount amount of shares\\n    function pausePosition(address _account, uint256 _amount) external;\\n\\n    /// @notice resume vault position of an account with max amount\\n    /// @param _vaultAddress the address of vault\\n    function resumePosition(address _vaultAddress) external;\\n}\\n\",\"keccak256\":\"0x8327eccf3e134700dcf180baa109d55e2225fd3fa5bdfe0dcfc232973c7aa185\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return (assetAmount * (10**decimals)) / assetPerShare;\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return (shares * assetPerShare) / (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return uint256(depositReceipt.unredeemedShares) + sharesFromRound;\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? (singleShare * (totalBalance - pendingAmount)) / totalSupply\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4f965ae34cc89615f40341a5b1cc0e494a3d9190ddfe72eb9ef9920c529ce22c\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Yield is scaled by 100 (10 ** 2) for PCT.\\n    uint256 internal constant YIELD_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in vault\\n        address asset;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct AllocationState {\\n        // Next Loan Term Length\\n        uint32 nextLoanTermLength;\\n        // Next Option Purchase Frequency\\n        uint32 nextOptionPurchaseFreq;\\n        // Current Loan Term Length\\n        uint32 currentLoanTermLength;\\n        // Current Option Purchase Frequency\\n        uint32 currentOptionPurchaseFreq;\\n        // Current Loan Allocation Percent\\n        uint32 loanAllocationPCT;\\n        // Current Option Purchase Allocation Percent\\n        uint32 optionAllocationPCT;\\n        // Loan Allocation in USD\\n        uint256 loanAllocation;\\n        // Option Purchase Allocation across all purchases\\n        uint256 optionAllocation;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for the strategy\\n        uint104 lockedAmount;\\n        // Amount that was locked for the strategy in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n        // Last Loan Allocation Date\\n        uint64 lastEpochTime;\\n        // Last Option Purchase Date\\n        uint64 lastOptionPurchaseTime;\\n        // Amount of options bought in current round\\n        uint128 optionsBoughtInRound;\\n        // DEPRECATED FOR VARIABLE RATE\\n        // Amount of funds returned this round\\n        uint256 amtFundsReturned;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    /**\\n     * @param borrowerWeight is the borrow weight of the borrower\\n     * @param pendingBorrowerWeight is the pending borrow weight\\n     * @param exists is whether the borrower has already been added\\n     */\\n    struct BorrowerState {\\n        // Borrower exists\\n        bool exists;\\n        // Borrower weight\\n        uint128 borrowerWeight;\\n        // Borrower weight\\n        uint128 pendingBorrowerWeight;\\n    }\\n}\\n\",\"keccak256\":\"0x471ddcc34682652986eaf80e5bdcc8588438f969663d10be8b994e3980a04e9c\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleEarn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\n\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\n\\nlibrary VaultLifecycleEarn {\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    /**\\n     * @param decimals is the decimals of the asset\\n     * @param totalBalance is the vaults total balance of the asset\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        // Deduct older queued withdraws so we don't charge fees on them\\n        uint256 balanceForVaultFees =\\n            currentBalance - params.lastQueuedWithdrawAmount;\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycleEarn\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance - totalVaultFee;\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply - lastQueuedWithdrawShares,\\n                currentBalance - params.lastQueuedWithdrawAmount,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            queuedWithdrawAmount =\\n                params.lastQueuedWithdrawAmount +\\n                ShareMath.sharesToAsset(\\n                    params.currentQueuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n        }\\n\\n        return (\\n            currentBalance - queuedWithdrawAmount, // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount ? currentBalance - pendingAmount : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? ((lockedBalanceSansPending - lastLockedAmount) *\\n                    performanceFeePercent) / (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? (lockedBalanceSansPending * managementFeePercent) /\\n                    (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset + _managementFeeInAsset;\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     * @param _allocationState is the struct with vault loan/option allocation data\\n     */\\n    function verifyInitializerParams(\\n        address keeper,\\n        address feeRecipient,\\n        address optionSeller,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams,\\n        Vault.AllocationState calldata _allocationState,\\n        uint256 totalPCT\\n    ) external pure {\\n        require(keeper != address(0), \\\"R7\\\");\\n        require(feeRecipient != address(0), \\\"R8\\\");\\n        require(optionSeller != address(0), \\\"R9\\\");\\n\\n        require(performanceFee < 100 * Vault.FEE_MULTIPLIER, \\\"R12\\\");\\n        require(managementFee < 100 * Vault.FEE_MULTIPLIER, \\\"R11\\\");\\n        require(bytes(tokenName).length > 0, \\\"R41\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"R42\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"R43\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"R44\\\");\\n        require(_vaultParams.cap > 0, \\\"R13\\\");\\n        require(_vaultParams.cap > _vaultParams.minimumSupply, \\\"R45\\\");\\n\\n        require(_allocationState.nextLoanTermLength == 0, \\\"R46\\\");\\n        require(_allocationState.nextOptionPurchaseFreq == 0, \\\"R47\\\");\\n        require(_allocationState.currentLoanTermLength >= 1 days, \\\"R48\\\");\\n        require(\\n            _allocationState.currentOptionPurchaseFreq > 0 &&\\n                _allocationState.currentOptionPurchaseFreq <=\\n                _allocationState.currentLoanTermLength,\\n            \\\"R49\\\"\\n        );\\n        require(\\n            uint256(_allocationState.loanAllocationPCT) +\\n                _allocationState.optionAllocationPCT <=\\n                totalPCT,\\n            \\\"R50\\\"\\n        );\\n        require(_allocationState.loanAllocation == 0, \\\"R1\\\");\\n        require(_allocationState.optionAllocation == 0, \\\"R2\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3d014f7922edbcc996ffa17a57c7b419695d6efe1900a73b7025f79ab34600bc\",\"license\":\"MIT\"},\"contracts/storage/RibbonEarnVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\nabstract contract RibbonEarnVaultStorageV1 {\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the allocation between lending and buying options\\n    Vault.AllocationState public allocationState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextRound and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice borrowers is the array of borrowing addresses (EX: Wintermute, GSR, Alameda, Genesis)\\n    address[] public borrowers;\\n\\n    /// @notice borrowerMapping is the mapping from borrower to their borrow weight. EX: {Wintermute -> 0.4, GSR -> 0.2}\\n    mapping(address => Vault.BorrowerState) public borrowerWeights;\\n\\n    /// @notice totalBorrowerWeight is the total borrowing weight\\n    uint256 public totalBorrowerWeight;\\n\\n    /// @notice lastBorrowerBasketChange is the last time the basket of borrowers was changed (add / remove / set)\\n    uint256 public lastBorrowerBasketChange;\\n\\n    /// @notice optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n    address public optionSeller;\\n\\n    /// @notice pendingOptionSeller is the pending address of the entity that we will be buying options from (EX: Orbit)\\n    address public pendingOptionSeller;\\n\\n    /// @notice lastOptionSellerChange is the last time option seller was set\\n    uint256 public lastOptionSellerChange;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextRound. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextRound. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    /// @notice Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n\\n    /// @notice Queued withdraw shares for the current round\\n    uint256 public currentQueuedWithdrawShares;\\n\\n    /// @notice Vault Pauser Contract for the vault\\n    address public vaultPauser;\\n\\n    /// @notice LiquidityGauge contract for the vault\\n    address public liquidityGauge;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonEarnVaultStorage\\n// e.g. RibbonEarnVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonEarnVaultStorage is RibbonEarnVaultStorageV1, RibbonEarnVaultStorageV2\\nabstract contract RibbonEarnVaultStorage is RibbonEarnVaultStorageV1 {\\n\\n}\\n\",\"keccak256\":\"0x97dd968a809c3e89c01ced906bf1c936aecd24bc223a5c03ff61f31b33297dd3\",\"license\":\"MIT\"},\"contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Detailed} from \\\"../../interfaces/IERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\n\\nimport {RibbonEarnVaultStorage} from \\\"../../storage/RibbonEarnVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycleEarn} from \\\"../../libraries/VaultLifecycleEarn.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {ILiquidityGauge} from \\\"../../interfaces/ILiquidityGauge.sol\\\";\\nimport {IVaultPauser} from \\\"../../interfaces/IVaultPauser.sol\\\";\\n\\n/**\\n * Earn Vault Error Codes\\n * R1: loan allocation in USD must be 0\\n * R2: option allocation in USD must be 0\\n * R3: invalid owner address\\n * R4: msg.sender is not keeper\\n * R5: msg.sender borrower weight is 0\\n * R6: msg.sender is not option seller\\n * R7: invalid keeper address\\n * R8: invalid fee recipient address\\n * R9: invalid option seller\\n * R10: time lock still active\\n * R11: management fee greater than 100%\\n * R12: performance fee greater than 100%\\n * R13: deposit cap is zero\\n * R14: loan allocation is greater than 100%\\n * R15: loan term length is less than a day\\n * R16: option purchase frequency is zero\\n * R17: option purchase frequency is greater than loan term length\\n * R18: cannot use depositETH in non-eth vault\\n * R19: cannot use depositETH with msg.value = 0\\n * R20: vault asset is not USDC\\n * R21: deposit amount is 0\\n * R22: deposit amount exceeds vault cap\\n * R23: deposit amount less than minimum supply\\n * R24: cannot initiate withdraw on 0 shares\\n * R25: a withdraw has already been initiated\\n * R26: cannot complete withdraw when not initiated\\n * R27: cannot complete withdraw when round not closed yet\\n * R28: withdraw amount in complete withdraw is zero\\n * R29: cannot redeem zero shares\\n * R30: cannot redeem more shares than available\\n * R31: cannot instantly withdraw zero\\n * R32: cannot withdraw in current round\\n * R33: exceeding amount withdrawable instantly\\n * R34: purchasing option to early since last purchase\\u2028 * R35: vault asset not recoverable\\n * R36: vault share not recoverable\\n * R37: recipient cannot be vault\\n * R38: transfer failed\\u2028 * R39: premature roll to next round\\n * R40: array length mismatch\\n * R41: invalid token name\\n * R42: invalid token symbol\\n * R43: invalid vault asset\\n * R44: invalid vault minimum supply\\n * R45: deposit cap must be higher than minimum supply\\n * R46: next loan term length must be 0\\n * R47: next option purchase frequency must be 0\\n * R48: current loan term length must be >= 1 day\\n * R49: current option purchase freq must be < loan term length\\n * R50: loan pct + option pct == total PCT\\n * R51: invalid pending option seller\\n */\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonEarnVaultStorage.\\n * RibbonEarnVault should not inherit from any other contract aside from RibbonVault, RibbonEarnVaultStorage\\n */\\ncontract RibbonEarnVaultFixedRate is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable,\\n    RibbonEarnVaultStorage\\n{\\n    using SafeERC20 for IERC20;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonEarnVaultStorage.\\n    // Read this documentation to learn more:\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n    uint32 public constant TOTAL_PCT = 1000000; // Equals 100%\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event BorrowerBasketUpdated(address[] borrowers, uint128[] borrowerWeights);\\n\\n    event CommitBorrowerBasket(uint256 totalBorrowerWeight);\\n\\n    event OptionSellerSet(address oldOptionSeller, address newOptionSeller);\\n\\n    event NewAllocationSet(\\n        uint256 oldLoanAllocation,\\n        uint256 oldOptionAllocation,\\n        uint256 newLoanAllocation,\\n        uint256 newOptionAllocation\\n    );\\n\\n    event NewLoanTermLength(\\n        uint256 oldLoanTermLength,\\n        uint256 newLoanTermLength\\n    );\\n\\n    event NewOptionPurchaseFrequency(\\n        uint256 oldOptionPurchaseFrequency,\\n        uint256 newOptionPurchaseFrequency\\n    );\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    event OpenLoan(uint256 amount, address indexed borrower);\\n\\n    event CloseLoan(uint256 amount, uint256 yield, address indexed borrower);\\n\\n    event PurchaseOption(uint256 premium, address indexed seller);\\n\\n    event PayOptionYield(\\n        uint256 yield,\\n        uint256 netYield,\\n        address indexed seller\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    /************************************************\\n     *  STRUCTS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initialization parameters for the vault.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _borrowers is the addresses of the basket of borrowing entities (EX: Wintermute, GSR, Alameda, Genesis)\\n     * @param _borrowerWeights is the borrow weight of the addresses\\n     * @param _optionSeller is the address of the entity that we will be buying options from (EX: Orbit)\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     */\\n    struct InitParams {\\n        address _owner;\\n        address _keeper;\\n        address[] _borrowers;\\n        uint128[] _borrowerWeights;\\n        address _optionSeller;\\n        address _feeRecipient;\\n        uint256 _managementFee;\\n        uint256 _performanceFee;\\n        string _tokenName;\\n        string _tokenSymbol;\\n    }\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     * @param _vaultParams is the struct with vault general data\\n     * @param _allocationState is the struct with vault loan/option allocation data\\n     */\\n    function initialize(\\n        InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams,\\n        Vault.AllocationState calldata _allocationState\\n    ) external initializer {\\n        require(_initParams._owner != address(0), \\\"R3\\\");\\n\\n        VaultLifecycleEarn.verifyInitializerParams(\\n            _initParams._keeper,\\n            _initParams._feeRecipient,\\n            _initParams._optionSeller,\\n            _initParams._managementFee,\\n            _initParams._performanceFee,\\n            _initParams._tokenName,\\n            _initParams._tokenSymbol,\\n            _vaultParams,\\n            _allocationState,\\n            TOTAL_PCT\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_initParams._tokenName, _initParams._tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_initParams._owner);\\n\\n        keeper = _initParams._keeper;\\n\\n        feeRecipient = _initParams._feeRecipient;\\n        optionSeller = _initParams._optionSeller;\\n        performanceFee = _initParams._performanceFee;\\n        managementFee =\\n            (_initParams._managementFee * Vault.FEE_MULTIPLIER) /\\n            ((365 days * Vault.FEE_MULTIPLIER) /\\n                _allocationState.currentLoanTermLength);\\n        vaultParams = _vaultParams;\\n        allocationState = _allocationState;\\n\\n        _updateBorrowerBasket(\\n            _initParams._borrowers,\\n            _initParams._borrowerWeights\\n        );\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"R4\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the borrower.\\n     */\\n    modifier onlyBorrower() {\\n        require(borrowerWeights[msg.sender].borrowerWeight > 0, \\\"R5\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the option seller.\\n     */\\n    modifier onlyOptionSeller() {\\n        require(msg.sender == optionSeller, \\\"R6\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"R7\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"R8\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Updates the basket of borrowers (this overrides current pending update to basket)\\n     * @param borrowers is the array of borrowers to update\\n     * @param borrowerWeights is the array of corresponding borrow weights for the borrower\\n     */\\n    function updateBorrowerBasket(\\n        address[] calldata borrowers,\\n        uint128[] calldata borrowerWeights\\n    ) external onlyOwner {\\n        _updateBorrowerBasket(borrowers, borrowerWeights);\\n        lastBorrowerBasketChange = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Sets the new option seller\\n     * @param newOptionSeller is the address of the new option seller\\n     */\\n    function setOptionSeller(address newOptionSeller) external onlyOwner {\\n        require(newOptionSeller != address(0), \\\"R9\\\");\\n        emit OptionSellerSet(optionSeller, newOptionSeller);\\n        pendingOptionSeller = newOptionSeller;\\n        lastOptionSellerChange = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Commits the option seller\\n     */\\n    function commitOptionSeller() external onlyOwner {\\n        require(pendingOptionSeller != address(0), \\\"R51\\\");\\n\\n        optionSeller = pendingOptionSeller;\\n        pendingOptionSeller = address(0);\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(newManagementFee < 100 * Vault.FEE_MULTIPLIER, \\\"R11\\\");\\n\\n        // We are dividing annualized management fee by loanTermLength\\n        uint256 tmpManagementFee =\\n            (newManagementFee * Vault.FEE_MULTIPLIER) /\\n                ((365 days * Vault.FEE_MULTIPLIER) /\\n                    allocationState.currentLoanTermLength);\\n\\n        emit ManagementFeeSet(managementFee, tmpManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(newPerformanceFee < 100 * Vault.FEE_MULTIPLIER, \\\"R12\\\");\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"R13\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /**\\n     * @notice Sets new loan and option allocation percentage\\n     * @dev Can be called by admin\\n     * @param _loanAllocationPCT new allocation for loan\\n     * @param _optionAllocationPCT new allocation for option\\n     */\\n    function setAllocationPCT(\\n        uint32 _loanAllocationPCT,\\n        uint32 _optionAllocationPCT\\n    ) external onlyOwner {\\n        require(_loanAllocationPCT + _optionAllocationPCT <= TOTAL_PCT, \\\"R14\\\");\\n\\n        emit NewAllocationSet(\\n            uint256(allocationState.loanAllocationPCT),\\n            uint256(_loanAllocationPCT),\\n            uint256(allocationState.optionAllocationPCT),\\n            uint256(_optionAllocationPCT)\\n        );\\n\\n        allocationState.loanAllocationPCT = _loanAllocationPCT;\\n        allocationState.optionAllocationPCT = _optionAllocationPCT;\\n    }\\n\\n    /**\\n     * @notice Sets loan term length\\n     * @dev Can be called by admin\\n     * @param _loanTermLength new loan term length\\n     */\\n    function setLoanTermLength(uint32 _loanTermLength) external onlyOwner {\\n        require(_loanTermLength >= 1 days, \\\"R15\\\");\\n\\n        allocationState.nextLoanTermLength = _loanTermLength;\\n        emit NewLoanTermLength(\\n            allocationState.currentLoanTermLength,\\n            _loanTermLength\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets option purchase frequency\\n     * @dev Can be called by admin\\n     * @param _optionPurchaseFreq new option purchase frequency\\n     */\\n    function setOptionPurchaseFrequency(uint32 _optionPurchaseFreq)\\n        external\\n        onlyOwner\\n    {\\n        require(_optionPurchaseFreq > 0, \\\"R16\\\");\\n\\n        require(\\n            (allocationState.nextLoanTermLength == 0 &&\\n                _optionPurchaseFreq <= allocationState.currentLoanTermLength) ||\\n                _optionPurchaseFreq <= allocationState.nextLoanTermLength,\\n            \\\"R17\\\"\\n        );\\n        allocationState.nextOptionPurchaseFreq = _optionPurchaseFreq;\\n        emit NewOptionPurchaseFrequency(\\n            allocationState.currentOptionPurchaseFreq,\\n            _optionPurchaseFreq\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the new liquidityGauge contract for this vault\\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\\n     */\\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\\n        liquidityGauge = newLiquidityGauge;\\n    }\\n\\n    /**\\n     * @notice Sets the new Vault Pauser contract for this vault\\n     * @param newVaultPauser is the address of the new vaultPauser contract\\n     */\\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\\n        vaultPauser = newVaultPauser;\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender without an approve\\n     * `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments\\n     * @param amount is the amount of `asset` to deposit\\n     * @param deadline must be a timestamp in the future\\n     * @param v is a valid signature\\n     * @param r is a valid signature\\n     * @param s is a valid signature\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant {\\n        require(vaultParams.asset == USDC, \\\"R20\\\");\\n        require(amount > 0, \\\"R21\\\");\\n\\n        // Sign for transfer approval\\n        IERC20Permit(vaultParams.asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"R21\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"R21\\\");\\n        require(creditor != address(0));\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance() + amount;\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"R22\\\");\\n        require(totalWithDepositedAmount >= vaultParams.minimumSupply, \\\"R23\\\");\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount) + amount;\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending) + amount;\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function _initiateWithdraw(uint256 numShares) internal {\\n        require(numShares > 0, \\\"R24\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares + numShares;\\n        } else {\\n            require(existingShares == 0, \\\"R25\\\");\\n            withdrawalShares = numShares;\\n            withdrawal.round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawal.shares = uint128(withdrawalShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"R26\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"R27\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawal.shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares) - withdrawalShares\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"R29\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"R30\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares - numShares\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n        require(amount > 0, \\\"R31\\\");\\n        require(depositReceipt.round == currentRound, \\\"R32\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"R33\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount - amount);\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending) - amount\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        IERC20(vaultParams.asset).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        _initiateWithdraw(numShares);\\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares + numShares;\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n\\n        require(withdrawAmount > 0, \\\"R28\\\");\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount) - withdrawAmount\\n        );\\n        IERC20(vaultParams.asset).safeTransfer(msg.sender, withdrawAmount);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Stakes a users vault shares\\n     * @param numShares is the number of shares to stake\\n     */\\n    function stake(uint256 numShares) external nonReentrant {\\n        address _liquidityGauge = liquidityGauge;\\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\\n        require(numShares > 0);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        if (heldByAccount < numShares) {\\n            _redeem(numShares - heldByAccount, false);\\n        }\\n        _transfer(msg.sender, address(this), numShares);\\n        _approve(address(this), _liquidityGauge, numShares);\\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextRound() external onlyKeeper nonReentrant {\\n        vaultState.lastLockedAmount = uint104(vaultState.lockedAmount);\\n\\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\\n            _rollToNextRound();\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares) +\\n                currentQueuedWithdrawShares;\\n\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        currentQueuedWithdrawShares = 0;\\n\\n        ShareMath.assertUint104(lockedBalance);\\n\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n        vaultState.optionsBoughtInRound = 0;\\n        vaultState.amtFundsReturned = 0;\\n\\n        uint256 loanAllocation = allocationState.loanAllocation;\\n\\n        for (uint256 i = 0; i < borrowers.length; i++) {\\n            if (totalBorrowerWeight == 0) {\\n                break;\\n            }\\n\\n            // Amount to lending = total USD loan allocation * weight of current borrower / total weight of all borrowers\\n            uint256 amtToLendToBorrower =\\n                (loanAllocation *\\n                    borrowerWeights[borrowers[i]].borrowerWeight) /\\n                    totalBorrowerWeight;\\n\\n            if (amtToLendToBorrower == 0) {\\n                continue;\\n            }\\n\\n            // Lend funds to borrower\\n            IERC20(vaultParams.asset).safeTransfer(\\n                borrowers[i],\\n                amtToLendToBorrower\\n            );\\n\\n            emit OpenLoan(amtToLendToBorrower, borrowers[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Buys the option by transferring premiums to option seller\\n     */\\n    function buyOption() external onlyKeeper {\\n        require(\\n            vaultState.optionsBoughtInRound == 0 ||\\n                block.timestamp >=\\n                uint256(vaultState.lastOptionPurchaseTime) +\\n                    allocationState.currentOptionPurchaseFreq,\\n            \\\"R34\\\"\\n        );\\n\\n        uint256 optionAllocation =\\n            allocationState.optionAllocation /\\n                (uint256(allocationState.currentLoanTermLength) /\\n                    allocationState.currentOptionPurchaseFreq);\\n\\n        vaultState.optionsBoughtInRound += uint128(optionAllocation);\\n        vaultState.lastOptionPurchaseTime = uint64(\\n            block.timestamp - (block.timestamp % (24 hours)) + (8 hours)\\n        );\\n\\n        IERC20(vaultParams.asset).safeTransfer(optionSeller, optionAllocation);\\n\\n        emit PurchaseOption(optionAllocation, optionSeller);\\n    }\\n\\n    /**\\n     * @notice Pays option yield if option is ITM\\n     * `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments\\n     * @param amount is the amount of yield to pay\\n     * @param deadline must be a timestamp in the future\\n     * @param v is a valid signature\\n     * @param r is a valid signature\\n     * @param s is a valid signature\\n     */\\n    function payOptionYield(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external onlyOptionSeller {\\n        // Sign for transfer approval\\n        IERC20Permit(vaultParams.asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Pay option yields to contract\\n        _payOptionYield(amount);\\n    }\\n\\n    /**\\n     * @notice Pays option yield if option is ITM\\n     * @param amount is the amount of yield to pay\\n     */\\n    function payOptionYield(uint256 amount) external onlyOptionSeller {\\n        // Pay option yields to contract\\n        _payOptionYield(amount);\\n    }\\n\\n    /**\\n     * @notice Return lend funds\\n     * `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments\\n     * @param amount is the amount to return (principal + interest)\\n     * @param deadline must be a timestamp in the future\\n     * @param v is a valid signature\\n     * @param r is a valid signature\\n     * @param s is a valid signature\\n     */\\n    function returnLentFunds(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external onlyBorrower {\\n        // Sign for transfer approval\\n        IERC20Permit(vaultParams.asset).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        // Return lent funds\\n        _returnLentFunds(amount);\\n    }\\n\\n    /**\\n     * @notice Return lend funds\\n     * @param amount is the amount to return (principal + interest)\\n     */\\n    function returnLentFunds(uint256 amount) external onlyBorrower {\\n        // Return lent funds\\n        _returnLentFunds(amount);\\n    }\\n\\n    /**\\n     * @notice Recovery function that returns an ERC20 token to the recipient\\n     * @param token is the ERC20 token to recover from the vault\\n     * @param recipient is the recipient of the recovered tokens\\n     */\\n    function recoverTokens(address token, address recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(token != vaultParams.asset, \\\"R35\\\");\\n        require(token != address(this), \\\"R36\\\");\\n        require(recipient != address(this), \\\"R37\\\");\\n\\n        IERC20(token).safeTransfer(\\n            recipient,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice pause a user's vault position\\n     */\\n    function pausePosition() external {\\n        address _vaultPauserAddress = vaultPauser;\\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\\n        _redeem(0, true);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\\n        IVaultPauser(_vaultPauserAddress).pausePosition(\\n            msg.sender,\\n            heldByAccount\\n        );\\n    }\\n\\n    /**\\n     * @notice Helper function that performs most administrative tasks\\n     * such as minting new shares, getting vault fees, etc.\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextRound()\\n        internal\\n        returns (uint256 lockedBalance, uint256 queuedWithdrawAmount)\\n    {\\n        require(\\n            block.timestamp >=\\n                uint256(vaultState.lastEpochTime) +\\n                    allocationState.currentLoanTermLength,\\n            \\\"R39\\\"\\n        );\\n\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 performanceFeeInAsset;\\n        uint256 totalVaultFee;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                performanceFeeInAsset,\\n                totalVaultFee\\n            ) = VaultLifecycleEarn.rollover(\\n                vaultState,\\n                VaultLifecycleEarn.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee,\\n                    currentQueuedWithdrawShares\\n                )\\n            );\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n            vaultState.lastEpochTime = uint64(\\n                block.timestamp - (block.timestamp % (24 hours)) + (8 hours)\\n            );\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (totalVaultFee > 0) {\\n            IERC20(vaultParams.asset).safeTransfer(recipient, totalVaultFee);\\n        }\\n\\n        _updateAllocationState(lockedBalance);\\n        _commitBorrowerBasket();\\n\\n        return (lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function that transfers funds from option\\n     * seller\\n     * @param amount is the amount of yield to pay\\n     */\\n    function _payOptionYield(uint256 amount) internal {\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        uint256 optionAllocation =\\n            allocationState.optionAllocation /\\n                (uint256(allocationState.currentLoanTermLength) /\\n                    allocationState.currentOptionPurchaseFreq);\\n\\n        emit PayOptionYield(\\n            amount,\\n            amount > optionAllocation ? amount - optionAllocation : 0,\\n            msg.sender\\n        );\\n    }\\n\\n    function _returnLentFunds(uint256 amount) internal {\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        // Amount lent = total USD loan allocation * weight of current borrower / total weight of all borrowers\\n        uint256 loanAllocation =\\n            (allocationState.loanAllocation *\\n                borrowerWeights[msg.sender].borrowerWeight) /\\n                totalBorrowerWeight;\\n\\n        vaultState.amtFundsReturned += amount;\\n\\n        emit CloseLoan(\\n            amount,\\n            amount > loanAllocation ? amount - loanAllocation : 0,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice Helper function that updates allocation state\\n     * such as loan term length, option purchase frequency, loan / option\\n     * allocation split, etc.\\n     * @param lockedBalance is the locked balance for newest epoch\\n     */\\n    function _updateAllocationState(uint256 lockedBalance) internal {\\n        Vault.AllocationState memory _allocationState = allocationState;\\n\\n        // Set next loan term length\\n        if (_allocationState.nextLoanTermLength != 0) {\\n            uint256 tmpManagementFee = managementFee;\\n            managementFee =\\n                (tmpManagementFee * _allocationState.nextLoanTermLength) /\\n                _allocationState.currentLoanTermLength;\\n\\n            allocationState.currentLoanTermLength = _allocationState\\n                .nextLoanTermLength;\\n            allocationState.nextLoanTermLength = 0;\\n\\n            emit ManagementFeeSet(tmpManagementFee, managementFee);\\n        }\\n\\n        // Set next option purchase frequency\\n        if (_allocationState.nextOptionPurchaseFreq != 0) {\\n            allocationState.currentOptionPurchaseFreq = _allocationState\\n                .nextOptionPurchaseFreq;\\n            allocationState.nextOptionPurchaseFreq = 0;\\n        }\\n\\n        // Set next loan allocation from vault in USD\\n        allocationState.loanAllocation =\\n            (uint256(_allocationState.loanAllocationPCT) * lockedBalance) /\\n            TOTAL_PCT;\\n\\n        // Set next option allocation from vault per purchase in USD\\n        allocationState.optionAllocation =\\n            (uint256(_allocationState.optionAllocationPCT) * lockedBalance) /\\n            TOTAL_PCT;\\n    }\\n\\n    /**\\n     * @notice Helper function to update basket of borrowers\\n     * @param pendingBorrowers is the array of borrowers to add\\n     * @param pendingBorrowWeights is the array of corresponding borrow weights for the borrower\\n     */\\n    function _updateBorrowerBasket(\\n        address[] calldata pendingBorrowers,\\n        uint128[] calldata pendingBorrowWeights\\n    ) internal {\\n        uint256 borrowerArrLen = pendingBorrowers.length;\\n\\n        require(borrowerArrLen == pendingBorrowWeights.length, \\\"R40\\\");\\n\\n        // Set current pending changes to basket of borrowers\\n        for (uint256 i = 0; i < borrowerArrLen; i++) {\\n            if (pendingBorrowers[i] == address(0)) {\\n                continue;\\n            }\\n\\n            // Borrower does not exist\\n            if (!borrowerWeights[pendingBorrowers[i]].exists) {\\n                borrowers.push(pendingBorrowers[i]);\\n                borrowerWeights[pendingBorrowers[i]].exists = true;\\n            }\\n\\n            // Set pending borrower weight\\n            borrowerWeights[pendingBorrowers[i]]\\n                .pendingBorrowerWeight = pendingBorrowWeights[i];\\n        }\\n\\n        emit BorrowerBasketUpdated(pendingBorrowers, pendingBorrowWeights);\\n    }\\n\\n    /**\\n     * @notice Helper function that commits borrower basket\\n     */\\n    function _commitBorrowerBasket() internal {\\n        require(block.timestamp >= (lastBorrowerBasketChange + 3 days), \\\"R10\\\");\\n\\n        // Set current pending changes to basket of borrowers\\n        for (uint256 i = 0; i < borrowers.length; i++) {\\n            uint128 borrowWeight = borrowerWeights[borrowers[i]].borrowerWeight;\\n            uint128 pendingBorrowWeight =\\n                borrowerWeights[borrowers[i]].pendingBorrowerWeight;\\n            // Set borrower weight to pending borrower weight\\n            if (borrowWeight != pendingBorrowWeight) {\\n                borrowerWeights[borrowers[i]]\\n                    .borrowerWeight = pendingBorrowWeight;\\n                // Update total borrowing weight\\n                totalBorrowerWeight += pendingBorrowWeight;\\n                totalBorrowerWeight -= borrowWeight;\\n            }\\n        }\\n\\n        emit CommitBorrowerBasket(totalBorrowerWeight);\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount + heldByVault;\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts lent out\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        uint256 lockedForLoan = allocationState.loanAllocation;\\n\\n        uint256 amtPrincipalReturned =\\n            vaultState.amtFundsReturned > lockedForLoan\\n                ? lockedForLoan\\n                : vaultState.amtFundsReturned;\\n\\n        // Does not include funds allocated for options purchases\\n        // Includes funds set aside in vault that guarantee base yield\\n        // We subtract the amount of principal returned to avoid double counting in locked amount / USDC balance\\n        return\\n            lockedForLoan +\\n            IERC20(vaultParams.asset).balanceOf(address(this)) -\\n            amtPrincipalReturned;\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n}\\n\",\"keccak256\":\"0xb46bfde1bff33e0460f0e70cb9c701a2f0d14fbe40a1cc2fe957d87031b73536\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615adb80620000216000396000f3fe608060405234801561001057600080fd5b50600436106104495760003560e01c80637907cafd11610241578063a94045021161013b578063dd62ed3e116100c3578063f65a8fc411610087578063f65a8fc414610c2f578063f756fa2114610c42578063f8eea47e14610c4a578063f9a0be6814610c5d578063fe56e23214610c7057600080fd5b8063dd62ed3e14610b95578063e74b981b14610bce578063f2fde38b14610be1578063f39abff714610bf4578063f656ba5114610c0757600080fd5b8063c41d28741161010a578063c41d287414610b35578063ca59409414610b54578063ce7c2ac214610b5c578063d164cc1514610b6f578063db006a7514610b8257600080fd5b8063a940450214610af4578063aced166114610b07578063ad7a672f14610b1a578063b6b55f2514610b2257600080fd5b80638da5cb5b116101c95780639fcc2d751161018d5780639fcc2d7514610a34578063a457c2d714610ab2578063a694fc3a14610ac5578063a6f7f5d614610ad8578063a9059cbb14610ae157600080fd5b80638da5cb5b146109ed578063947061b5146109fe578063953c06f214610a1157806395d89b4114610a2457806399530b0614610a2c57600080fd5b80637e108d52116102105780637e108d52146109835780638476d5201461099657806387153eb1146109a957806387788782146109c957806389a30271146109d257600080fd5b80637907cafd146108fd5780637924d93f146109105780637a9262a2146109235780637bc1a20a1461097a57600080fd5b80633f90916a116103525780635ad2c684116102da57806367fbd6ac1161029e57806367fbd6ac146108a95780636f31ab34146108b157806370897b23146108b957806370a08231146108cc578063715018a6146108f557600080fd5b80635ad2c6841461079f57806361cfa87114610804578063669c8b42146108175780636719b2ee1461082a57806367d6cbc2146108a157600080fd5b80634b2431d9116103215780634b2431d91461075f578063503c70aa146107685780635069fb5714610771578063557886ab14610779578063573f0d6e1461078c57600080fd5b80633f90916a14610715578063469048401461072657806347786d37146107395780634a970be71461074c57600080fd5b80632728f333116103d5578063355274ea116103a4578063355274ea146106a057806336efd16f146106b157806339509351146106c45780633bf6b62c146106d75780633f23bb731461070257600080fd5b80632728f3331461058f5780632775d01c146106655780632a2d27f514610678578063313ce5671461068b57600080fd5b80631725bc101161041c5780631725bc10146104b757806317b0b36d1461055457806318160ddd1461056b5780631bc872701461057357806323b872dd1461057c57600080fd5b8063048bf0851461044e578063056097ac1461046357806306fdde0314610476578063095ea7b314610494575b600080fd5b61046161045c366004614eb2565b610c83565b005b610461610471366004614ece565b610cd8565b61047e610e5b565b60405161048b9190615453565b60405180910390f35b6104a76104a2366004614f46565b610eed565b604051901515815260200161048b565b60d25460d35460d4546105039263ffffffff808216936401000000008304821693600160401b8404831693600160601b8104841693600160801b8204811693600160a01b909204169188565b6040805163ffffffff998a1681529789166020890152958816958701959095529286166060860152908516608085015290931660a083015260c082019290925260e08101919091526101000161048b565b61055d60d95481565b60405190815260200161048b565b60995461055d565b61055d60dd5481565b6104a761058a366004614f06565b610f04565b60ce5460cf5460d05460d1546105f99361ffff8116936001600160681b03620100008304811694600160781b90930416926001600160801b0380831693600160801b9384900482169367ffffffffffffffff80831694600160401b84049091169391909204169089565b6040805161ffff9a909a168a526001600160681b0398891660208b015296909716958801959095526001600160801b039384166060880152918316608087015267ffffffffffffffff90811660a08701521660c08501521660e08301526101008201526101200161048b565b61046161067336600461508b565b610fb0565b610461610686366004614ffa565b611168565b60cc5460405160ff909116815260200161048b565b60cd546001600160681b031661055d565b6104616106bf3660046150bb565b61159c565b6104a76106d2366004614f46565b611623565b60db546106ea906001600160a01b031681565b6040516001600160a01b03909116815260200161048b565b61055d610710366004614eb2565b61165f565b60cf546001600160801b031661055d565b60d5546106ea906001600160a01b031681565b61046161074736600461508b565b6116ac565b61046161075a366004615128565b611783565b61055d60e15481565b61055d60e05481565b6104616118c8565b610461610787366004615170565b611b68565b61046161079a366004614eb2565b611cad565b6107dd6107ad366004614eb2565b60d8602052600090815260409020805460019091015460ff8216916001600160801b036101009091048116911683565b6040805193151584526001600160801b03928316602085015291169082015260600161048b565b61046161081236600461508b565b611cf9565b61046161082536600461508b565b611d54565b610870610838366004614eb2565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b03169082015260600161048b565b610461611d9c565b610461611f96565b610461612025565b6104616108c736600461508b565b612062565b61055d6108da366004614eb2565b6001600160a01b031660009081526097602052604090205490565b61046161210f565b61046161090b366004615128565b612145565b6106ea61091e36600461508b565b612206565b610958610931366004614eb2565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b0390911660208301520161048b565b61055d60da5481565b61046161099136600461508b565b612230565b6104616109a4366004614eb2565b612279565b61055d6109b736600461508b565b60ca6020526000908152604090205481565b61055d60de5481565b6106ea73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b6065546001600160a01b03166106ea565b60e2546106ea906001600160a01b031681565b60dc546106ea906001600160a01b031681565b61047e61234b565b61055d61235a565b60cc5460cd54610a6f9160ff81169161010082046001600160a01b031691600160a81b900466ffffffffffffff16906001600160681b031684565b6040805160ff90951685526001600160a01b03909316602085015266ffffffffffffff909116918301919091526001600160681b0316606082015260800161048b565b6104a7610ac0366004614f46565b61238f565b610461610ad336600461508b565b612428565b61055d60df5481565b6104a7610aef366004614f46565b612525565b610461610b02366004615128565b612532565b60d6546106ea906001600160a01b031681565b61055d6125fc565b610461610b3036600461508b565b6126b7565b610b3f620f424081565b60405163ffffffff909116815260200161048b565b61046161272a565b61055d610b6a366004614eb2565b6127cc565b610461610b7d366004614eb2565b6127e9565b610461610b9036600461508b565b612870565b61055d610ba3366004614ece565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b610461610bdc366004614eb2565b6128d6565b610461610bef366004614eb2565b61295d565b610461610c0236600461518c565b6129f5565b610c1a610c15366004614eb2565b612b08565b6040805192835260208301919091520161048b565b610461610c3d366004615170565b612be6565b610461612caa565b610461610c58366004614f71565b612d4a565b60e3546106ea906001600160a01b031681565b610461610c7e36600461508b565b612d8a565b6065546001600160a01b03163314610cb65760405162461bcd60e51b8152600401610cad906154f1565b60405180910390fd5b60e380546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314610d025760405162461bcd60e51b8152600401610cad906154f1565b60cc546001600160a01b03838116610100909204161415610d4b5760405162461bcd60e51b815260206004820152600360248201526252333560e81b6044820152606401610cad565b6001600160a01b038216301415610d8a5760405162461bcd60e51b815260206004820152600360248201526229199b60e91b6044820152606401610cad565b6001600160a01b038116301415610dc95760405162461bcd60e51b815260206004820152600360248201526252333760e81b6044820152606401610cad565b6040516370a0823160e01b8152306004820152610e579082906001600160a01b038516906370a082319060240160206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4691906150a3565b6001600160a01b0385169190612e80565b5050565b6060609a8054610e6a906157ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610e96906157ad565b8015610ee35780601f10610eb857610100808354040283529160200191610ee3565b820191906000526020600020905b815481529060010190602001808311610ec657829003601f168201915b5050505050905090565b6000610efa338484612ee8565b5060015b92915050565b6000610f1184848461300c565b6001600160a01b038416600090815260986020908152604080832033845290915290205482811015610f965760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610cad565b610fa38533858403612ee8565b60019150505b9392505050565b60026001541415610fd35760405162461bcd60e51b8152600401610cad90615526565b600260015533600090815260c96020526040902060ce5461ffff16826110215760405162461bcd60e51b815260206004820152600360248201526252333160e81b6044820152606401610cad565b815461ffff16811461105b5760405162461bcd60e51b815260206004820152600360248201526229199960e91b6044820152606401610cad565b81546201000090046001600160681b0316838110156110a25760405162461bcd60e51b815260206004820152600360248201526252333360e81b6044820152606401610cad565b6110ac848261576a565b83546001600160681b0391909116620100000262010000600160781b031990911617835560cf546110e79085906001600160801b031661576a565b60cf80546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a260cc5461115e9061010090046001600160a01b03163386612e80565b5050600180555050565b600054610100900460ff1680611181575060005460ff16155b61119d5760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156111bf576000805461ffff19166101011790555b60006111ce6020860186614eb2565b6001600160a01b0316141561120a5760405162461bcd60e51b8152602060048201526002602482015261523360f01b6044820152606401610cad565b7335fd2E2F59F24f002BF69eD055DF595228D1c3D46349bec6346112346040870160208801614eb2565b61124460c0880160a08901614eb2565b61125460a0890160808a01614eb2565b60c089013560e08a013561126c6101008c018c6155a5565b61127a6101208e018e6155a5565b8d8d620f42406040518d63ffffffff1660e01b81526004016112a79c9b9a99989796959493929190615299565b60006040518083038186803b1580156112bf57600080fd5b505af41580156112d3573d6000803e3d6000fd5b505050506112df6131da565b61136d6112f06101008601866155a5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611333925050506101208701876155a5565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061324d92505050565b6113756132cc565b611385610bef6020860186614eb2565b6113956040850160208601614eb2565b60d680546001600160a01b0319166001600160a01b03929092169190911790556113c560c0850160a08601614eb2565b60d580546001600160a01b0319166001600160a01b03929092169190911790556113f560a0850160808601614eb2565b60db80546001600160a01b0319166001600160a01b039290921691909117905560e084013560de5561142d6060830160408401615170565b63ffffffff16611444620f42406301e1338061574b565b61144e919061564c565b61145f620f424060c087013561574b565b611469919061564c565b60df558260cc611479828261598c565b5082905060d26114898282615850565b506114ae905061149c604086018661555d565b6114a9606088018861555d565b613333565b60cc546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a082319060240160206040518083038186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906150a3565b905061153a816135e6565b60ce805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015611596576000805461ff00191690555b50505050565b600260015414156115bf5760405162461bcd60e51b8152600401610cad90615526565b6002600155816115e15760405162461bcd60e51b8152600401610cad906154d4565b6001600160a01b0381166115f457600080fd5b6115fe8282613630565b60cc5461161b9061010090046001600160a01b03163330856138a7565b505060018055565b3360008181526098602090815260408083206001600160a01b03871684529091528120549091610efa91859061165a908690615615565b612ee8565b60cc5460009060ff168161168f61167560995490565b61167d6125fc565b60cf546001600160801b0316856138df565b90506116a461169d856127cc565b8284613926565b949350505050565b6065546001600160a01b031633146116d65760405162461bcd60e51b8152600401610cad906154f1565b6000811161170c5760405162461bcd60e51b815260206004820152600360248201526252313360e81b6044820152606401610cad565b611715816135e6565b60cd54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160cd80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b600260015414156117a65760405162461bcd60e51b8152600401610cad90615526565b600260015560cc5461010090046001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48146118045760405162461bcd60e51b815260206004820152600360248201526205232360ec1b6044820152606401610cad565b600085116118245760405162461bcd60e51b8152600401610cad906154d4565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061186490339030908a908a908a908a908a9060040161537e565b600060405180830381600087803b15801561187e57600080fd5b505af1158015611892573d6000803e3d6000fd5b505050506118a08533613630565b60cc546118bd9061010090046001600160a01b03163330886138a7565b505060018055505050565b60d6546001600160a01b031633146119075760405162461bcd60e51b8152602060048201526002602482015261148d60f21b6044820152606401610cad565b6002600154141561192a5760405162461bcd60e51b8152600401610cad90615526565b600260015560ce8054600160781b6001600160681b0362010000830416026cffffffffffffffffffffffffff60781b1990911617905560008061196b61398f565b60e081905560e15460cf549294509092506000916119999190600160801b90046001600160801b0316615615565b90506119a481613cd5565b60cf80546001600160801b03808416600160801b029116179055600060e1556119cc836135e6565b60ce805462010000600160781b031916620100006001600160681b0386160217905560d080546001600160801b03169055600060d181905560d354905b60d7548110156118bd5760d954611a1f576118bd565b600060d95460d8600060d78581548110611a4957634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054611a87906001600160801b03610100909104168561574b565b611a91919061564c565b905080611a9e5750611b56565b611ae960d78381548110611ac257634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460cc5461010090046001600160a01b03908116911683612e80565b60d78281548110611b0a57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040518381526001600160a01b03909116917f88af4e011812ac0591fac38c5d6532fd401d8fa1fdf20e82b019e78405f42b71910160405180910390a2505b80611b60816157e8565b915050611a09565b6065546001600160a01b03163314611b925760405162461bcd60e51b8152600401610cad906154f1565b60008163ffffffff1611611bce5760405162461bcd60e51b815260206004820152600360248201526229189b60e91b6044820152606401610cad565b60d25463ffffffff16158015611bf7575060d25463ffffffff600160401b909104811690821611155b80611c0e575060d25463ffffffff90811690821611155b611c405760405162461bcd60e51b815260206004820152600360248201526252313760e81b6044820152606401610cad565b60d2805467ffffffff00000000191664010000000063ffffffff848116918202929092179283905560408051600160601b909404909216835260208301527ff0d4e95ace3c30a9f74264435d024aee7c24e0a24d5f2dc0b2f097778d19944391015b60405180910390a150565b6065546001600160a01b03163314611cd75760405162461bcd60e51b8152600401610cad906154f1565b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b33600090815260d8602052604090205461010090046001600160801b0316611d485760405162461bcd60e51b8152602060048201526002602482015261523560f01b6044820152606401610cad565b611d5181613d1f565b50565b60db546001600160a01b03163314611d935760405162461bcd60e51b8152602060048201526002602482015261291b60f11b6044820152606401610cad565b611d5181613deb565b60d6546001600160a01b03163314611ddb5760405162461bcd60e51b8152602060048201526002602482015261148d60f21b6044820152606401610cad565b60d054600160801b90046001600160801b03161580611e27575060d25460d054611e2391600160601b900463ffffffff1690600160401b900467ffffffffffffffff16615615565b4210155b611e595760405162461bcd60e51b8152602060048201526003602482015262148ccd60ea1b6044820152606401610cad565b60d254600090611e7f9063ffffffff600160601b8204811691600160401b90041661564c565b60d454611e8c919061564c565b60d080549192508291601090611eb3908490600160801b90046001600160801b03166155ea565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506201518042611ee69190615803565b611ef0904261576a565b611efc90617080615615565b60d0805467ffffffffffffffff92909216600160401b026fffffffffffffffff00000000000000001990921691909117905560db5460cc54611f51916101009091046001600160a01b03908116911683612e80565b60db546040518281526001600160a01b03909116907f4c40d030ff61ad9fddd7e91383af2b30e967a5d96e128382a8b24130d6dee72e9060200160405180910390a250565b6065546001600160a01b03163314611fc05760405162461bcd60e51b8152600401610cad906154f1565b60dc546001600160a01b0316611ffe5760405162461bcd60e51b815260206004820152600360248201526252353160e81b6044820152606401610cad565b60dc805460db80546001600160a01b03199081166001600160a01b03841617909155169055565b600260015414156120485760405162461bcd60e51b8152600401610cad90615526565b600260018190555061205c60006001613e6e565b60018055565b6065546001600160a01b0316331461208c5760405162461bcd60e51b8152600401610cad906154f1565b61209a620f4240606461574b565b81106120ce5760405162461bcd60e51b815260206004820152600360248201526229189960e91b6044820152606401610cad565b60de5460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160de55565b6065546001600160a01b031633146121395760405162461bcd60e51b8152600401610cad906154f1565b6121436000614003565b565b60db546001600160a01b031633146121845760405162461bcd60e51b8152602060048201526002602482015261291b60f11b6044820152606401610cad565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf906121c490339030908a908a908a908a908a9060040161537e565b600060405180830381600087803b1580156121de57600080fd5b505af11580156121f2573d6000803e3d6000fd5b505050506121ff85613deb565b5050505050565b60d7818154811061221657600080fd5b6000918252602090912001546001600160a01b0316905081565b600260015414156122535760405162461bcd60e51b8152600401610cad90615526565b600260015561226181614055565b8060e15461226f9190615615565b60e1555060018055565b6065546001600160a01b031633146122a35760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b0381166122de5760405162461bcd60e51b8152602060048201526002602482015261523960f01b6044820152606401610cad565b60db54604080516001600160a01b03928316815291831660208301527f99e10f8286c53ce42e5bb9937b70f356c0733bf7f652059231239a1b9f12ef96910160405180910390a160dc80546001600160a01b0319166001600160a01b03929092169190911790554260dd55565b6060609b8054610e6a906157ad565b600061238a61236860995490565b6123706125fc565b60cf5460cc546001600160801b039091169060ff166138df565b905090565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156124115760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610cad565b61241e3385858403612ee8565b5060019392505050565b6002600154141561244b5760405162461bcd60e51b8152600401610cad90615526565b600260015560e3546001600160a01b03168061246657600080fd5b6000821161247357600080fd5b336000908152609760205260409020548281101561249f5761249f612498828561576a565b6000613e6e565b6124aa33308561300c565b6124b5308385612ee8565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b15801561250457600080fd5b505af1158015612518573d6000803e3d6000fd5b5050600180555050505050565b6000610efa33848461300c565b33600090815260d8602052604090205461010090046001600160801b03166125815760405162461bcd60e51b8152602060048201526002602482015261523560f01b6044820152606401610cad565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf906125c190339030908a908a908a908a908a9060040161537e565b600060405180830381600087803b1580156125db57600080fd5b505af11580156125ef573d6000803e3d6000fd5b505050506121ff85613d1f565b60d35460d15460009190829082106126165760d154612618565b815b60cc546040516370a0823160e01b815230600482015291925082916101009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561266457600080fd5b505afa158015612678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269c91906150a3565b6126a69084615615565b6126b0919061576a565b9250505090565b600260015414156126da5760405162461bcd60e51b8152600401610cad90615526565b6002600155806126fc5760405162461bcd60e51b8152600401610cad906154d4565b6127068133613630565b60cc546127239061010090046001600160a01b03163330846138a7565b5060018055565b60e2546001600160a01b03168061274057600080fd5b61274c60006001613e6e565b3360008181526097602052604090205490612768908383612ee8565b60405163c9c2d4f560e01b8152336004820152602481018290526001600160a01b0383169063c9c2d4f590604401600060405180830381600087803b1580156127b057600080fd5b505af11580156127c4573d6000803e3d6000fd5b505050505050565b60008060006127da84612b08565b90925090506116a48183615615565b6065546001600160a01b031633146128135760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b03811661284e5760405162461bcd60e51b8152602060048201526002602482015261523760f01b6044820152606401610cad565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156128935760405162461bcd60e51b8152600401610cad90615526565b6002600155806128cb5760405162461bcd60e51b815260206004820152600360248201526252323960e81b6044820152606401610cad565b612723816000613e6e565b6065546001600160a01b031633146129005760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b03811661293b5760405162461bcd60e51b81526020600482015260026024820152610a4760f31b6044820152606401610cad565b60d580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146129875760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b0381166129ec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610cad565b611d5181614003565b6065546001600160a01b03163314612a1f5760405162461bcd60e51b8152600401610cad906154f1565b620f4240612a2d828461562d565b63ffffffff161115612a675760405162461bcd60e51b8152602060048201526003602482015262148c4d60ea1b6044820152606401610cad565b60d25460408051600160801b830463ffffffff90811682528581166020830152600160a01b9093048316818301529183166060830152517fc5b13904dad0762d636763061410ff20f86e9d21359fe8c2b1decacfc9bdd7539181900360800190a160d2805467ffffffffffffffff60801b1916600160801b63ffffffff9485160263ffffffff60a01b191617600160a01b9290931691909102919091179055565b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115612b8a575050506001600160a01b031660009081526097602052604081205491565b60ce54815161ffff908116600090815260ca602052604081205460cc549193612bbb9386939116919060ff166141e9565b9050612bdc856001600160a01b031660009081526097602052604090205490565b9590945092505050565b6065546001600160a01b03163314612c105760405162461bcd60e51b8152600401610cad906154f1565b620151808163ffffffff161015612c4f5760405162461bcd60e51b815260206004820152600360248201526252313560e81b6044820152606401610cad565b60d2805463ffffffff191663ffffffff8381169182179283905560408051600160401b909404909116835260208301919091527fd323e49efbd1e497c4f485723f1434c9b8294a325ad121e48fdb4c1cfacea7359101611ca2565b60026001541415612ccd5760405162461bcd60e51b8152600401610cad90615526565b60026001556000612cdc61425a565b905060008111612d145760405162461bcd60e51b81526020600482015260036024820152620a464760eb1b6044820152606401610cad565b8060e054612d22919061576a565b6001600160801b031660e05560cc546127239061010090046001600160a01b03163383612e80565b6065546001600160a01b03163314612d745760405162461bcd60e51b8152600401610cad906154f1565b612d8084848484613333565b50504260da555050565b6065546001600160a01b03163314612db45760405162461bcd60e51b8152600401610cad906154f1565b612dc2620f4240606461574b565b8110612df65760405162461bcd60e51b815260206004820152600360248201526252313160e81b6044820152606401610cad565b60d254600090600160401b900463ffffffff16612e1a620f42406301e1338061574b565b612e24919061564c565b612e31620f42408461574b565b612e3b919061564c565b60df5460408051918252602082018390529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160df5550565b6040516001600160a01b038316602482015260448101829052612ee390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143a0565b505050565b6001600160a01b038316612f4a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610cad565b6001600160a01b038216612fab5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610cad565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166130705760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610cad565b6001600160a01b0382166130d25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610cad565b6001600160a01b0383166000908152609760205260409020548181101561314a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610cad565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613181908490615615565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516131cd91815260200190565b60405180910390a3611596565b600054610100900460ff16806131f3575060005460ff16155b61320f5760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015613231576000805461ffff19166101011790555b613239614472565b8015611d51576000805461ff001916905550565b600054610100900460ff1680613266575060005460ff16155b6132825760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156132a4576000805461ffff19166101011790555b6132ac6144e1565b6132b6838361454b565b8015612ee3576000805461ff0019169055505050565b600054610100900460ff16806132e5575060005460ff16155b6133015760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015613323576000805461ffff19166101011790555b61332b6144e1565b6132396145e0565b828181146133695760405162461bcd60e51b815260206004820152600360248201526205234360ec1b6044820152606401610cad565b60005b818110156135a157600086868381811061339657634e487b7160e01b600052603260045260246000fd5b90506020020160208101906133ab9190614eb2565b6001600160a01b031614156133bf5761358f565b60d860008787848181106133e357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906133f89190614eb2565b6001600160a01b0316815260208101919091526040016000205460ff166134e65760d786868381811061343b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906134509190614eb2565b81546001808201845560009384526020842090910180546001600160a01b0319166001600160a01b0393909316929092179091559060d8908888858181106134a857634e487b7160e01b600052603260045260246000fd5b90506020020160208101906134bd9190614eb2565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b83838281811061350657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061351b9190615071565b60d8600088888581811061353f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906135549190614eb2565b6001600160a01b03168152602081019190915260400160002060010180546001600160801b0319166001600160801b03929092169190911790555b80613599816157e8565b91505061336c565b507fc8616977b27865a3d83403e8b0eef76d389fc3f711f2bf5bcf0b4399b33d1509858585856040516135d794939291906153bf565b60405180910390a15050505050565b6001600160681b03811115611d515760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401610cad565b60ce5461ffff166000836136426125fc565b61364c9190615615565b60cd549091506001600160681b03168111156136905760405162461bcd60e51b815260206004820152600360248201526229191960e91b6044820152606401610cad565b60cc54600160a81b900466ffffffffffffff168110156136d85760405162461bcd60e51b815260206004820152600360248201526252323360e81b6044820152606401610cad565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc5491929161379291849187919060ff166141e9565b8251909150869061ffff168514156137c35760008784602001516001600160681b03166137bf9190615615565b9150505b6137cc816135e6565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560cf54613873918a9116615615565b905061387e81613cd5565b60cf80546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526115969085906323b872dd60e01b90608401612eac565b6000806138ed83600a6156a3565b9050600086116138fd578061391c565b85613908858761576a565b613912908361574b565b61391c919061564c565b9695505050505050565b6000600183116139705760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610cad565b61397b82600a6156a3565b613985848661574b565b6116a4919061564c565b60d25460d05460009182916139bb91600160401b900463ffffffff169067ffffffffffffffff16615615565b4210156139f05760405162461bcd60e51b815260206004820152600360248201526252333960e81b6044820152606401610cad565b60d5546040805160e08101825260cc5460ff8116825291516370a0823160e01b81523060048201526001600160a01b03938416936000938493849384937335fd2E2F59F24f002BF69eD055DF595228D1c3D493632b8b58cf9360ce9390926020840192610100900416906370a082319060240160206040518083038186803b158015613a7b57600080fd5b505afa158015613a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab391906150a3565b8152602001613ac160995490565b815260200160e054815260200160de54815260200160df54815260200160e1548152506040518363ffffffff1660e01b8152600401613b5292919060006101008201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b60c06040518083038186803b158015613b6a57600080fd5b505af4158015613b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba291906150df565b60ce5461ffff16600081815260ca60209081526040918290208790558151858152908101849052908101829052969d50949b50919850965094509250906001600160a01b038716907f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c0069060600160405180910390a260cf80546001600160801b0319169055613c32816001615615565b60ce805461ffff191661ffff92909216919091179055613c556201518042615803565b613c5f904261576a565b613c6b90617080615615565b60d0805467ffffffffffffffff191667ffffffffffffffff9290921691909117905550613c9a90503084614640565b8015613cbc5760cc54613cbc9061010090046001600160a01b03168583612e80565b613cc58661471f565b613ccd6148d6565b505050509091565b6001600160801b03811115611d515760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401610cad565b60cc54613d3c9061010090046001600160a01b03163330846138a7565b60d95433600090815260d8602052604081205460d354919291613d6d9161010090046001600160801b03169061574b565b613d77919061564c565b90508160ce6003016000828254613d8e9190615615565b909155503390507f68fdeed3f1a82d492cf10b1608f9eb8c69f1a1d9f58c952fb01f9325c9e140f383838111613dc5576000613dcf565b613dcf848661576a565b6040805192835260208301919091520160405180910390a25050565b60cc54613e089061010090046001600160a01b03163330846138a7565b60d254600090613e2e9063ffffffff600160601b8204811691600160401b90041661564c565b60d454613e3b919061564c565b9050337f0f6ba811ab59ff1520dd0aa40c3591aeb13d418d5d2bcf79b5f819a3634ed59583838111613dc5576000613dcf565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260ce5491865260ca9094529184205460cc5491949290931692613ee4918591859160ff166141e9565b905083613ef15784613ef3565b805b945084613f01575050505050565b80851115613f375760405162461bcd60e51b815260206004820152600360248201526205233360ec1b6044820152606401610cad565b825161ffff16821115613f645733600090815260c960205260409020805462010000600160781b03191690555b613f6d85613cd5565b613f77858261576a565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991613ff09189825261ffff16602082015260400190565b60405180910390a26121ff30338761300c565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000811161408b5760405162461bcd60e51b8152602060048201526003602482015262148c8d60ea1b6044820152606401610cad565b33600090815260c960205260409020546201000090046001600160681b03161515806140d5575033600090815260c96020526040902054600160781b90046001600160801b031615155b156140e6576140e660006001613e6e565b60ce5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b03166000821561416f576141688683615615565b90506141b5565b81156141a35760405162461bcd60e51b815260206004820152600360248201526252323560e81b6044820152606401610cad565b50825461ffff191661ffff8516178355845b6141be81613cd5565b835462010000600160901b031916620100006001600160801b038316021784556127c433308861300c565b835160009061ffff16158015906142045750845161ffff1684115b1561424657600061422386602001516001600160681b03168585614aef565b90508086604001516001600160801b031661423e9190615615565b9150506116a4565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff16816142b25760405162461bcd60e51b815260206004820152600360248201526229191b60e91b6044820152606401610cad565b60ce5461ffff1681106142ed5760405162461bcd60e51b815260206004820152600360248201526252323760e81b6044820152606401610cad565b825462010000600160901b031916835560cf5461431b908390600160801b90046001600160801b031661576a565b60cf80546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc5461435891859160ff16613926565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26116a43084614b4f565b60006143f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c9d9092919063ffffffff16565b805190915015612ee357808060200190518101906144139190614fda565b612ee35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cad565b600054610100900460ff168061448b575060005460ff16155b6144a75760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156144c9576000805461ffff19166101011790555b600180558015611d51576000805461ff001916905550565b600054610100900460ff16806144fa575060005460ff16155b6145165760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015613239576000805461ffff19166101011790558015611d51576000805461ff001916905550565b600054610100900460ff1680614564575060005460ff16155b6145805760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156145a2576000805461ffff19166101011790555b82516145b590609a906020860190614da8565b5081516145c990609b906020850190614da8565b508015612ee3576000805461ff0019169055505050565b600054610100900460ff16806145f9575060005460ff16155b6146155760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015614637576000805461ffff19166101011790555b61323933614003565b6001600160a01b0382166146965760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610cad565b80609960008282546146a89190615615565b90915550506001600160a01b038216600090815260976020526040812080548392906146d5908490615615565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b604080516101008101825260d25463ffffffff808216808452640100000000830482166020850152600160401b8304821694840194909452600160601b820481166060840152600160801b820481166080840152600160a01b9091041660a082015260d35460c082015260d45460e082015290156148335760df546040820151825163ffffffff918216916147b591168361574b565b6147bf919061564c565b60df819055825160d280546bffffffff00000000ffffffff1916600160401b63ffffffff9093169290920263ffffffff19169190911790556040805183815260208101929092527f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a1505b602081015163ffffffff161561488257602081015160d280546fffffffff00000000ffffffff000000001916600160601b63ffffffff9093169290920267ffffffff0000000019169190911790555b6080810151620f42409061489d90849063ffffffff1661574b565b6148a7919061564c565b60d35560a0810151620f4240906148c590849063ffffffff1661574b565b6148cf919061564c565b60d4555050565b60da546148e6906203f480615615565b42101561491b5760405162461bcd60e51b815260206004820152600360248201526205231360ec1b6044820152606401610cad565b60005b60d754811015614ab157600060d8600060d7848154811061494f57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b0316835282019290925260400181205460d780546101009092046001600160801b0316935060d891839190869081106149ae57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020600101546001600160801b03908116915082168114614a9c578060d8600060d78681548110614a1157634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805470ffffffffffffffffffffffffffffffff0019166101006001600160801b039485160217905560d9805492841692909190614a74908490615615565b92505081905550816001600160801b031660d96000828254614a96919061576a565b90915550505b50508080614aa9906157e8565b91505061491e565b507f35f63f8d8ef81a02b50e77faab37344f335fcc256a197cbaa15cd5ab8835aa0660d954604051614ae591815260200190565b60405180910390a1565b600060018311614b395760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610cad565b82614b4583600a6156a3565b613985908661574b565b6001600160a01b038216614baf5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610cad565b6001600160a01b03821660009081526097602052604090205481811015614c235760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610cad565b6001600160a01b0383166000908152609760205260408120838303905560998054849290614c5290849061576a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60606116a4848460008585843b614cf65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cad565b600080866001600160a01b03168587604051614d12919061527d565b60006040518083038185875af1925050503d8060008114614d4f576040519150601f19603f3d011682016040523d82523d6000602084013e614d54565b606091505b5091509150614d64828286614d6f565b979650505050505050565b60608315614d7e575081610fa9565b825115614d8e5782518084602001fd5b8160405162461bcd60e51b8152600401610cad9190615453565b828054614db4906157ad565b90600052602060002090601f016020900481019282614dd65760008555614e1c565b82601f10614def57805160ff1916838001178555614e1c565b82800160010185558215614e1c579182015b82811115614e1c578251825591602001919060010190614e01565b50614e28929150614e2c565b5090565b5b80821115614e285760008155600101614e2d565b60008083601f840112614e52578182fd5b50813567ffffffffffffffff811115614e69578182fd5b6020830191508360208260051b8501011115614e8457600080fd5b9250929050565b80356001600160801b0381168114614ea257600080fd5b919050565b8035614ea281615a6f565b600060208284031215614ec3578081fd5b8135610fa981615a45565b60008060408385031215614ee0578081fd5b8235614eeb81615a45565b91506020830135614efb81615a45565b809150509250929050565b600080600060608486031215614f1a578081fd5b8335614f2581615a45565b92506020840135614f3581615a45565b929592945050506040919091013590565b60008060408385031215614f58578182fd5b8235614f6381615a45565b946020939093013593505050565b60008060008060408587031215614f86578081fd5b843567ffffffffffffffff80821115614f9d578283fd5b614fa988838901614e41565b90965094506020870135915080821115614fc1578283fd5b50614fce87828801614e41565b95989497509550505050565b600060208284031215614feb578081fd5b81518015158114610fa9578182fd5b60008060008385036101a0811215615010578384fd5b843567ffffffffffffffff811115615026578485fd5b85016101408188031215615038578485fd5b93506080601f198201121561504b578283fd5b602085019250610100609f1982011215615063578182fd5b5060a0840190509250925092565b600060208284031215615082578081fd5b610fa982614e8b565b60006020828403121561509c578081fd5b5035919050565b6000602082840312156150b4578081fd5b5051919050565b600080604083850312156150cd578182fd5b823591506020830135614efb81615a45565b60008060008060008060c087890312156150f7578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600080600060a0868803121561513f578283fd5b8535945060208601359350604086013561515881615a96565b94979396509394606081013594506080013592915050565b600060208284031215615181578081fd5b8135610fa981615a6f565b6000806040838503121561519e578182fd5b82356151a981615a6f565b91506020830135614efb81615a6f565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b80356151ed81615a6f565b63ffffffff908116835260208201359061520682615a6f565b908116602084015260408201359061521d82615a6f565b908116604084015260608201359061523482615a6f565b16606083015261524660808201614ea7565b63ffffffff16608083015261525d60a08201614ea7565b63ffffffff1660a083015260c0818101359083015260e090810135910152565b6000825161528f818460208701615781565b9190910192915050565b600060018060a01b03808f168352808e166020840152808d1660408401528b60608401528a608084015261028060a08401526152da61028084018a8c6151b9565b83810360c08501526152ed81898b6151b9565b92505085356152fb81615a96565b60ff1660e0840152602086013561531181615a45565b16610100830152604085013561532681615a81565b66ffffffffffffff16610120830152606085013561534381615a5a565b6001600160681b03166101408301526153606101608301856151e2565b63ffffffff83166102608301529d9c50505050505050505050505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6040808252810184905260008560608301825b878110156154025782356153e581615a45565b6001600160a01b03168252602092830192909101906001016153d2565b50838103602085810191909152858252915085908201835b86811015615446576001600160801b0361543384614e8b565b168252918301919083019060010161541a565b5098975050505050505050565b6020815260008251806020840152615472816040850160208701615781565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526003908201526252323160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112615573578283fd5b83018035915067ffffffffffffffff82111561558d578283fd5b6020019150600581901b3603821315614e8457600080fd5b6000808335601e198436030181126155bb578283fd5b83018035915067ffffffffffffffff8211156155d5578283fd5b602001915036819003821315614e8457600080fd5b60006001600160801b0380831681851680830382111561560c5761560c615817565b01949350505050565b6000821982111561562857615628615817565b500190565b600063ffffffff80831681851680830382111561560c5761560c615817565b60008261565b5761565b61582d565b500490565b600181815b8085111561569b57816000190482111561568157615681615817565b8085161561568e57918102915b93841c9390800290615665565b509250929050565b6000610fa983836000826156b957506001610efe565b816156c657506000610efe565b81600181146156dc57600281146156e657615702565b6001915050610efe565b60ff8411156156f7576156f7615817565b50506001821b610efe565b5060208310610133831016604e8410600b8410161715615725575081810a610efe565b61572f8383615660565b806000190482111561574357615743615817565b029392505050565b600081600019048311821515161561576557615765615817565b500290565b60008282101561577c5761577c615817565b500390565b60005b8381101561579c578181015183820152602001615784565b838111156115965750506000910152565b600181811c908216806157c157607f821691505b602082108114156157e257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156157fc576157fc615817565b5060010190565b6000826158125761581261582d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008135610efe81615a6f565b813561585b81615a6f565b63ffffffff8116905081548163ffffffff198216178355602084013561588081615a6f565b67ffffffff000000008160201b168367ffffffffffffffff198416171784555050506158db6158b160408401615843565b82546bffffffff0000000000000000191660409190911b6bffffffff000000000000000016178255565b61590e6158ea60608401615843565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b61594161591d60808401615843565b82805463ffffffff60801b191660809290921b63ffffffff60801b16919091179055565b61597461595060a08401615843565b82805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b60c0820135600182015560e082013560028201555050565b813561599781615a96565b60ff8116905081548160ff19821617835560208401356159b681615a45565b610100600160a81b0360089190911b166001600160a81b0319821683178117845560408501356159e581615a81565b6001600160e01b0319929092169092179190911760a89190911b66ffffffffffffff60a81b16178155600181016060830135615a2081615a5a565b81546cffffffffffffffffffffffffff19166001600160681b03919091161790555050565b6001600160a01b0381168114611d5157600080fd5b6001600160681b0381168114611d5157600080fd5b63ffffffff81168114611d5157600080fd5b66ffffffffffffff81168114611d5157600080fd5b60ff81168114611d5157600080fdfea2646970667358221220a25ff173480fcf0e9e70cb4246c2b18d834a2c7ca39de9576f573216ccd6889164736f6c63430008040033",
  "deployedBytecode": "$2abc2342da0ef81c8a62da4073b4b8c831$__6349bec6346112346040870160208801614eb2565b61124460c0880160a08901614eb2565b61125460a0890160808a01614eb2565b60c089013560e08a013561126c6101008c018c6155a5565b61127a6101208e018e6155a5565b8d8d620f42406040518d63ffffffff1660e01b81526004016112a79c9b9a99989796959493929190615299565b60006040518083038186803b1580156112bf57600080fd5b505af41580156112d3573d6000803e3d6000fd5b505050506112df6131da565b61136d6112f06101008601866155a5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611333925050506101208701876155a5565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061324d92505050565b6113756132cc565b611385610bef6020860186614eb2565b6113956040850160208601614eb2565b60d680546001600160a01b0319166001600160a01b03929092169190911790556113c560c0850160a08601614eb2565b60d580546001600160a01b0319166001600160a01b03929092169190911790556113f560a0850160808601614eb2565b60db80546001600160a01b0319166001600160a01b039290921691909117905560e084013560de5561142d6060830160408401615170565b63ffffffff16611444620f42406301e1338061574b565b61144e919061564c565b61145f620f424060c087013561574b565b611469919061564c565b60df558260cc611479828261598c565b5082905060d26114898282615850565b506114ae905061149c604086018661555d565b6114a9606088018861555d565b613333565b60cc546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a082319060240160206040518083038186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906150a3565b905061153a816135e6565b60ce805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015611596576000805461ff00191690555b50505050565b600260015414156115bf5760405162461bcd60e51b8152600401610cad90615526565b6002600155816115e15760405162461bcd60e51b8152600401610cad906154d4565b6001600160a01b0381166115f457600080fd5b6115fe8282613630565b60cc5461161b9061010090046001600160a01b03163330856138a7565b505060018055565b3360008181526098602090815260408083206001600160a01b03871684529091528120549091610efa91859061165a908690615615565b612ee8565b60cc5460009060ff168161168f61167560995490565b61167d6125fc565b60cf546001600160801b0316856138df565b90506116a461169d856127cc565b8284613926565b949350505050565b6065546001600160a01b031633146116d65760405162461bcd60e51b8152600401610cad906154f1565b6000811161170c5760405162461bcd60e51b815260206004820152600360248201526252313360e81b6044820152606401610cad565b611715816135e6565b60cd54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160cd80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b600260015414156117a65760405162461bcd60e51b8152600401610cad90615526565b600260015560cc5461010090046001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48146118045760405162461bcd60e51b815260206004820152600360248201526205232360ec1b6044820152606401610cad565b600085116118245760405162461bcd60e51b8152600401610cad906154d4565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf9061186490339030908a908a908a908a908a9060040161537e565b600060405180830381600087803b15801561187e57600080fd5b505af1158015611892573d6000803e3d6000fd5b505050506118a08533613630565b60cc546118bd9061010090046001600160a01b03163330886138a7565b505060018055505050565b60d6546001600160a01b031633146119075760405162461bcd60e51b8152602060048201526002602482015261148d60f21b6044820152606401610cad565b6002600154141561192a5760405162461bcd60e51b8152600401610cad90615526565b600260015560ce8054600160781b6001600160681b0362010000830416026cffffffffffffffffffffffffff60781b1990911617905560008061196b61398f565b60e081905560e15460cf549294509092506000916119999190600160801b90046001600160801b0316615615565b90506119a481613cd5565b60cf80546001600160801b03808416600160801b029116179055600060e1556119cc836135e6565b60ce805462010000600160781b031916620100006001600160681b0386160217905560d080546001600160801b03169055600060d181905560d354905b60d7548110156118bd5760d954611a1f576118bd565b600060d95460d8600060d78581548110611a4957634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054611a87906001600160801b03610100909104168561574b565b611a91919061564c565b905080611a9e5750611b56565b611ae960d78381548110611ac257634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460cc5461010090046001600160a01b03908116911683612e80565b60d78281548110611b0a57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040518381526001600160a01b03909116917f88af4e011812ac0591fac38c5d6532fd401d8fa1fdf20e82b019e78405f42b71910160405180910390a2505b80611b60816157e8565b915050611a09565b6065546001600160a01b03163314611b925760405162461bcd60e51b8152600401610cad906154f1565b60008163ffffffff1611611bce5760405162461bcd60e51b815260206004820152600360248201526229189b60e91b6044820152606401610cad565b60d25463ffffffff16158015611bf7575060d25463ffffffff600160401b909104811690821611155b80611c0e575060d25463ffffffff90811690821611155b611c405760405162461bcd60e51b815260206004820152600360248201526252313760e81b6044820152606401610cad565b60d2805467ffffffff00000000191664010000000063ffffffff848116918202929092179283905560408051600160601b909404909216835260208301527ff0d4e95ace3c30a9f74264435d024aee7c24e0a24d5f2dc0b2f097778d19944391015b60405180910390a150565b6065546001600160a01b03163314611cd75760405162461bcd60e51b8152600401610cad906154f1565b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b33600090815260d8602052604090205461010090046001600160801b0316611d485760405162461bcd60e51b8152602060048201526002602482015261523560f01b6044820152606401610cad565b611d5181613d1f565b50565b60db546001600160a01b03163314611d935760405162461bcd60e51b8152602060048201526002602482015261291b60f11b6044820152606401610cad565b611d5181613deb565b60d6546001600160a01b03163314611ddb5760405162461bcd60e51b8152602060048201526002602482015261148d60f21b6044820152606401610cad565b60d054600160801b90046001600160801b03161580611e27575060d25460d054611e2391600160601b900463ffffffff1690600160401b900467ffffffffffffffff16615615565b4210155b611e595760405162461bcd60e51b8152602060048201526003602482015262148ccd60ea1b6044820152606401610cad565b60d254600090611e7f9063ffffffff600160601b8204811691600160401b90041661564c565b60d454611e8c919061564c565b60d080549192508291601090611eb3908490600160801b90046001600160801b03166155ea565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506201518042611ee69190615803565b611ef0904261576a565b611efc90617080615615565b60d0805467ffffffffffffffff92909216600160401b026fffffffffffffffff00000000000000001990921691909117905560db5460cc54611f51916101009091046001600160a01b03908116911683612e80565b60db546040518281526001600160a01b03909116907f4c40d030ff61ad9fddd7e91383af2b30e967a5d96e128382a8b24130d6dee72e9060200160405180910390a250565b6065546001600160a01b03163314611fc05760405162461bcd60e51b8152600401610cad906154f1565b60dc546001600160a01b0316611ffe5760405162461bcd60e51b815260206004820152600360248201526252353160e81b6044820152606401610cad565b60dc805460db80546001600160a01b03199081166001600160a01b03841617909155169055565b600260015414156120485760405162461bcd60e51b8152600401610cad90615526565b600260018190555061205c60006001613e6e565b60018055565b6065546001600160a01b0316331461208c5760405162461bcd60e51b8152600401610cad906154f1565b61209a620f4240606461574b565b81106120ce5760405162461bcd60e51b815260206004820152600360248201526229189960e91b6044820152606401610cad565b60de5460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160de55565b6065546001600160a01b031633146121395760405162461bcd60e51b8152600401610cad906154f1565b6121436000614003565b565b60db546001600160a01b031633146121845760405162461bcd60e51b8152602060048201526002602482015261291b60f11b6044820152606401610cad565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf906121c490339030908a908a908a908a908a9060040161537e565b600060405180830381600087803b1580156121de57600080fd5b505af11580156121f2573d6000803e3d6000fd5b505050506121ff85613deb565b5050505050565b60d7818154811061221657600080fd5b6000918252602090912001546001600160a01b0316905081565b600260015414156122535760405162461bcd60e51b8152600401610cad90615526565b600260015561226181614055565b8060e15461226f9190615615565b60e1555060018055565b6065546001600160a01b031633146122a35760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b0381166122de5760405162461bcd60e51b8152602060048201526002602482015261523960f01b6044820152606401610cad565b60db54604080516001600160a01b03928316815291831660208301527f99e10f8286c53ce42e5bb9937b70f356c0733bf7f652059231239a1b9f12ef96910160405180910390a160dc80546001600160a01b0319166001600160a01b03929092169190911790554260dd55565b6060609b8054610e6a906157ad565b600061238a61236860995490565b6123706125fc565b60cf5460cc546001600160801b039091169060ff166138df565b905090565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156124115760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610cad565b61241e3385858403612ee8565b5060019392505050565b6002600154141561244b5760405162461bcd60e51b8152600401610cad90615526565b600260015560e3546001600160a01b03168061246657600080fd5b6000821161247357600080fd5b336000908152609760205260409020548281101561249f5761249f612498828561576a565b6000613e6e565b6124aa33308561300c565b6124b5308385612ee8565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b15801561250457600080fd5b505af1158015612518573d6000803e3d6000fd5b5050600180555050505050565b6000610efa33848461300c565b33600090815260d8602052604090205461010090046001600160801b03166125815760405162461bcd60e51b8152602060048201526002602482015261523560f01b6044820152606401610cad565b60cc5460405163d505accf60e01b81526101009091046001600160a01b03169063d505accf906125c190339030908a908a908a908a908a9060040161537e565b600060405180830381600087803b1580156125db57600080fd5b505af11580156125ef573d6000803e3d6000fd5b505050506121ff85613d1f565b60d35460d15460009190829082106126165760d154612618565b815b60cc546040516370a0823160e01b815230600482015291925082916101009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561266457600080fd5b505afa158015612678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269c91906150a3565b6126a69084615615565b6126b0919061576a565b9250505090565b600260015414156126da5760405162461bcd60e51b8152600401610cad90615526565b6002600155806126fc5760405162461bcd60e51b8152600401610cad906154d4565b6127068133613630565b60cc546127239061010090046001600160a01b03163330846138a7565b5060018055565b60e2546001600160a01b03168061274057600080fd5b61274c60006001613e6e565b3360008181526097602052604090205490612768908383612ee8565b60405163c9c2d4f560e01b8152336004820152602481018290526001600160a01b0383169063c9c2d4f590604401600060405180830381600087803b1580156127b057600080fd5b505af11580156127c4573d6000803e3d6000fd5b505050505050565b60008060006127da84612b08565b90925090506116a48183615615565b6065546001600160a01b031633146128135760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b03811661284e5760405162461bcd60e51b8152602060048201526002602482015261523760f01b6044820152606401610cad565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156128935760405162461bcd60e51b8152600401610cad90615526565b6002600155806128cb5760405162461bcd60e51b815260206004820152600360248201526252323960e81b6044820152606401610cad565b612723816000613e6e565b6065546001600160a01b031633146129005760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b03811661293b5760405162461bcd60e51b81526020600482015260026024820152610a4760f31b6044820152606401610cad565b60d580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146129875760405162461bcd60e51b8152600401610cad906154f1565b6001600160a01b0381166129ec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610cad565b611d5181614003565b6065546001600160a01b03163314612a1f5760405162461bcd60e51b8152600401610cad906154f1565b620f4240612a2d828461562d565b63ffffffff161115612a675760405162461bcd60e51b8152602060048201526003602482015262148c4d60ea1b6044820152606401610cad565b60d25460408051600160801b830463ffffffff90811682528581166020830152600160a01b9093048316818301529183166060830152517fc5b13904dad0762d636763061410ff20f86e9d21359fe8c2b1decacfc9bdd7539181900360800190a160d2805467ffffffffffffffff60801b1916600160801b63ffffffff9485160263ffffffff60a01b191617600160a01b9290931691909102919091179055565b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115612b8a575050506001600160a01b031660009081526097602052604081205491565b60ce54815161ffff908116600090815260ca602052604081205460cc549193612bbb9386939116919060ff166141e9565b9050612bdc856001600160a01b031660009081526097602052604090205490565b9590945092505050565b6065546001600160a01b03163314612c105760405162461bcd60e51b8152600401610cad906154f1565b620151808163ffffffff161015612c4f5760405162461bcd60e51b815260206004820152600360248201526252313560e81b6044820152606401610cad565b60d2805463ffffffff191663ffffffff8381169182179283905560408051600160401b909404909116835260208301919091527fd323e49efbd1e497c4f485723f1434c9b8294a325ad121e48fdb4c1cfacea7359101611ca2565b60026001541415612ccd5760405162461bcd60e51b8152600401610cad90615526565b60026001556000612cdc61425a565b905060008111612d145760405162461bcd60e51b81526020600482015260036024820152620a464760eb1b6044820152606401610cad565b8060e054612d22919061576a565b6001600160801b031660e05560cc546127239061010090046001600160a01b03163383612e80565b6065546001600160a01b03163314612d745760405162461bcd60e51b8152600401610cad906154f1565b612d8084848484613333565b50504260da555050565b6065546001600160a01b03163314612db45760405162461bcd60e51b8152600401610cad906154f1565b612dc2620f4240606461574b565b8110612df65760405162461bcd60e51b815260206004820152600360248201526252313160e81b6044820152606401610cad565b60d254600090600160401b900463ffffffff16612e1a620f42406301e1338061574b565b612e24919061564c565b612e31620f42408461574b565b612e3b919061564c565b60df5460408051918252602082018390529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160df5550565b6040516001600160a01b038316602482015260448101829052612ee390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143a0565b505050565b6001600160a01b038316612f4a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610cad565b6001600160a01b038216612fab5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610cad565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166130705760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610cad565b6001600160a01b0382166130d25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610cad565b6001600160a01b0383166000908152609760205260409020548181101561314a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610cad565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613181908490615615565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516131cd91815260200190565b60405180910390a3611596565b600054610100900460ff16806131f3575060005460ff16155b61320f5760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015613231576000805461ffff19166101011790555b613239614472565b8015611d51576000805461ff001916905550565b600054610100900460ff1680613266575060005460ff16155b6132825760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156132a4576000805461ffff19166101011790555b6132ac6144e1565b6132b6838361454b565b8015612ee3576000805461ff0019169055505050565b600054610100900460ff16806132e5575060005460ff16155b6133015760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015613323576000805461ffff19166101011790555b61332b6144e1565b6132396145e0565b828181146133695760405162461bcd60e51b815260206004820152600360248201526205234360ec1b6044820152606401610cad565b60005b818110156135a157600086868381811061339657634e487b7160e01b600052603260045260246000fd5b90506020020160208101906133ab9190614eb2565b6001600160a01b031614156133bf5761358f565b60d860008787848181106133e357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906133f89190614eb2565b6001600160a01b0316815260208101919091526040016000205460ff166134e65760d786868381811061343b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906134509190614eb2565b81546001808201845560009384526020842090910180546001600160a01b0319166001600160a01b0393909316929092179091559060d8908888858181106134a857634e487b7160e01b600052603260045260246000fd5b90506020020160208101906134bd9190614eb2565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b83838281811061350657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061351b9190615071565b60d8600088888581811061353f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906135549190614eb2565b6001600160a01b03168152602081019190915260400160002060010180546001600160801b0319166001600160801b03929092169190911790555b80613599816157e8565b91505061336c565b507fc8616977b27865a3d83403e8b0eef76d389fc3f711f2bf5bcf0b4399b33d1509858585856040516135d794939291906153bf565b60405180910390a15050505050565b6001600160681b03811115611d515760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401610cad565b60ce5461ffff166000836136426125fc565b61364c9190615615565b60cd549091506001600160681b03168111156136905760405162461bcd60e51b815260206004820152600360248201526229191960e91b6044820152606401610cad565b60cc54600160a81b900466ffffffffffffff168110156136d85760405162461bcd60e51b815260206004820152600360248201526252323360e81b6044820152606401610cad565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc5491929161379291849187919060ff166141e9565b8251909150869061ffff168514156137c35760008784602001516001600160681b03166137bf9190615615565b9150505b6137cc816135e6565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560cf54613873918a9116615615565b905061387e81613cd5565b60cf80546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526115969085906323b872dd60e01b90608401612eac565b6000806138ed83600a6156a3565b9050600086116138fd578061391c565b85613908858761576a565b613912908361574b565b61391c919061564c565b9695505050505050565b6000600183116139705760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610cad565b61397b82600a6156a3565b613985848661574b565b6116a4919061564c565b60d25460d05460009182916139bb91600160401b900463ffffffff169067ffffffffffffffff16615615565b4210156139f05760405162461bcd60e51b815260206004820152600360248201526252333960e81b6044820152606401610cad565b60d5546040805160e08101825260cc5460ff8116825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373__$2abc2342da0ef81c8a62da4073b4b8c831$__93632b8b58cf9360ce9390926020840192610100900416906370a082319060240160206040518083038186803b158015613a7b57600080fd5b505afa158015613a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab391906150a3565b8152602001613ac160995490565b815260200160e054815260200160de54815260200160df54815260200160e1548152506040518363ffffffff1660e01b8152600401613b5292919060006101008201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b60c06040518083038186803b158015613b6a57600080fd5b505af4158015613b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba291906150df565b60ce5461ffff16600081815260ca60209081526040918290208790558151858152908101849052908101829052969d50949b50919850965094509250906001600160a01b038716907f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c0069060600160405180910390a260cf80546001600160801b0319169055613c32816001615615565b60ce805461ffff191661ffff92909216919091179055613c556201518042615803565b613c5f904261576a565b613c6b90617080615615565b60d0805467ffffffffffffffff191667ffffffffffffffff9290921691909117905550613c9a90503084614640565b8015613cbc5760cc54613cbc9061010090046001600160a01b03168583612e80565b613cc58661471f565b613ccd6148d6565b505050509091565b6001600160801b03811115611d515760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401610cad565b60cc54613d3c9061010090046001600160a01b03163330846138a7565b60d95433600090815260d8602052604081205460d354919291613d6d9161010090046001600160801b03169061574b565b613d77919061564c565b90508160ce6003016000828254613d8e9190615615565b909155503390507f68fdeed3f1a82d492cf10b1608f9eb8c69f1a1d9f58c952fb01f9325c9e140f383838111613dc5576000613dcf565b613dcf848661576a565b6040805192835260208301919091520160405180910390a25050565b60cc54613e089061010090046001600160a01b03163330846138a7565b60d254600090613e2e9063ffffffff600160601b8204811691600160401b90041661564c565b60d454613e3b919061564c565b9050337f0f6ba811ab59ff1520dd0aa40c3591aeb13d418d5d2bcf79b5f819a3634ed59583838111613dc5576000613dcf565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260ce5491865260ca9094529184205460cc5491949290931692613ee4918591859160ff166141e9565b905083613ef15784613ef3565b805b945084613f01575050505050565b80851115613f375760405162461bcd60e51b815260206004820152600360248201526205233360ec1b6044820152606401610cad565b825161ffff16821115613f645733600090815260c960205260409020805462010000600160781b03191690555b613f6d85613cd5565b613f77858261576a565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991613ff09189825261ffff16602082015260400190565b60405180910390a26121ff30338761300c565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000811161408b5760405162461bcd60e51b8152602060048201526003602482015262148c8d60ea1b6044820152606401610cad565b33600090815260c960205260409020546201000090046001600160681b03161515806140d5575033600090815260c96020526040902054600160781b90046001600160801b031615155b156140e6576140e660006001613e6e565b60ce5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b03166000821561416f576141688683615615565b90506141b5565b81156141a35760405162461bcd60e51b815260206004820152600360248201526252323560e81b6044820152606401610cad565b50825461ffff191661ffff8516178355845b6141be81613cd5565b835462010000600160901b031916620100006001600160801b038316021784556127c433308861300c565b835160009061ffff16158015906142045750845161ffff1684115b1561424657600061422386602001516001600160681b03168585614aef565b90508086604001516001600160801b031661423e9190615615565b9150506116a4565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff16816142b25760405162461bcd60e51b815260206004820152600360248201526229191b60e91b6044820152606401610cad565b60ce5461ffff1681106142ed5760405162461bcd60e51b815260206004820152600360248201526252323760e81b6044820152606401610cad565b825462010000600160901b031916835560cf5461431b908390600160801b90046001600160801b031661576a565b60cf80546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc5461435891859160ff16613926565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26116a43084614b4f565b60006143f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c9d9092919063ffffffff16565b805190915015612ee357808060200190518101906144139190614fda565b612ee35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cad565b600054610100900460ff168061448b575060005460ff16155b6144a75760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156144c9576000805461ffff19166101011790555b600180558015611d51576000805461ff001916905550565b600054610100900460ff16806144fa575060005460ff16155b6145165760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015613239576000805461ffff19166101011790558015611d51576000805461ff001916905550565b600054610100900460ff1680614564575060005460ff16155b6145805760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff161580156145a2576000805461ffff19166101011790555b82516145b590609a906020860190614da8565b5081516145c990609b906020850190614da8565b508015612ee3576000805461ff0019169055505050565b600054610100900460ff16806145f9575060005460ff16155b6146155760405162461bcd60e51b8152600401610cad90615486565b600054610100900460ff16158015614637576000805461ffff19166101011790555b61323933614003565b6001600160a01b0382166146965760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610cad565b80609960008282546146a89190615615565b90915550506001600160a01b038216600090815260976020526040812080548392906146d5908490615615565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b604080516101008101825260d25463ffffffff808216808452640100000000830482166020850152600160401b8304821694840194909452600160601b820481166060840152600160801b820481166080840152600160a01b9091041660a082015260d35460c082015260d45460e082015290156148335760df546040820151825163ffffffff918216916147b591168361574b565b6147bf919061564c565b60df819055825160d280546bffffffff00000000ffffffff1916600160401b63ffffffff9093169290920263ffffffff19169190911790556040805183815260208101929092527f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a1505b602081015163ffffffff161561488257602081015160d280546fffffffff00000000ffffffff000000001916600160601b63ffffffff9093169290920267ffffffff0000000019169190911790555b6080810151620f42409061489d90849063ffffffff1661574b565b6148a7919061564c565b60d35560a0810151620f4240906148c590849063ffffffff1661574b565b6148cf919061564c565b60d4555050565b60da546148e6906203f480615615565b42101561491b5760405162461bcd60e51b815260206004820152600360248201526205231360ec1b6044820152606401610cad565b60005b60d754811015614ab157600060d8600060d7848154811061494f57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b0316835282019290925260400181205460d780546101009092046001600160801b0316935060d891839190869081106149ae57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020600101546001600160801b03908116915082168114614a9c578060d8600060d78681548110614a1157634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805470ffffffffffffffffffffffffffffffff0019166101006001600160801b039485160217905560d9805492841692909190614a74908490615615565b92505081905550816001600160801b031660d96000828254614a96919061576a565b90915550505b50508080614aa9906157e8565b91505061491e565b507f35f63f8d8ef81a02b50e77faab37344f335fcc256a197cbaa15cd5ab8835aa0660d954604051614ae591815260200190565b60405180910390a1565b600060018311614b395760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610cad565b82614b4583600a6156a3565b613985908661574b565b6001600160a01b038216614baf5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610cad565b6001600160a01b03821660009081526097602052604090205481811015614c235760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610cad565b6001600160a01b0383166000908152609760205260408120838303905560998054849290614c5290849061576a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60606116a4848460008585843b614cf65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cad565b600080866001600160a01b03168587604051614d12919061527d565b60006040518083038185875af1925050503d8060008114614d4f576040519150601f19603f3d011682016040523d82523d6000602084013e614d54565b606091505b5091509150614d64828286614d6f565b979650505050505050565b60608315614d7e575081610fa9565b825115614d8e5782518084602001fd5b8160405162461bcd60e51b8152600401610cad9190615453565b828054614db4906157ad565b90600052602060002090601f016020900481019282614dd65760008555614e1c565b82601f10614def57805160ff1916838001178555614e1c565b82800160010185558215614e1c579182015b82811115614e1c578251825591602001919060010190614e01565b50614e28929150614e2c565b5090565b5b80821115614e285760008155600101614e2d565b60008083601f840112614e52578182fd5b50813567ffffffffffffffff811115614e69578182fd5b6020830191508360208260051b8501011115614e8457600080fd5b9250929050565b80356001600160801b0381168114614ea257600080fd5b919050565b8035614ea281615a6f565b600060208284031215614ec3578081fd5b8135610fa981615a45565b60008060408385031215614ee0578081fd5b8235614eeb81615a45565b91506020830135614efb81615a45565b809150509250929050565b600080600060608486031215614f1a578081fd5b8335614f2581615a45565b92506020840135614f3581615a45565b929592945050506040919091013590565b60008060408385031215614f58578182fd5b8235614f6381615a45565b946020939093013593505050565b60008060008060408587031215614f86578081fd5b843567ffffffffffffffff80821115614f9d578283fd5b614fa988838901614e41565b90965094506020870135915080821115614fc1578283fd5b50614fce87828801614e41565b95989497509550505050565b600060208284031215614feb578081fd5b81518015158114610fa9578182fd5b60008060008385036101a0811215615010578384fd5b843567ffffffffffffffff811115615026578485fd5b85016101408188031215615038578485fd5b93506080601f198201121561504b578283fd5b602085019250610100609f1982011215615063578182fd5b5060a0840190509250925092565b600060208284031215615082578081fd5b610fa982614e8b565b60006020828403121561509c578081fd5b5035919050565b6000602082840312156150b4578081fd5b5051919050565b600080604083850312156150cd578182fd5b823591506020830135614efb81615a45565b60008060008060008060c087890312156150f7578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600080600060a0868803121561513f578283fd5b8535945060208601359350604086013561515881615a96565b94979396509394606081013594506080013592915050565b600060208284031215615181578081fd5b8135610fa981615a6f565b6000806040838503121561519e578182fd5b82356151a981615a6f565b91506020830135614efb81615a6f565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b80356151ed81615a6f565b63ffffffff908116835260208201359061520682615a6f565b908116602084015260408201359061521d82615a6f565b908116604084015260608201359061523482615a6f565b16606083015261524660808201614ea7565b63ffffffff16608083015261525d60a08201614ea7565b63ffffffff1660a083015260c0818101359083015260e090810135910152565b6000825161528f818460208701615781565b9190910192915050565b600060018060a01b03808f168352808e166020840152808d1660408401528b60608401528a608084015261028060a08401526152da61028084018a8c6151b9565b83810360c08501526152ed81898b6151b9565b92505085356152fb81615a96565b60ff1660e0840152602086013561531181615a45565b16610100830152604085013561532681615a81565b66ffffffffffffff16610120830152606085013561534381615a5a565b6001600160681b03166101408301526153606101608301856151e2565b63ffffffff83166102608301529d9c50505050505050505050505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6040808252810184905260008560608301825b878110156154025782356153e581615a45565b6001600160a01b03168252602092830192909101906001016153d2565b50838103602085810191909152858252915085908201835b86811015615446576001600160801b0361543384614e8b565b168252918301919083019060010161541a565b5098975050505050505050565b6020815260008251806020840152615472816040850160208701615781565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526003908201526252323160e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112615573578283fd5b83018035915067ffffffffffffffff82111561558d578283fd5b6020019150600581901b3603821315614e8457600080fd5b6000808335601e198436030181126155bb578283fd5b83018035915067ffffffffffffffff8211156155d5578283fd5b602001915036819003821315614e8457600080fd5b60006001600160801b0380831681851680830382111561560c5761560c615817565b01949350505050565b6000821982111561562857615628615817565b500190565b600063ffffffff80831681851680830382111561560c5761560c615817565b60008261565b5761565b61582d565b500490565b600181815b8085111561569b57816000190482111561568157615681615817565b8085161561568e57918102915b93841c9390800290615665565b509250929050565b6000610fa983836000826156b957506001610efe565b816156c657506000610efe565b81600181146156dc57600281146156e657615702565b6001915050610efe565b60ff8411156156f7576156f7615817565b50506001821b610efe565b5060208310610133831016604e8410600b8410161715615725575081810a610efe565b61572f8383615660565b806000190482111561574357615743615817565b029392505050565b600081600019048311821515161561576557615765615817565b500290565b60008282101561577c5761577c615817565b500390565b60005b8381101561579c578181015183820152602001615784565b838111156115965750506000910152565b600181811c908216806157c157607f821691505b602082108114156157e257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156157fc576157fc615817565b5060010190565b6000826158125761581261582d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008135610efe81615a6f565b813561585b81615a6f565b63ffffffff8116905081548163ffffffff198216178355602084013561588081615a6f565b67ffffffff000000008160201b168367ffffffffffffffff198416171784555050506158db6158b160408401615843565b82546bffffffff0000000000000000191660409190911b6bffffffff000000000000000016178255565b61590e6158ea60608401615843565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b61594161591d60808401615843565b82805463ffffffff60801b191660809290921b63ffffffff60801b16919091179055565b61597461595060a08401615843565b82805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b60c0820135600182015560e082013560028201555050565b813561599781615a96565b60ff8116905081548160ff19821617835560208401356159b681615a45565b610100600160a81b0360089190911b166001600160a81b0319821683178117845560408501356159e581615a81565b6001600160e01b0319929092169092179190911760a89190911b66ffffffffffffff60a81b16178155600181016060830135615a2081615a5a565b81546cffffffffffffffffffffffffff19166001600160681b03919091161790555050565b6001600160a01b0381168114611d5157600080fd5b6001600160681b0381168114611d5157600080fd5b63ffffffff81168114611d5157600080fd5b66ffffffffffffff81168114611d5157600080fd5b60ff81168114611d5157600080fdfea2646970667358221220a25ff173480fcf0e9e70cb4246c2b18d834a2c7ca39de9576f573216ccd6889164736f6c63430008040033",
  "libraries": {
    "VaultLifecycleEarn": "0x35fd2E2F59F24f002BF69eD055DF595228D1c3D4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "deadline": "must be a timestamp in the future",
          "r": "is a valid signature",
          "s": "is a valid signature",
          "v": "is a valid signature"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize((address,address,address[],uint128[],address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256))": {
        "params": {
          "_allocationState": "is the struct with vault loan/option allocation data",
          "_initParams": "is the struct with vault initialization parameters",
          "_vaultParams": "is the struct with vault general data"
        }
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payOptionYield(uint256)": {
        "params": {
          "amount": "is the amount of yield to pay"
        }
      },
      "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "is the amount of yield to pay",
          "deadline": "must be a timestamp in the future",
          "r": "is a valid signature",
          "s": "is a valid signature",
          "v": "is a valid signature"
        }
      },
      "recoverTokens(address,address)": {
        "params": {
          "recipient": "is the recipient of the recovered tokens",
          "token": "is the ERC20 token to recover from the vault"
        }
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "returnLentFunds(uint256)": {
        "params": {
          "amount": "is the amount to return (principal + interest)"
        }
      },
      "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "is the amount to return (principal + interest)",
          "deadline": "must be a timestamp in the future",
          "r": "is a valid signature",
          "s": "is a valid signature",
          "v": "is a valid signature"
        }
      },
      "setAllocationPCT(uint32,uint32)": {
        "details": "Can be called by admin",
        "params": {
          "_loanAllocationPCT": "new allocation for loan",
          "_optionAllocationPCT": "new allocation for option"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setLiquidityGauge(address)": {
        "params": {
          "newLiquidityGauge": "is the address of the new liquidityGauge contract"
        }
      },
      "setLoanTermLength(uint32)": {
        "details": "Can be called by admin",
        "params": {
          "_loanTermLength": "new loan term length"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setOptionPurchaseFrequency(uint32)": {
        "details": "Can be called by admin",
        "params": {
          "_optionPurchaseFreq": "new option purchase frequency"
        }
      },
      "setOptionSeller(address)": {
        "params": {
          "newOptionSeller": "is the address of the new option seller"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setVaultPauser(address)": {
        "params": {
          "newVaultPauser": "is the address of the new vaultPauser contract"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "stake(uint256)": {
        "params": {
          "numShares": "is the number of shares to stake"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBorrowerBasket(address[],uint128[])": {
        "params": {
          "borrowerWeights": "is the array of corresponding borrow weights for the borrower",
          "borrowers": "is the array of borrowers to update"
        }
      },
      "withdrawInstantly(uint256)": {
        "params": {
          "amount": "is the amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "allocationState()": {
        "notice": "Vault's state of the allocation between lending and buying options"
      },
      "borrowerWeights(address)": {
        "notice": "borrowerMapping is the mapping from borrower to their borrow weight. EX: {Wintermute -> 0.4, GSR -> 0.2}"
      },
      "borrowers(uint256)": {
        "notice": "borrowers is the array of borrowing addresses (EX: Wintermute, GSR, Alameda, Genesis)"
      },
      "buyOption()": {
        "notice": "Buys the option by transferring premiums to option seller"
      },
      "commitOptionSeller()": {
        "notice": "Commits the option seller"
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "currentQueuedWithdrawShares()": {
        "notice": "Queued withdraw shares for the current round"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositFor(uint256,address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposits the `asset` from msg.sender without an approve `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initialize((address,address,address[],uint128[],address,address,uint256,uint256,string,string),(uint8,address,uint56,uint104),(uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextRound and burnRemainingOTokens"
      },
      "lastBorrowerBasketChange()": {
        "notice": "lastBorrowerBasketChange is the last time the basket of borrowers was changed (add / remove / set)"
      },
      "lastOptionSellerChange()": {
        "notice": "lastOptionSellerChange is the last time option seller was set"
      },
      "lastQueuedWithdrawAmount()": {
        "notice": "Amount locked for scheduled withdrawals last week;"
      },
      "liquidityGauge()": {
        "notice": "LiquidityGauge contract for the vault"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextRound. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "optionSeller()": {
        "notice": "optionSeller is the address of the entity that we will be buying options from (EX: Orbit)"
      },
      "pausePosition()": {
        "notice": "pause a user's vault position"
      },
      "payOptionYield(uint256)": {
        "notice": "Pays option yield if option is ITM"
      },
      "payOptionYield(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Pays option yield if option is ITM `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments"
      },
      "pendingOptionSeller()": {
        "notice": "pendingOptionSeller is the pending address of the entity that we will be buying options from (EX: Orbit)"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextRound. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "recoverTokens(address,address)": {
        "notice": "Recovery function that returns an ERC20 token to the recipient"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "returnLentFunds(uint256)": {
        "notice": "Return lend funds"
      },
      "returnLentFunds(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Return lend funds `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments"
      },
      "rollToNextRound()": {
        "notice": "Rolls the vault's funds into a new short position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setAllocationPCT(uint32,uint32)": {
        "notice": "Sets new loan and option allocation percentage"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setLiquidityGauge(address)": {
        "notice": "Sets the new liquidityGauge contract for this vault"
      },
      "setLoanTermLength(uint32)": {
        "notice": "Sets loan term length"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setOptionPurchaseFrequency(uint32)": {
        "notice": "Sets option purchase frequency"
      },
      "setOptionSeller(address)": {
        "notice": "Sets the new option seller"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "setVaultPauser(address)": {
        "notice": "Sets the new Vault Pauser contract for this vault"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "stake(uint256)": {
        "notice": "Stakes a users vault shares"
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts lent out"
      },
      "totalBorrowerWeight()": {
        "notice": "totalBorrowerWeight is the total borrowing weight"
      },
      "updateBorrowerBasket(address[],uint128[])": {
        "notice": "Updates the basket of borrowers (this overrides current pending update to basket)"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultPauser()": {
        "notice": "Vault Pauser Contract for the vault"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonEarnVaultStorage. RibbonEarnVault should not inherit from any other contract aside from RibbonVault, RibbonEarnVaultStorage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 184,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 257,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 3732,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)3257_storage)"
      },
      {
        "astId": 3737,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3743,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "withdrawals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)3262_storage)"
      },
      {
        "astId": 3747,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "vaultParams",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultParams)3214_storage"
      },
      {
        "astId": 3751,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "vaultState",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(VaultState)3250_storage"
      },
      {
        "astId": 3755,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "allocationState",
        "offset": 0,
        "slot": "210",
        "type": "t_struct(AllocationState)3231_storage"
      },
      {
        "astId": 3758,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "213",
        "type": "t_address"
      },
      {
        "astId": 3761,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "keeper",
        "offset": 0,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 3765,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "borrowers",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3771,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "borrowerWeights",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_struct(BorrowerState)3269_storage)"
      },
      {
        "astId": 3774,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "totalBorrowerWeight",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 3777,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "lastBorrowerBasketChange",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 3780,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "optionSeller",
        "offset": 0,
        "slot": "219",
        "type": "t_address"
      },
      {
        "astId": 3783,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "pendingOptionSeller",
        "offset": 0,
        "slot": "220",
        "type": "t_address"
      },
      {
        "astId": 3786,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "lastOptionSellerChange",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 3789,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "performanceFee",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 3792,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "managementFee",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 3798,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "currentQueuedWithdrawShares",
        "offset": 0,
        "slot": "225",
        "type": "t_uint256"
      },
      {
        "astId": 3801,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "vaultPauser",
        "offset": 0,
        "slot": "226",
        "type": "t_address"
      },
      {
        "astId": 3804,
        "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
        "label": "liquidityGauge",
        "offset": 0,
        "slot": "227",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowerState)3269_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.BorrowerState)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowerState)3269_storage"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)3257_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)3257_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)3262_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)3262_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AllocationState)3231_storage": {
        "encoding": "inplace",
        "label": "struct Vault.AllocationState",
        "members": [
          {
            "astId": 3216,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "nextLoanTermLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3218,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "nextOptionPurchaseFreq",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3220,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "currentLoanTermLength",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3222,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "currentOptionPurchaseFreq",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3224,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "loanAllocationPCT",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3226,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "optionAllocationPCT",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3228,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "loanAllocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3230,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "optionAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(BorrowerState)3269_storage": {
        "encoding": "inplace",
        "label": "struct Vault.BorrowerState",
        "members": [
          {
            "astId": 3264,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3266,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "borrowerWeight",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3268,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "pendingBorrowerWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DepositReceipt)3257_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 3252,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3254,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3256,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VaultParams)3214_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 3207,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3209,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "asset",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3211,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "minimumSupply",
            "offset": 21,
            "slot": "0",
            "type": "t_uint56"
          },
          {
            "astId": 3213,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "cap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultState)3250_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 3233,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3235,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3237,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 3239,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3241,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 3243,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "lastEpochTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3245,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "lastOptionPurchaseTime",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3247,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "optionsBoughtInRound",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 3249,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "amtFundsReturned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Withdrawal)3262_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 3259,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3261,
            "contract": "contracts/vaults/EarnVault/RibbonEarnVaultFixedRate.sol:RibbonEarnVaultFixedRate",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}